[
    {
        "id": "4649143ffb637082",
        "type": "subflow",
        "name": "core:orama",
        "info": "",
        "category": "Encausse.net",
        "in": [
            {
                "x": 100,
                "y": 160,
                "wires": [
                    {
                        "id": "f6984a27a6631a2d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 120,
                "wires": [
                    {
                        "id": "f6984a27a6631a2d",
                        "port": 0
                    }
                ]
            },
            {
                "x": 740,
                "y": 220,
                "wires": [
                    {
                        "id": "53033c84a141519b",
                        "port": 0
                    },
                    {
                        "id": "4ce0dfaa22cd2839",
                        "port": 0
                    },
                    {
                        "id": "3c00a32728f2232e",
                        "port": 0
                    },
                    {
                        "id": "35f67279850af508",
                        "port": 0
                    },
                    {
                        "id": "ebdf90b6b0ec072b",
                        "port": 0
                    },
                    {
                        "id": "bd0d6cb0f4153113",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "env-database",
                "type": "env",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "Database*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-query",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-edit",
                    "label": {
                        "en-US": "Query*"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Search"
                                },
                                "v": "search"
                            },
                            {
                                "l": {
                                    "en-US": "Create"
                                },
                                "v": "create"
                            },
                            {
                                "l": {
                                    "en-US": "Insert"
                                },
                                "v": "insert"
                            },
                            {
                                "l": {
                                    "en-US": "Remove"
                                },
                                "v": "remove"
                            },
                            {
                                "l": {
                                    "en-US": "GetByID"
                                },
                                "v": "getByID"
                            },
                            {
                                "l": {
                                    "en-US": "JSON Snapshot"
                                },
                                "v": "snapshot"
                            },
                            {
                                "l": {
                                    "en-US": "JSON Restore"
                                },
                                "v": "restore"
                            }
                        ]
                    }
                }
            },
            {
                "name": "env-payload",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-sliders",
                    "label": {
                        "en-US": "Payload*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-rec-id",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-id-badge",
                    "label": {
                        "en-US": "Record ID*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-moonshots-core",
            "type": "moonshots-orama",
            "version": "1.0.0",
            "author": "Jean-Philippe Encausse <jp@encausse.net>",
            "desc": "Wrapper on top of Orama",
            "keywords": "Moonshots, NodeRED, Orama",
            "license": "MIT"
        },
        "color": "#9ff6fd",
        "icon": "font-awesome/fa-table"
    },
    {
        "id": "53033c84a141519b",
        "type": "function",
        "z": "4649143ffb637082",
        "name": "Create Database",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\nif (MOONSHOTS.ORAMA == undefined) { MOONSHOTS.ORAMA = {}}\n\nlet config = msg.orama.config\nif (!config.database){ node.warn('Missing database name'); return msg }\n\nlet db = msg.orama.results = MOONSHOTS.ORAMA[config.database]\nif (db){ return msg }\n\nif (!config.payload){ node.warn('Missing payload'); return msg }\n\nnode.warn({debug: \"Building Database\", config});\nMOONSHOTS.ORAMA.upsert = async (db, rec, key) => { \n  const keyField = key || 'id';\n  const keyValue = rec[keyField];\n\n  // No key value\n  if (!keyValue) { return await Orama.insert(db, rec); }\n  let search = { term: keyValue, where: { [keyField]: keyValue }, limit: 1 }\n\n  // No existing results\n  const res = await Orama.search(db, search);\n  if (res.count == 0) { return await Orama.insert(db, rec); }\n\n  // Merge\n  const existing = res.hits[0].document;\n  const merged = { ...existing, ...rec, [keyField]: keyValue };\n\n         await Orama.remove(db, res.hits[0].id)\n  return await Orama.insert(db, merged);\n\n};\n\nmsg.orama.results = MOONSHOTS.ORAMA[config.database] = await Orama.create(config.payload);\n\nglobal.set('__MOONSHOTS__', MOONSHOTS)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "Orama",
                "module": "@orama/orama"
            }
        ],
        "x": 550,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "f6984a27a6631a2d",
        "type": "function",
        "z": "4649143ffb637082",
        "name": "Setup",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\n\nlet db = msg.orama = msg.orama || {}\ndb.config  = {}\n\ndb.config.database =  MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-database\"))\nif (!db.config.database || db.config.database == \"env-database\") return [msg, undefined];\n\ndb.config.query =  MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-query\"))\nif (!db.config.query || db.config.query == \"env-query\") return [msg, undefined];\n\ndb.config.payload =  MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-payload\"))\nnode.warn(db.config.payload)\nif (!db.config.payload || db.config.payload == \"env-payload\") delete db.config.payload;\n\ndb.config.recId =  MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-rec-id\"))\nif (!db.config.recId || db.config.recId == \"env-rec-id\") delete db.config.recId;\n\ndb.results = {}\nreturn [undefined, msg];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 160,
        "wires": [
            [],
            [
                "f8985e8e3e9a5029"
            ]
        ]
    },
    {
        "id": "f8985e8e3e9a5029",
        "type": "switch",
        "z": "4649143ffb637082",
        "name": "",
        "property": "orama.config.query",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "create",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "snapshot",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "restore",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "search",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "insert",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "remove",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "getByID",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 7,
        "x": 350,
        "y": 220,
        "wires": [
            [
                "53033c84a141519b"
            ],
            [
                "bd0d6cb0f4153113"
            ],
            [
                "0634dfaea8592bc0"
            ],
            [
                "ebdf90b6b0ec072b"
            ],
            [
                "4ce0dfaa22cd2839"
            ],
            [
                "3c00a32728f2232e"
            ],
            [
                "35f67279850af508"
            ]
        ]
    },
    {
        "id": "4ce0dfaa22cd2839",
        "type": "function",
        "z": "4649143ffb637082",
        "name": "Upsert Record",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\nif (MOONSHOTS.ORAMA == undefined) { MOONSHOTS.ORAMA = {}}\n\nlet config = msg.orama.config\nlet db = MOONSHOTS.ORAMA[config.database]\nif (!db){ node.warn(\"Missing Database \" + config.database); return msg }\nif (!config.payload){ node.warn('Missing payload'); return msg }\n\n// Single record\nif (!Array.isArray(config.payload)){\n    msg.orama.results = await MOONSHOTS.ORAMA.upsert(db, config.payload, config.recId);\n    global.set('__MOONSHOTS__', MOONSHOTS)\n    return msg;\n}\n\n// Batch insert\nif (!config.recId) {\n    msg.orama.results = await Orama.insertMultiple(db, config.payload);\n    global.set('__MOONSHOTS__', MOONSHOTS)\n    return msg;\n}\n\n// Loop upsert\nlet results = msg.orama.results = []\nfor (let rec of config.payload){\n    results.push(await MOONSHOTS.ORAMA.upsert(db, rec, config.recId));\n}\nglobal.set('__MOONSHOTS__', MOONSHOTS)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "Orama",
                "module": "@orama/orama"
            }
        ],
        "x": 540,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "3c00a32728f2232e",
        "type": "function",
        "z": "4649143ffb637082",
        "name": "Remove Record",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\nif (MOONSHOTS.ORAMA == undefined) { MOONSHOTS.ORAMA = {}}\n\nlet config = msg.orama.config\nlet db = MOONSHOTS.ORAMA[config.database]\nif (!db){ node.warn(\"Missing Database \" + config.database); return msg }\nif (!config.payload){ node.warn('Missing payload'); return msg }\n\n// Single record\nif (typeof config.payload == 'string'){\n    msg.orama.results = await Orama.remove(db, config.payload)\n}\n\n// Record is an object\nelse if (!Array.isArray(config.payload)){\n    let recId = config.payload['id' || config.recId] \n    msg.orama.results = await Orama.remove(db, recId)\n}\n\n// An Array of String (record Ids)\nelse if (!config.recId) {\n    msg.orama.results = await Orama.removeMultiple(db, config.payload);\n}\n\n// An Array of records with custom Id\nelse {\n    let results = msg.orama.results = []\n    for (let rec of config.payload){\n        results.push(await Orama.remove(db, rec[config.recId]))\n    }\n}\n\nglobal.set('__MOONSHOTS__', MOONSHOTS)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "Orama",
                "module": "@orama/orama"
            }
        ],
        "x": 540,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "35f67279850af508",
        "type": "function",
        "z": "4649143ffb637082",
        "name": "Get Record by ID",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\nif (MOONSHOTS.ORAMA == undefined) { MOONSHOTS.ORAMA = {}}\n\nlet config = msg.orama.config\nlet db = MOONSHOTS.ORAMA[config.database]\nif (!db){ node.warn(\"Missing Database \" + config.database); return msg }\nif (!config.payload){ node.warn('Missing payload'); return msg }\n\n// Single record\nif (typeof config.payload == 'string'){\n    msg.orama.results = await Orama.getByID(db, config.payload)\n}\n\n// Record is an object\nelse {\n    let recId = config.payload['id' || config.recId] \n    msg.orama.results = await Orama.getByID(db, recId)\n}\n\nglobal.set('__MOONSHOTS__', MOONSHOTS)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "Orama",
                "module": "@orama/orama"
            }
        ],
        "x": 550,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "ebdf90b6b0ec072b",
        "type": "function",
        "z": "4649143ffb637082",
        "name": "Search Records",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\nif (MOONSHOTS.ORAMA == undefined) { MOONSHOTS.ORAMA = {}}\n\nlet config = msg.orama.config\nlet db = MOONSHOTS.ORAMA[config.database]\nif (!db){ node.warn(\"Missing Database \" + config.database); return msg }\nif (!config.payload){ node.warn('Missing payload'); return msg }\n\nmsg.orama.results = await Orama.search(db, config.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "Orama",
                "module": "@orama/orama"
            }
        ],
        "x": 540,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "bd0d6cb0f4153113",
        "type": "function",
        "z": "4649143ffb637082",
        "name": "Snapshot Database",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\nif (MOONSHOTS.ORAMA == undefined) { MOONSHOTS.ORAMA = {}}\n\nlet config = msg.orama.config\nlet db = MOONSHOTS.ORAMA[config.database]\nif (!db){ node.warn(\"Missing Database \" + config.database); return msg; }\n\nmsg.orama.results = await OramaPersist.persist(db, 'json');\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "Orama",
                "module": "@orama/orama"
            },
            {
                "var": "OramaPersist",
                "module": "@orama/plugin-data-persistence"
            }
        ],
        "x": 550,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "0634dfaea8592bc0",
        "type": "function",
        "z": "4649143ffb637082",
        "name": "Restore Database",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\nif (MOONSHOTS.ORAMA == undefined) { MOONSHOTS.ORAMA = {}}\n\nlet config = msg.orama.config\nif (!config.database){ node.warn('Missing database name'); return msg }\nif (!config.payload){ node.warn('Missing payload'); return msg }\n\nnode.warn(config.payload)\nmsg.orama.results = MOONSHOTS.ORAMA[config.database] = await OramaPersist.restore('json', config.payload);\n\nglobal.set('__MOONSHOTS__', MOONSHOTS)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "Orama",
                "module": "@orama/orama"
            },
            {
                "var": "OramaPersist",
                "module": "@orama/plugin-data-persistence"
            }
        ],
        "x": 550,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "8e0f26963e23e657",
        "type": "subflow",
        "name": "ai:stt",
        "info": "",
        "category": "Encausse.net",
        "in": [
            {
                "x": 80,
                "y": 100,
                "wires": [
                    {
                        "id": "f06c830e96f9c389"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 430,
                "y": 60,
                "wires": [
                    {
                        "id": "f06c830e96f9c389",
                        "port": 0
                    }
                ]
            },
            {
                "x": 400,
                "y": 140,
                "wires": [
                    {
                        "id": "f06c830e96f9c389",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "env-speech-key",
                "type": "str",
                "value": "env-speech-default-key",
                "ui": {
                    "icon": "font-awesome/fa-key",
                    "label": {
                        "en-US": "Key"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "env-speech-config",
                "type": "str",
                "value": "env-speech-default-config",
                "ui": {
                    "icon": "font-awesome/fa-key",
                    "label": {
                        "en-US": "Config"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-audio-buffer",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-file-audio-o",
                    "label": {
                        "en-US": "Buffer*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "bin",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-moonshots-ai",
            "type": "moonshots-ai-stt",
            "version": "1.0.0",
            "author": "Jean-Philippe Encausse <Jp@encausse.net>",
            "desc": "Wrapper on Azure STT API",
            "keywords": "Moonshots, NodeRED, Azure, AI",
            "license": "MIT"
        },
        "color": "#9ff6fd",
        "outputLabels": [
            "Error",
            ""
        ],
        "icon": "node-red/status.svg"
    },
    {
        "id": "f06c830e96f9c389",
        "type": "function",
        "z": "8e0f26963e23e657",
        "name": "Microsoft Speech SDK",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\n\n// Retrieve Audio Buffer\nmsg.payload = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-audio-buffer\")) || msg.payload\n\nlet subskey      = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-speech-key\"))\nlet subscription = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-speech-config\"))\n\n// Speech Config : https://learn.microsoft.com/en-us/azure/ai-services/speech-service/speech-services-private-link?tabs=portal\nlet speechConfig = SpeechSDK.SpeechConfig.fromSubscription(subskey, subscription.region);\n\n// Build Speech Recognizer\nlet autoDetectSourceLanguageConfig = SpeechSDK.AutoDetectSourceLanguageConfig.fromLanguages([\"en-US\", \"fr-FR\"]);\nlet audioConfig = SpeechSDK.AudioConfig.fromWavFileInput(msg.payload);\n\nlet speechRecognizer = SpeechSDK.SpeechRecognizer.FromConfig(speechConfig, autoDetectSourceLanguageConfig, audioConfig);\nspeechRecognizer.recognizeOnceAsync((result) => {\n        let languageDetectionResult = SpeechSDK.AutoDetectSourceLanguageResult.fromResult(result);\n        let detectedLanguage = languageDetectionResult.language;\n        msg.payload = { result, detectedLanguage, DisplayText : result.text }\n        speechRecognizer.close();\n        node.send([undefined, msg]);\n},(err) => {\n    speechRecognizer.close();\n    msg.payload = {fill : 'red', 'text' : err};\n    node.send([msg, undefined]);\n});",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "SpeechSDK",
                "module": "microsoft-cognitiveservices-speech-sdk"
            },
            {
                "var": "url",
                "module": "url"
            }
        ],
        "x": 240,
        "y": 100,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "23c4be2d8e257059",
        "type": "subflow",
        "name": "web:chat",
        "info": "",
        "category": "Encausse.net",
        "in": [
            {
                "x": 60,
                "y": 180,
                "wires": [
                    {
                        "id": "905bafcc217d5ad3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 860,
                "y": 300,
                "wires": [
                    {
                        "id": "77fa103a665b90ac",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "env-static",
                "type": "str",
                "value": "node-red-static/",
                "ui": {
                    "icon": "font-awesome/fa-folder-o",
                    "label": {
                        "en-US": "Static Folder"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-overwrite",
                "type": "bool",
                "value": "false",
                "ui": {
                    "icon": "font-awesome/fa-warning",
                    "label": {
                        "en-US": "Overwrite"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "bool"
                        ]
                    }
                }
            },
            {
                "name": "env-login",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-lock",
                    "label": {
                        "en-US": "Login*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-db-users",
                "type": "env",
                "value": "env-db-users",
                "ui": {
                    "icon": "font-awesome/fa-address-book-o",
                    "label": {
                        "en-US": "Users DB"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-title",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-code",
                    "label": {
                        "en-US": "Title*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-body",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-code",
                    "label": {
                        "en-US": "Body*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-css",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-file-code-o",
                    "label": {
                        "en-US": "CSS*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-js",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-file-code-o",
                    "label": {
                        "en-US": "JS*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-ws-url",
                "type": "str",
                "value": "wss://",
                "ui": {
                    "icon": "font-awesome/fa-link",
                    "label": {
                        "en-US": "WS URL"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-ws-hint",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-american-sign-language-interpreting",
                    "label": {
                        "en-US": "WS Hint"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-tts-url",
                "type": "env",
                "value": "env-tts-url",
                "ui": {
                    "icon": "font-awesome/fa-link",
                    "label": {
                        "en-US": "TTS URL"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-moonshots-web",
            "type": "moonshots-web-chat",
            "version": "1.0.0",
            "author": "Jean-Philippe Encausse <jp@encausse.net>",
            "desc": "A WebChat Wrapper",
            "keywords": "Moonshots, NodeRED, Web",
            "license": "MIT"
        },
        "color": "#9ff6fd",
        "icon": "font-awesome/fa-file-code-o"
    },
    {
        "id": "905bafcc217d5ad3",
        "type": "function",
        "z": "23c4be2d8e257059",
        "name": "Variables",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\nmsg.web = msg.web || {}\nmsg.web.title =  MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-title\"))\nmsg.web.body  = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-body\"))\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 180,
        "wires": [
            [
                "a39d46a0a6c8bc9f",
                "3d70c0c210be5c20"
            ]
        ]
    },
    {
        "id": "a39d46a0a6c8bc9f",
        "type": "switch",
        "z": "23c4be2d8e257059",
        "name": "Overwrite",
        "property": "env-overwrite",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 340,
        "y": 140,
        "wires": [
            [
                "5ff74d10687c2717",
                "e0059ed11307593d"
            ]
        ]
    },
    {
        "id": "3c710f85b954fcca",
        "type": "file",
        "z": "23c4be2d8e257059",
        "name": "Cache to static folder",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 920,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "f0c89368bee6cd97",
        "type": "template",
        "z": "23c4be2d8e257059",
        "name": "webchat.css",
        "field": "payload",
        "fieldType": "msg",
        "format": "css",
        "syntax": "mustache",
        "template": ":root {\n    --theme-color-background: #f5f5f5;\n    --theme-color-foreground: #000000;\n\n    --theme-color-primary-bg: #0889ba;\n    --theme-color-primary-fg: #ffffff;\n    --theme-color-primary-hl: #4be1fc;\n    --theme-color-primary-btn: #04506d;\n\n    --theme-color-secondary-bg: #303440;\n    --theme-color-secondary-fg: #ffffff;\n    --theme-color-secondary-hl: #69728c;\n\n    --theme-color-chat-bg: #EEEEEE;\n    --theme-bubble-radius: 1em;\n}\n\n/* ------------------------------------------ */\n/*  COMMON                                    */\n/* ------------------------------------------ */\n\nBODY {\n    color: var(--theme-color-foreground);\n    background: var(--theme-color-background);\n}\n\n/* ------------------------------------------ */\n/*  CHAT : CUSTOM                             */\n/* ------------------------------------------ */\n\nPRE {\n    background: #282c34;\n    padding: var(--theme-bubble-radius);\n    border-radius: 0.4em;\n    font-size: 12px;\n    line-height: 16px;\n}\n\n.app-chat-container {\n    position: absolute;\n    top: 2em;\n    bottom: 2em;\n    left: 2em;\n    right: 2em;\n    border-radius: 0.4em;\n    overflow: hidden;\n    border: 1px solid var(--theme-color-primary-hl);\n    background: var(--theme-color-chat-bg);\n}\n\n/* ------------------------------------------ */\n/*  CHAT                                      */\n/* ------------------------------------------ */\n\n.app-chat-side {\n    position: absolute;\n    top: 2em;\n    bottom: 2em;\n    left: 2em;\n    right: 2em;\n}\n\n\n#app-chat {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 3em;\n    bottom: 6em;\n    overflow-y: scroll;\n}\n\n#app-chat .chat-bubble {\n    margin: var(--theme-bubble-radius);\n    padding: var(--theme-bubble-radius);\n    border-radius: var(--theme-bubble-radius);\n}\n\n.chat-bubble H1,\n.chat-bubble H2,\n.chat-bubble H3,\n.chat-bubble H4,\n.chat-bubble H5,\n.chat-bubble H6 {\n    font-size: 1.1rem;\n}\n\n.chat-bubble IMG {\n    max-width: 100%;\n    border: 1px solid var(--theme-color-primary-fg);\n}\n\n.chat-bubble A {\n    color: var(--theme-color-primary-hl);\n}\n\n#app-chat .chat-bubble P:last-child {\n    margin-bottom: 0;\n}\n\n#app-chat .chat-bubble-app {\n    color: var(--theme-color-primary-fg);\n    background: var(--theme-color-primary-bg);\n    margin-left: calc(var(--theme-bubble-radius)*4);\n    margin-right: 10%;\n}\n\n#app-chat .chat-bubble-user {\n    color: var(--theme-color-secondary-fg);\n    background: var(--theme-color-secondary-bg);\n    margin-left: 30%;\n}\n\n#app-chat .chat-bubble-sys {\n    color: var(--theme-color-primary-fg);\n    background: var(--theme-color-primary-bg);\n}\n\n.chat-bubble-sys::before {\n    content: '⌛';\n    position: relative;\n    float: left;\n}\n\n/* ------------------------------------------ */\n/*  CHAT : HEADER                             */\n/* ------------------------------------------ */\n\n#app-chat-header {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    height: 3em;\n    color: var(--theme-color-primary-fg);\n    background: var(--theme-color-primary-bg);\n    text-align: left;\n    font-weight: bold;\n    padding: 0.4em;\n    border-bottom: 1px solid var(--theme-color-primary-hl);\n}\n\n#app-chat-title {\n    position: absolute;\n    left: 0.6em;\n    top: 0.6em;\n}\n\n#app-status {\n    position: absolute;\n    right: 0;\n    width: 40%;\n    top: 0.6em;\n    right: 0.6em;\n    text-align: right;\n    font-weight: normal;\n    color: var(--theme-color-primary-hl);\n}\n\n/* ------------------------------------------ */\n/*  CHAT : FOOTER                             */\n/* ------------------------------------------ */\n\n#app-chat-footer {\n    position: absolute;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    height: 6.2em;\n    border-top: 1px solid var(--theme-color-primary-hl);\n    color: var(--theme-color-primary-fg);\n    background: var(--theme-color-primary-bg);\n    padding: 0.4em;\n    padding-right: 10%;\n}\n\n#app-chat-footer .footer-btn {\n    position: absolute;\n    right: 0.4em;\n    top: 0.4em;\n    width: 8%;\n}\n\n#app-chat-footer .footer-btn .btn {\n    border: 1px solid var(--theme-color-primary-hl);\n    background: var(--theme-color-primary-btn);\n    color: var(--theme-color-primary-fg);\n    margin-bottom: 0.4em;\n    width: 100%;\n}\n\n#app-chat-footer #chat-message {\n    background: var(--theme-color-chat-bg);\n}",
        "output": "str",
        "x": 710,
        "y": 160,
        "wires": [
            [
                "3c710f85b954fcca"
            ]
        ]
    },
    {
        "id": "56640dbfaa921fe5",
        "type": "template",
        "z": "23c4be2d8e257059",
        "name": "webchat.js",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "!function ($) {\n  $.CLIENT = $.CLIENT || {};\n  $.CLIENT.CONFIG =  $.CLIENT.CONFIG || {}\n  $.CLIENT.CONFIG.webchat = {}\n\n  // ------------------------------------------\n  //  PUBLIC\n  // ------------------------------------------\n\n  let interrupt = undefined;\n  const handleChat = $.CLIENT.handleChat = (msg) => {\n    let chat = msg.message.event.value\n    console.log(chat)\n    // Prevent multiple call, but it doesn't fix Same Ack Call\n    if (interrupt){ interrupt(); }\n\n    // Prepare callback\n    let callback = interrupt = () => {\n        interrupt = undefined;\n        //$.CLIENT.stopSpeech(); // too much ?\n\n        // Send Ack after animation\n        $.CLIENT.sendAck(msg.replyId);\n    }\n\n    // Create/Add chat bubble\n    setChatBubble(chat, () => { /* nothing  */ })\n\n    // An echo from the user\n    if (chat.from === 'user')   { return callback(); }\n    if (chat.from === 'system') { return callback(); }\n\n    // Display button advice first\n    //if (chat.buttons && chat.text){ $.CLIENT.showAdvice(chat.text)}\n\n    // Then speech\n    if (!$.CLIENT.CONFIG.webchat.tts){ return callback(); }\n    $.CLIENT.textToSpeech(chat.speech || chat.text || chat, () => {\n        return callback();\n    });\n  }\n  \n    // ------------------------------------------\n    //  PRIVATE\n    // ------------------------------------------\n\n    const addBubble = (message, callback) => {\n        let text = message\n        let type = 'chat-bubble-app'\n        let buttons = '';\n\n        if (typeof message !== 'string'){\n            text = message.text\n\n            if (marked){\n                text = marked.parse(text)\n            }\n\n            // Add Bubble User\n            if (message.from === 'user'){\n                type = 'chat-bubble-user'\n            }\n\n            // Is System message\n            if (message.from === 'system'){\n                type += ' chat-bubble-sys'\n            }\n\n            // Add Bubble Buttons\n            if (message.buttons){\n                buttons += '<div class=\"chat-bubble-btn\">'\n                for (let btn of message.buttons){\n                    buttons += '<button value=\"' + (btn.value || btn.title ) + '\">'+ btn.title +'</button>'\n                }\n                buttons += '</div>'\n            }\n        }\n\n        // Create Bubble\n        let bubble  = '<div class=\"chat-bubble ' + type + ' bounceInLeft animated\">'\n            bubble += '<div class=\"chat-bubble-content\">' + text + buttons + '</div>'\n            bubble += '</div>'\n        let $bubble = $(bubble);\n\n        // Highlight the code\n        $bubble.find('pre code').each(function(i, block) {\n            let options = { language : 'Markdown'} // default on Markdown\n            if (block.className && block.className.startsWith('language')){\n                options = { language : block.className.substring(9) }\n            }\n            let highlighted = hljs.highlight(block.textContent, options);\n            block.innerHTML = highlighted.value\n        });\n\n        // Add Bubble to Chat\n        $chat = $( \"#app-chat\" )\n        $chat.find('.chat-bubble-sys').remove();\n        $chat.append($bubble);\n\n\n        // Animate\n        if (message.from !== 'system'){\n            $chat.animate({ scrollTop: $chat.prop(\"scrollHeight\")}, 1000);\n\n            // Callback after bounce\n            setTimeout(callback, $.CLIENT.CONFIG.animate.bounce)\n            \n        } else { callback(); }\n\n        \n    }\n\n  let _handle;\n  const setChatBubble = (message, callback) => {\n\n      // Reset cleaning\n      clearTimeout(_handle);\n\n      // Clean too many bubble\n      let bubbles = $( \"#app-chat .chat-bubble\")\n      addBubble(message, callback);\n  }\n\n  // ------------------------------------------\n  //  REGISTER\n  // ------------------------------------------\n\n  const register = () => {\n    $('#chat-send').on('click', () => {\n        let message = $('#chat-message').val();\n        if (!message) return;\n        $.CLIENT.send(\"ws:chat\", message);\n        $('#chat-message').val('');\n    })\n\n    $('#chat-speech').on('click', () => {\n        let state = !$.CLIENT.CONFIG.webchat.tts\n        $.CLIENT.CONFIG.webchat.tts = state;\n        $('#chat-speech').html(state ? '🔊' : '🔇');\n\n    })\n\n    $('.chat-action').on('click', (e) => {\n        let message = $(e.target).text();\n        if (!message) return;\n        $.CLIENT.send(\"ws:chat\", message);\n    })\n\n    $.CLIENT.listenEvent('ws:chat', handleChat);\n  }\n\n  // Initialization on DOM ready\n  $(() => { register(); });\n\n}(jQuery);",
        "output": "str",
        "x": 710,
        "y": 120,
        "wires": [
            [
                "3c710f85b954fcca"
            ]
        ]
    },
    {
        "id": "5ff74d10687c2717",
        "type": "function",
        "z": "23c4be2d8e257059",
        "name": "js/webchat.js",
        "func": "let staticRoot = env.get(\"env-static\")\nmsg.filename = staticRoot + 'js/webchat.js'\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 120,
        "wires": [
            [
                "56640dbfaa921fe5"
            ]
        ]
    },
    {
        "id": "e0059ed11307593d",
        "type": "function",
        "z": "23c4be2d8e257059",
        "name": "css/webchat.css",
        "func": "let staticRoot = env.get(\"env-static\")\nmsg.filename = staticRoot + 'css/webchat.css'\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 160,
        "wires": [
            [
                "f0c89368bee6cd97"
            ]
        ]
    },
    {
        "id": "3d70c0c210be5c20",
        "type": "subflow:ed6749f4e72bfce1",
        "z": "23c4be2d8e257059",
        "name": "",
        "env": [
            {
                "name": "env-overwrite",
                "value": "env-overwrite",
                "type": "env"
            },
            {
                "name": "env-login",
                "value": "env-login",
                "type": "env"
            },
            {
                "name": "env-title",
                "value": "env-title",
                "type": "env"
            },
            {
                "name": "env-css",
                "value": "env-css",
                "type": "env"
            },
            {
                "name": "env-js",
                "value": "env-js",
                "type": "env"
            },
            {
                "name": "env-ws-url",
                "value": "env-ws-url",
                "type": "env"
            },
            {
                "name": "env-ws-hint",
                "value": "env-ws-hint",
                "type": "env"
            }
        ],
        "x": 350,
        "y": 220,
        "wires": [
            [
                "c605abd50267e969"
            ]
        ]
    },
    {
        "id": "77fa103a665b90ac",
        "type": "template",
        "z": "23c4be2d8e257059",
        "name": "HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{{web.header.start}}}\n{{{web.header.end}}}\n\n{{{web.chat}}}\n{{#web.body}}{{{web.body}}}{{/web.body}}\n\n{{{web.footer.start}}}\n{{{web.footer.end}}}",
        "output": "str",
        "x": 750,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "c605abd50267e969",
        "type": "template",
        "z": "23c4be2d8e257059",
        "name": "webchat.html",
        "field": "web.chat",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<div class=\"app-chat-container\">\n    <div id=\"app-chat-header\">\n        {{#web.title}}<div id=\"app-chat-title\">{{{web.title}}}</div>{{/web.title}}\n        <div id=\"app-status\"></div>\n    </div>\n    <div id=\"app-chat\">\n    </div>\n    <div id=\"app-chat-footer\">\n        <textarea id=\"chat-message\" class=\"form-control\"  rows=\"3\"></textarea>\n        <div class=\"footer-btn\">\n            <button id=\"chat-speech\" class=\"btn\">🔊</button>\n            <button id=\"chat-send\" class=\"btn\">💬</button>\n        </div>\n    </div>\n</div>",
        "output": "str",
        "x": 590,
        "y": 220,
        "wires": [
            [
                "295cc514fe4fe9f8"
            ]
        ]
    },
    {
        "id": "295cc514fe4fe9f8",
        "type": "template",
        "z": "23c4be2d8e257059",
        "name": "header-start.html",
        "field": "web.header.start",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{{web.header.start}}}\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.9.0/build/styles/atom-one-dark.min.css\">\n<link rel=\"stylesheet\" href=\"/css/webchat.css\"/>",
        "output": "str",
        "x": 570,
        "y": 260,
        "wires": [
            [
                "664fb2fd676deb6d"
            ]
        ]
    },
    {
        "id": "664fb2fd676deb6d",
        "type": "template",
        "z": "23c4be2d8e257059",
        "name": "footer-start.html",
        "field": "web.footer.start",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{{web.footer.start}}}\n<script src=\"https://cdn.jsdelivr.net/npm/marked/marked.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js\"></script>\n<script src='/js/webchat.js'></script>\n\n<script>\n!function ($) {\n  // Enable TTS\n  $.CLIENT.CONFIG.webchat.tts = true;\n}(jQuery);\n</script>\n",
        "output": "str",
        "x": 580,
        "y": 300,
        "wires": [
            [
                "77fa103a665b90ac"
            ]
        ]
    },
    {
        "id": "5a761f7b96ed136a",
        "type": "subflow",
        "name": "core:scrap",
        "info": "",
        "category": "Encausse.net",
        "in": [
            {
                "x": 120,
                "y": 200,
                "wires": [
                    {
                        "id": "06029922fecce41b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 410,
                "y": 120,
                "wires": [
                    {
                        "id": "ba0bfdef626ef1b6",
                        "port": 0
                    },
                    {
                        "id": "06029922fecce41b",
                        "port": 0
                    }
                ]
            },
            {
                "x": 780,
                "y": 240,
                "wires": [
                    {
                        "id": "3003dcd46b83e019",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "env-url",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-chain",
                    "label": {
                        "en-US": "URL*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-headers",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-braille",
                    "label": {
                        "en-US": "Headers*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-html",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-file-code-o",
                    "label": {
                        "en-US": "HTML*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-scrap",
                "type": "str",
                "value": "clean",
                "ui": {
                    "icon": "font-awesome/fa-crop",
                    "label": {
                        "en-US": "Scrapping"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-custom",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-bug",
                    "label": {
                        "en-US": "Custom"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-moonshots-core",
            "type": "moonshots-scrap",
            "version": "1.0.0",
            "author": "Jean-Philippe Encausse <jp@encausse.net>",
            "desc": "Scrap and Clean HTML",
            "keywords": "Moonshots, NodeRED, Scrap",
            "license": "MIT"
        },
        "color": "#9ff6fd",
        "outputLabels": [
            "Error",
            "Response"
        ],
        "icon": "font-awesome/fa-globe"
    },
    {
        "id": "ed6223590a8fd3b0",
        "type": "http request",
        "z": "5a761f7b96ed136a",
        "name": "HTTP Request",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 440,
        "y": 180,
        "wires": [
            [
                "ba0bfdef626ef1b6"
            ]
        ]
    },
    {
        "id": "06029922fecce41b",
        "type": "function",
        "z": "5a761f7b96ed136a",
        "name": "Settings",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\n\nlet scrap = {}\nscrap.mode   = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-scrap\"))\nscrap.html   = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-html\"))\n\nif (scrap.mode == 'custom'){\n    scrap.custom = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-custom\"))\n}\n\nif (scrap.html){\n    msg.scrap = scrap\n    return [undefined, undefined, msg]\n}\n\nscrap.url = msg.url = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-url\"))\nif (!scrap.url){\n    return [msg, undefined, undefined]\n}\n\nscrap.header = msg.headers = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36 Alambic/1.0',\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n    'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'\n}\n\nlet headers = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-headers\"))\nif (headers !== null && typeof headers === 'object'){\n    Object.assign(scrap.header, headers);\n}\n\nmsg.scrap = scrap\nreturn [undefined, msg, undefined]",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 200,
        "wires": [
            [],
            [
                "ed6223590a8fd3b0"
            ],
            [
                "3003dcd46b83e019"
            ]
        ]
    },
    {
        "id": "3003dcd46b83e019",
        "type": "function",
        "z": "5a761f7b96ed136a",
        "name": "Scrap",
        "func": "\n// Check the cleanning process\nif (!msg.scrap.mode || msg.scrap.mode == 'raw'){\n    msg.scrap.result = msg.scrap.html\n    return msg;\n}\n\nconst $ = cheerio.load(msg.scrap.html);\n\n// Find the relevent content if any\nlet mainContent = $('article, main, #content, .content, .page-content, .entry-content, .main-content, .post').toString();\nif (mainContent) {  $('body').html(mainContent); }\n\n// ------------------------------------------\n//  MAIN content\n// ------------------------------------------\n\nif (msg.scrap.mode == 'main') { \n  let maxLength = 0;\n  // Try to find the main content\n  $('article, .content, .page-content, .entry-content, .main-content, .post').each((index, element) => {\n    let $e = $(element);\n    let textContent = $e.text().trim()\n    if (textContent.length > maxLength) {\n      maxLength = textContent.length;\n      mainContent = $e.toString();\n    }\n  });\n  if (mainContent) { $('body').html(mainContent);  }\n}\n\n// ------------------------------------------\n//  CUSTOM content\n// ------------------------------------------\n\nif (msg.scrap.mode == 'custom' && msg.scrap.custom){\n  $(msg.scrap.custom).each((index, element) => {\n    let $e = $(element);\n    mainContent += $e.toString();\n  })\n  if (mainContent) { $('body').html(mainContent);  }\n}\n\n// ------------------------------------------\n//  CLEAN content\n// ------------------------------------------\n\n// Remove all script and unnecessary elements\n$('header, nav, footer, aside, style, script, noscript, link, iframe, svg, form, button, input, select, textarea, .advertisement, .ad, .banner, .widget, .promo, .popup').remove();\n\n\n// Remove very long lists\n$('ul, ol').each((index, list) => {\n  if ($(list).find('li').length > 8) { $(list).remove(); }\n});\n\n// Remove all aside, nav, section, div with more than 5 links\nlet clean_links = 'aside, nav, section, div, ol, P'\nif (msg.scrap.mode == 'custom' || msg.scrap.mode == 'clean-links'){\n  clean_links = 'aside, nav, section, ol'\n}\n\n  let cache = {};\n  $('a').each((index, element) => {\n    let $e = $(element);\n    let parent = $e.closest(clean_links);\n    let parentHtml = parent.html();\n\n    if (!cache[parentHtml]) {\n      cache[parentHtml] = { count: 0, element: parent };\n    }\n\n    cache[parentHtml].count++;\n  });\n\n  for (let key in cache) {\n    let data = cache[key];\n    if (data.count > 4) {\n      data.element.remove();\n    }\n  }\n\n\n// Remove all sections with too many links or related content\n$('aside, nav, section, div').each((index, element) => {\n  let $e = $(element);\n\n  const classes = $e.attr('class');\n  if (classes && classes.indexOf('related') !== -1)      { return $e.remove(); }\n  if (classes && classes.indexOf('social-share') !== -1) { return $e.remove(); }\n  if (classes && classes.indexOf('signup') !== -1)       { return $e.remove(); }\n\n  const id = $e.attr('id');\n  if (id && id.indexOf('related') !== -1) { return $e.remove(); }\n});\n\n\n// Flatten nested divs and spans\n$('div').each(function () { $(this).replaceWith($(this).contents()); });\n$('span').each(function () { $(this).replaceWith($(this).contents()); });\n\n// Comments\n//$.root().find('*').addBack().contents().each((index, element) => {\n//    if (element.type === 'comment') { return $(element).remove(); }\n//})\n\n$('*').each((index, element) => {\n  let $e = $(element);\n  // Remove empty tags\n  if (!$e.html().trim()) { \n    let filter = true; let tagName = element.tagName.toLowerCase()\n    if (tagName == 'img')  filter = false;\n    if (tagName == 'meta' && element.attribs['name'] == 'description') filter = false;\n    if (tagName == 'body') filter = false;\n    if (filter){ return $e.remove();  }\n  }\n\n  // Remove specific attributes\n  Object.keys(element.attribs).forEach(attr => {\n    if (attr.startsWith('id') || attr.startsWith('class') || attr.startsWith('style') || attr.startsWith('data-') || attr.startsWith('aria-') || attr.startsWith('lang') || attr.startsWith('dir') || attr.startsWith('prefix')) {\n      $e.removeAttr(attr);\n    }\n  });\n});\n\n// Remove white space, etc ...\nlet content = $.html();\ncontent = content.replace(/<!--[\\s\\S]*?-->/g, ''); // HTML comments\ncontent = content.replace(/[ \\t]+/g, ' ');\ncontent = content.replace(/^\\s+/gm, '');\ncontent = content.replace(/(\\r\\n|\\n|\\r)/g, '');\n\nmsg.scrap.result = content;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "cheerio",
                "module": "cheerio"
            }
        ],
        "x": 410,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "ba0bfdef626ef1b6",
        "type": "function",
        "z": "5a761f7b96ed136a",
        "name": "Clean",
        "func": "node.warn(msg)\nmsg.scrap.html = msg.payload\nreturn [undefined, msg];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 180,
        "wires": [
            [],
            [
                "3003dcd46b83e019"
            ]
        ]
    },
    {
        "id": "9c3ff53b15fd137d",
        "type": "subflow",
        "name": "llm:dalle",
        "info": "This node is a wrapper of Azure OpenAI Client to generate Dalle.\r\n\r\n# Input\r\nModel's credential should be provide using environment mechanism. See llm:Model documentation.\r\n\r\n- Dimension : Size of the image\r\n- Count: Number of image\r\n# Output\r\n\r\nThe node will output a `msg.llm` object with all underlaying elements\r\n 1. Errors (look into msg.llm.error)\r\n 3. Response",
        "category": "Encausse.net",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "bde86c6459451176"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 820,
                "y": 60,
                "wires": [
                    {
                        "id": "789054441ce3a2cd",
                        "port": 0
                    }
                ]
            },
            {
                "x": 360,
                "y": 180,
                "wires": [
                    {
                        "id": "e6a8621a0cc7e5bc",
                        "port": 1
                    },
                    {
                        "id": "f58c5452844dd4e5",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "env-llm-model",
                "type": "env",
                "value": "env-llm-gpt-model",
                "ui": {
                    "icon": "font-awesome/fa-gears",
                    "label": {
                        "en-US": "DALLE*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-llm-key",
                "type": "env",
                "value": "env-llm-gpt-key",
                "ui": {
                    "icon": "font-awesome/fa-user-secret",
                    "label": {
                        "en-US": "Key*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "env-llm-endpoint",
                "type": "env",
                "value": "env-llm-gpt-endpoint",
                "ui": {
                    "icon": "font-awesome/fa-user-secret",
                    "label": {
                        "en-US": "Endpoint*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-data",
                "type": "str",
                "value": "payload",
                "ui": {
                    "icon": "font-awesome/fa-align-left",
                    "label": {
                        "en-US": "Prompt*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-dim",
                "type": "str",
                "value": "1024x1024",
                "ui": {
                    "icon": "font-awesome/fa-arrows",
                    "label": {
                        "en-US": "Dimensions*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-quality",
                "type": "str",
                "value": "standard",
                "ui": {
                    "icon": "font-awesome/fa-file-photo-o",
                    "label": {
                        "en-US": "Quality"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Standard"
                                },
                                "v": "standard"
                            },
                            {
                                "l": {
                                    "en-US": "HD"
                                },
                                "v": "hd"
                            }
                        ]
                    }
                }
            },
            {
                "name": "env-style",
                "type": "str",
                "value": "natural",
                "ui": {
                    "icon": "font-awesome/fa-paint-brush",
                    "label": {
                        "en-US": "Style"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Natural"
                                },
                                "v": "natural"
                            },
                            {
                                "l": {
                                    "en-US": "Vivid"
                                },
                                "v": "vivid "
                            }
                        ]
                    }
                }
            },
            {
                "name": "env-count",
                "type": "num",
                "value": "1",
                "ui": {
                    "icon": "font-awesome/fa-sort-numeric-asc",
                    "label": {
                        "en-US": "Count*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-format",
                "type": "str",
                "value": "url",
                "ui": {
                    "icon": "font-awesome/fa-braille",
                    "label": {
                        "en-US": "Format"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "URL"
                                },
                                "v": "url"
                            },
                            {
                                "l": {
                                    "en-US": "Base64"
                                },
                                "v": "b64_json"
                            }
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-moonshots-llm",
            "type": "moonshots-llm-dalle",
            "version": "1.1.0",
            "author": "Jean-Philippe Encausse <jp@encausse.net>",
            "desc": "Wrapper on Azure OpenAI Client for Dalle",
            "keywords": "Moonshots, NodeRED, LLM, OpenAI",
            "license": "MIT"
        },
        "color": "#9ff6fd",
        "icon": "font-awesome/fa-image"
    },
    {
        "id": "f58c5452844dd4e5",
        "type": "function",
        "z": "9c3ff53b15fd137d",
        "name": "Query OpenAI DALLE",
        "func": "let t0 = Date.now()\nlet model = msg.llm.model\n\ntry { \n    let options    =  Object.assign({}, msg.llm.dalle.options); \n    options.model  = ''\n    options.prompt  = msg.llm.dalle.data\n    let result = await model.client.images.generate(options);\n    msg.llm.result = result;\n} catch(err){\n    msg.llm.error = { err };\n    return node.send([msg, undefined], false);\n}\n\n// Debug duration of API calls\nmsg.llm.debug.duration = (Date.now() - t0); \n\n\n// Handle result assume there is options.count images\nlet datas = msg.llm.result.data\nif (!datas){\n    msg.llm.error = { err : 'No LLM images' }\n    return node.send([msg, undefined],false);\n}\n\nreturn node.send([undefined,msg],false);",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 120,
        "wires": [
            [
                "789054441ce3a2cd"
            ],
            []
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "e6a8621a0cc7e5bc",
        "type": "function",
        "z": "9c3ff53b15fd137d",
        "name": "Variables",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\n\nmsg.llm = msg.llm || {}\nmsg.llm.debug = msg.llm.debug || {}\nmsg.llm.dalle = {} // Always override\n\nmsg.llm.dalle.data = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-data\"))\n\n// https://learn.microsoft.com/en-us/azure/ai-services/openai/reference#image-generation\nmsg.llm.dalle.options                 = {}\nmsg.llm.dalle.options.n               = parseInt(MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-count\")))\nmsg.llm.dalle.options.dimensions      = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-dim\"))\nmsg.llm.dalle.options.style           = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-style\"))\nmsg.llm.dalle.options.quality         = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-quality\"))\nmsg.llm.dalle.options.response_format = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-format\"))\n\nreturn node.send([msg, undefined], false);",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 120,
        "wires": [
            [
                "f58c5452844dd4e5"
            ],
            []
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "bde86c6459451176",
        "type": "subflow:63608c8ffd25253a",
        "z": "9c3ff53b15fd137d",
        "name": "Build Model",
        "x": 210,
        "y": 80,
        "wires": [
            [
                "789054441ce3a2cd"
            ],
            [
                "e6a8621a0cc7e5bc"
            ]
        ]
    },
    {
        "id": "789054441ce3a2cd",
        "type": "function",
        "z": "9c3ff53b15fd137d",
        "name": "Errors",
        "func": "//node.warn(msg.llm);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 60,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-bug"
    },
    {
        "id": "ea894352f6e79051",
        "type": "subflow",
        "name": "core:status",
        "info": "",
        "category": "Encausse.net",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "6227eb579fdf24e9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 60,
                "wires": [
                    {
                        "id": "6227eb579fdf24e9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "env-status-color",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-dashboard",
                    "label": {
                        "en-US": "Color"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "None"
                                },
                                "v": ""
                            },
                            {
                                "l": {
                                    "en-US": "Red"
                                },
                                "v": "red"
                            },
                            {
                                "l": {
                                    "en-US": "Blue"
                                },
                                "v": "blue"
                            },
                            {
                                "l": {
                                    "en-US": "Green"
                                },
                                "v": "green"
                            }
                        ]
                    }
                }
            },
            {
                "name": "env-status-text",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-file-text-o",
                    "label": {
                        "en-US": "Text"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-moonshots-core",
            "type": "moonshots-core-status",
            "version": "1.0.0",
            "author": "Jean-Philippe Encausse <Jp@encausse.net>",
            "desc": "Helper for Status",
            "keywords": "Moonshots, NodeRED, Azure, Core",
            "license": "MIT"
        },
        "color": "#9ff6fd",
        "icon": "node-red/status.svg"
    },
    {
        "id": "6227eb579fdf24e9",
        "type": "function",
        "z": "ea894352f6e79051",
        "name": "Set Status Payload",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\n\nlet fill  = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-status-color\"))\nlet text  = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-status-text\"))\n\nif (!fill || fill == \"env-status-color\"){ return msg.payload = {}}\nif (!text  || text  == \"env-status-text\") { return msg.payload = {} }\n\nmsg.payload = { fill, text }\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "f36dcac84e162f71",
        "type": "subflow",
        "name": "llm:engine",
        "info": "This node is a wrapper of Azure OpenAI Client.\r\n\r\n# Input\r\n\r\nModel's credential should be provide using environment mechanism. See llm:Model documentation.\r\n\r\n- User : A string of the user's query\r\n- Context: A String or an object to stringify with some context (It will generate chat messsage, after System message)\r\n- History: An array of previous chat message\r\n- Tools: An array of tool (JSON) used by OpenAI\r\n\r\n# Output\r\n\r\nThe node will output a `msg.llm` object with all underlaying elements\r\n 1. Errors (look into msg.llm.error)\r\n 2. Tools to handle\r\n 3. Response\r\n\r\n# Tools\r\n\r\nTools JSON format must follow Azure OAI documentation.\r\n```\r\nconst tool = {\r\n    name: \"LLM_Tool_Name\",\r\n    description: \"Tool descirption\",\r\n    parameters: {\r\n        type: \"object\",\r\n        properties: {\r\n            query: {\r\n                type: \"string\",\r\n                description: \"Tool field description\",\r\n            },\r\n        },\r\n        required: [\"query\"],\r\n    },\r\n};\r\nmsg.llm.tools = msg.llm.tools || []\r\nmsg.llm.tools.push({ type: \"function\", function: tool })\r\n```\r\n\r\n\r\nYou should set a Switch node that look into `llm.tool.function.name`\r\nthen your code MUST call a callback function `msg.llm.toolCallback(string_result)`;",
        "category": "Encausse.net",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "38daa06fe33eeb29"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1250,
                "y": 40,
                "wires": [
                    {
                        "id": "039dbaf06f4a8394",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1260,
                "y": 340,
                "wires": [
                    {
                        "id": "709d8be2580c8069",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1250,
                "y": 280,
                "wires": [
                    {
                        "id": "a71d047aac000e5d",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1250,
                "y": 220,
                "wires": [
                    {
                        "id": "183522ee54d78303",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "env-llm-model",
                "type": "env",
                "value": "env-llm-gpt-model",
                "ui": {
                    "icon": "font-awesome/fa-cogs",
                    "label": {
                        "en-US": "Model*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-llm-key",
                "type": "env",
                "value": "env-llm-gpt-key",
                "ui": {
                    "icon": "font-awesome/fa-user-secret",
                    "label": {
                        "en-US": "Key*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "env-llm-endpoint",
                "type": "env",
                "value": "env-llm-gpt-endpoint",
                "ui": {
                    "icon": "font-awesome/fa-user-secret",
                    "label": {
                        "en-US": "Endpoint*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "env-prompt-system",
                "type": "str",
                "value": "cfg.llm.system",
                "ui": {
                    "icon": "font-awesome/fa-align-justify",
                    "label": {
                        "en-US": "System*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-prompt-user",
                "type": "str",
                "value": "cfg.llm.user",
                "ui": {
                    "icon": "font-awesome/fa-user",
                    "label": {
                        "en-US": "User*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-prompt-image",
                "type": "str",
                "value": "cfg.llm.image",
                "ui": {
                    "icon": "font-awesome/fa-image",
                    "label": {
                        "en-US": "Image*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "bin",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-prompt-audio",
                "type": "str",
                "value": "cfg.llm.audio",
                "ui": {
                    "icon": "font-awesome/fa-file-audio-o",
                    "label": {
                        "en-US": "Audio*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "bin",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-prompt-context",
                "type": "str",
                "value": "cfg.llm.context",
                "ui": {
                    "icon": "font-awesome/fa-commenting-o",
                    "label": {
                        "en-US": "Context*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-prompt-history",
                "type": "str",
                "value": "cfg.llm.history",
                "ui": {
                    "icon": "font-awesome/fa-comments",
                    "label": {
                        "en-US": "History"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-tools",
                "type": "str",
                "value": "cfg.llm.tools",
                "ui": {
                    "icon": "font-awesome/fa-puzzle-piece",
                    "label": {
                        "en-US": "Tools*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-stream",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-forward",
                    "label": {
                        "en-US": "Streaming*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-options-format",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-code",
                    "label": {
                        "en-US": "Format"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "String"
                                },
                                "v": "string"
                            },
                            {
                                "l": {
                                    "en-US": "JSON"
                                },
                                "v": "json"
                            }
                        ]
                    }
                }
            },
            {
                "name": "env-options",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-braille",
                    "label": {
                        "en-US": "Options*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-multimodal",
                "type": "str",
                "value": "true",
                "ui": {
                    "icon": "font-awesome/fa-image",
                    "label": {
                        "en-US": "isMultiModal"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-moonshots-llm",
            "type": "moonshots-llm-client",
            "version": "1.1.0",
            "author": "Jean-Philippe Encausse <jp@encausse.net>",
            "desc": "Wrapper on Azure OpenAI Client",
            "keywords": "Moonshots, NodeRED, LLM, OpenAI",
            "license": "MIT"
        },
        "color": "#9ff6fd",
        "outputLabels": [
            "An error occured",
            "Query External Tools",
            "Streaming Chunks",
            "Ending Response"
        ],
        "icon": "node-red/light.svg",
        "status": {
            "x": 1180,
            "y": 100,
            "wires": [
                {
                    "id": "514cda05c412dab1",
                    "port": 0
                },
                {
                    "id": "987fc7a7375b0809",
                    "port": 0
                },
                {
                    "id": "79a6de46c232b845",
                    "port": 0
                },
                {
                    "id": "039dbaf06f4a8394",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "05c84f2facf6ca69",
        "type": "function",
        "z": "f36dcac84e162f71",
        "name": "Query Engine",
        "func": "let t0 = Date.now()\nlet model = msg.llm.model\n\ntry {\n    let options    =  Object.assign({}, msg.llm.options); \n    options.stream = false\n    options.model  = ''\n    options.messages = msg.llm.chat\n    \n    let result = await model.client.chat(options);\n    msg.llm.result = result;\n\n} catch(err){\n    console.log(err)\n    msg.llm.error = { err };\n    return node.send([msg, undefined], false);\n}\n\n// Handle result assume there is only 1\nlet choices = msg.llm.result.choices\nif (!choices || choices.length < 1){\n    msg.llm.error = { err : 'No LLM choices' }\n    return node.send([msg, undefined],false);\n}\n\nif (choices[0].finish_reason == \"length\") {\n    msg.llm.error = { err : 'Message output exceed LLM capabilities' }\n    return node.send([msg, undefined], false);\n}\n\n// Debug duration of API calls\nmsg.llm.debug.duration = (Date.now() - t0); \nreturn node.send([undefined, msg],false);",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 300,
        "wires": [
            [
                "a17776677d47af2d"
            ],
            [
                "2a6fb2bb3cebd59c"
            ]
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "2a6fb2bb3cebd59c",
        "type": "switch",
        "z": "f36dcac84e162f71",
        "name": "LLM State",
        "property": "llm.result.choices.0.finish_reason",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "stop",
                "vt": "str"
            },
            {
                "t": "null"
            },
            {
                "t": "eq",
                "v": "tool_calls",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "content_filter ",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 770,
        "y": 280,
        "wires": [
            [
                "183522ee54d78303"
            ],
            [
                "a71d047aac000e5d",
                "22ed7c1242b0d4c4"
            ],
            [
                "709d8be2580c8069",
                "987fc7a7375b0809",
                "22ed7c1242b0d4c4"
            ],
            [
                "66c40d0557a2d953",
                "a17776677d47af2d",
                "22ed7c1242b0d4c4"
            ],
            [
                "66c40d0557a2d953",
                "a17776677d47af2d",
                "22ed7c1242b0d4c4"
            ]
        ]
    },
    {
        "id": "66c40d0557a2d953",
        "type": "debug",
        "z": "f36dcac84e162f71",
        "name": "Content Filter",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "llm.result",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 360,
        "wires": []
    },
    {
        "id": "709d8be2580c8069",
        "type": "function",
        "z": "f36dcac84e162f71",
        "name": "LLM : toolCalls",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\n\n// ------------------------------------------\n//  HELPER\n// ------------------------------------------\n\nMOONSHOTS.UTIL = MOONSHOTS.UTIL || {}\nif (!MOONSHOTS.UTIL.extractArgs) {\n    MOONSHOTS.UTIL.extractArgs = (tool) => { // Arguments can be String or Object\n        let args = tool['function'].arguments\n        if (typeof args == 'string') { \n            try { args = JSON.parse(args) } catch (ex) { }\n        }\n        return args\n    }\n    global.set('__MOONSHOTS__', MOONSHOTS)\n}\n\n// ------------------------------------------\n//  CALLBACK\n// ------------------------------------------\n\n// Store the QUERY from LLM\nlet message = msg.llm.result.choices[0].message;\nmsg.llm.toolCalls = []\nmsg.llm.toolCalls.push(message)\n\nconst sendTool = (message, idx) => {\n    // End of Loop\n    if (idx >= message.tool_calls.length){\n        return node.send([undefined, msg], false)\n    }\n\n    // Sometimes LLM provide a message along tool call to explain what it do\n    if (message.content){\n        let response = message.content\n        try { \n            response = JSON.parse(response) } \n        catch (ex) {\n            response = { text: response } // We ask for a JSON object\n        }\n        msg.llm.tool_pre_response = response\n    }\n\n    // Store the current Tool\n    msg.llm.tool = message.tool_calls[idx]\n\n    // Build callback\n    msg.llm.toolCallback = function(content, context_Id){\n        delete msg.llm.tool_pre_response // clean\n        node.warn({info: \"toolCallback\", content, context_Id, llm: msg.llm})\n        msg.llm.toolCalls.push({ \n            \"role\": \"tool\", \n            \"content\": JSON.stringify(content), \n            \"tool_call_id\": msg.llm.tool.id \n        })\n\n        // Handle Context\n        if (context_Id){\n            msg.llm.prompt.context       = msg.llm.prompt.context || {}\n            msg.llm.prompt.context.tools = msg.llm.prompt.context.tools || {} \n            if (context_Id === true) { context_Id = 'tool_' + msg.llm.tool.id + '_' + Date.now() } // Will cumulate tools results\n            msg.llm.prompt.context.tools[context_Id] = content  // Will override tools result\n        }\n\n        return sendTool(message, idx+1)\n    }\n\n    // Debug Tool\n    node.warn({debug: 'Debug Tool', tool: msg.llm.tool})\n\n    // LLM_Tool_INTERNAL_Image\n    if (msg.llm.tool['function'].name == \"LLM_Tool_INTERNAL_Image\"){\n        let tool = msg.llm.tool\n        let args = JSON.parse(tool['function'].arguments);\n        return msg.llm.toolCallback({\"LLM_Tool_INTERNAL_Image\" : args.image});\n    }\n\n    // Forward to current tool\n    return node.send([msg, undefined], false)\n}\n\n// Start the loop on tools\nreturn sendTool(message, 0)",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 300,
        "wires": [
            [],
            [
                "b1486d503bec1fc2"
            ]
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "38daa06fe33eeb29",
        "type": "function",
        "z": "f36dcac84e162f71",
        "name": "Initialize Prompt",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\n\nlet llm_backup = msg.llm;\nif (msg.llm){\n    node.warn('msg.llm initialize will be overrided')\n    delete msg.llm;\n}\n\nmsg.llm         = {}\nmsg.llm.prompt  = {} // store various prompt items\nmsg.llm.debug   = {} // store debug data\nmsg.llm.options = {} // store configuration \nmsg.llm.model   = {} // store model client\n\nif (llm_backup){\n   msg.llm.backup = llm_backup\n}\n\n// System Prompt ----------\nmsg.llm.prompt.system = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-prompt-system\"))\nif (msg.llm.prompt.system == \"env-prompt-system\"){ delete msg.llm.prompt.system }\n\n// Context Prompt ----------\nlet llm_context = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-prompt-context\"))\nif (llm_context && llm_context !== \"env-prompt-context\"){\n    // Always build an object\n    msg.llm.prompt.context = llm_context\n    if (typeof llm_context === 'string'){\n        msg.llm.prompt.context = { \"chat\": llm_context }\n    }\n\n    // There is no values\n    if (Object.keys(msg.llm.prompt.context).length === 0){\n        delete msg.llm.prompt.context\n    } else {\n        let _context = msg.llm.prompt.context\n        msg.llm.prompt.context_chat = []\n        for (let key of Object.keys(_context)){\n            msg.llm.prompt.context_chat.push({ role: \"user\", content: (\"Retrieve context of the \"+key) })\n            msg.llm.prompt.context_chat.push({ role: \"assistant\", content: JSON.stringify(_context[key]) })\n        }\n    }\n}\n\n// History Prompt ----------\nlet llm_history = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-prompt-history\"))\nif (llm_history && typeof llm_history === 'object'){\n    msg.llm.prompt.history = llm_history\n}\n\n// User Prompt ----------\nlet llm_user = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-prompt-user\"))\nif (llm_user && llm_user != \"env-prompt-user\" && typeof llm_user === 'string'){ \n    msg.llm.prompt.user = { role: \"user\", content: llm_user }\n}\n\nreturn node.send(msg,false);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 60,
        "wires": [
            [
                "8c55e0839bcbabf2"
            ]
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "3fae92382b52fb3e",
        "type": "function",
        "z": "f36dcac84e162f71",
        "name": "Build Chat Flow",
        "func": "if (typeof msg.payload !== 'object') { msg.payload = {} } // For status node\n\nlet history = msg.llm.prompt.history = msg.llm.prompt.history || []\nlet chat = msg.llm.chat = []\n\nif (msg.llm.prompt.system) {\n    let system  = \"Current date is: \" + new Date().toLocaleString('fr-FR') + \"\\n\" + msg.llm.prompt.system\n    chat.push({ role: \"system\", content: system })\n}\n\nif (msg.llm.prompt.context_chat) {\n    chat.push.apply(chat, msg.llm.prompt.context_chat);\n    // delete msg.llm.context;\n}\n\n// Push previous history messages if any\nif (msg.llm.prompt.history) {\n    chat.push.apply(chat, msg.llm.prompt.history);\n}\n\n// Append User message if any\nif (msg.llm.prompt.user) {\n    chat.push(msg.llm.prompt.user)\n    history.push(msg.llm.prompt.user)\n    delete msg.llm.prompt.user;\n}\n\n// Append Custom message if any\nif (msg.llm.prompt.custom) {\n    chat.push(msg.llm.prompt.custom);\n    delete msg.llm.prompt.custom;\n}\n\nreturn node.send(msg,false);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 140,
        "wires": [
            [
                "e53048bc94a0acf2"
            ]
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "a17776677d47af2d",
        "type": "function",
        "z": "f36dcac84e162f71",
        "name": "Errors",
        "func": "//node.warn(msg.llm);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 825,
        "y": 40,
        "wires": [
            [
                "039dbaf06f4a8394"
            ]
        ],
        "icon": "font-awesome/fa-bug",
        "l": false
    },
    {
        "id": "3266227f52496b4b",
        "type": "function",
        "z": "f36dcac84e162f71",
        "name": "Build Options",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\n\n// Build Options\nlet options = msg.llm.options = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-options\")) || {}\n\nif (!options.temperature)       options.temperature = 0.7\nif (!options.top_p)             options.temperature = 0.95\nif (!options.frequency_penalty) options.frequency_penalty = 0\nif (!options.presence_penalty)  options.presence_penalty = 0\nif (!options.max_tokens)        options.max_tokens = 4000\n\n// Declare LLM Tools Array ----------\nlet llm_tools = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-tools\"))\nif (llm_tools){\n    options.tools = llm_tools\n}\n\n// Add Image URL Tool Hack ----------\n// Will trigger an internal tool to handle multimodal content by URL directly\nlet isMultiModal = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-multimodal\"))\nif (isMultiModal && isMultiModal == \"true\"){\n    options.tools = options.tools || []\n    options.tools.push({\n        \"type\": \"function\",\n        \"function\": {\n            name: \"LLM_Tool_INTERNAL_Image\",\n            description: \"You are Multimodal and can understand Image URL\",\n            parameters: {\n                type: \"object\",\n                properties: {\n                    image: {\n                        type: \"string\",\n                        description: \"The image url\",\n                    },\n                },\n                required: [\"image\"],\n            },\n        }\n    })\n}\n\n\n// Handle JSON format\n// Require a compatible model AND JSON in the prompt\nlet llm_format = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-options-format\"))\nif (llm_format == \"json\"){\n    options.response_format = { \"type\": \"json_object\" }\n}\n\nreturn node.send(msg, false);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 260,
        "wires": [
            [
                "b1486d503bec1fc2"
            ]
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "b1486d503bec1fc2",
        "type": "function",
        "z": "f36dcac84e162f71",
        "name": "Build Tools CB",
        "func": "\nlet chat = msg.llm.chat\nif (msg.llm.toolCalls) {\n    chat.push.apply(chat, msg.llm.toolCalls);\n\n    // Could be optimized checking $env\n    for (let toolback of msg.llm.toolCalls){\n        if (toolback.role != \"tool\") continue;\n        if (!toolback.content || toolback.content.indexOf('LLM_Tool_INTERNAL_Image') < 0) continue;\n        let llm_img = JSON.parse(toolback.content)[\"LLM_Tool_INTERNAL_Image\"]\n        let llm_content = {\"type\" : \"image_url\", \"image_url\" : { \"url\" : llm_img }}\n        let llm_tool_user = {\"role\" : \"user\", \"content\" : [llm_content]}\n        msg.llm.chat.push(llm_tool_user)\n        msg.llm.prompt.history.push(llm_tool_user)\n    }\n}\nreturn node.send(msg,false);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 300,
        "wires": [
            [
                "7e7e6976876cc720"
            ]
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "183522ee54d78303",
        "type": "function",
        "z": "f36dcac84e162f71",
        "name": "Build Response",
        "func": "let result   = msg.llm.result;\nlet choices  = msg.llm.result.choices\nlet response = choices[0].message.content\n\n// Initialize history juste in case\nmsg.llm.prompt.history = msg.llm.prompt.history || []\n\n// Push + Backup + Exit\nlet options = msg.llm.options\nif (!options.response_format || options.response_format.type != \"json_object\") {\n    msg.llm.prompt.history.push({ role: \"assistant\", content: response })\n    msg.llm.response = response\n    return node.send(msg, false);\n}\n\n// Should never be called with format\nif (response.startsWith('```json')) {\n    response = response.substring(7, response.length - 3).trim()\n}\n\n// Try to parse JSON responses\ntry {\n    response = JSON.parse(response)\n} catch (ex) {\n    msg.llm.error = { err: 'JSON Parsing error', response, ex }\n    response = { text: response } // We ask for a JSON object\n}\n\n// By design we store the text response in text variable\nmsg.llm.prompt.history.push({ role: \"assistant\", content: response.text }) \nmsg.llm.response = response\n\nreturn node.send(msg,false);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 220,
        "wires": [
            [
                "79a6de46c232b845"
            ]
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "e53048bc94a0acf2",
        "type": "subflow:63608c8ffd25253a",
        "z": "f36dcac84e162f71",
        "name": "Build Model",
        "x": 210,
        "y": 180,
        "wires": [
            [
                "a17776677d47af2d"
            ],
            [
                "4cc0cab8656bb839"
            ]
        ]
    },
    {
        "id": "8c55e0839bcbabf2",
        "type": "function",
        "z": "f36dcac84e162f71",
        "name": "Image Prompt",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\n\nlet env_img = env.get(\"env-prompt-image\")\nlet llm_img = MOONSHOTS.UTIL.getMessageProperty(msg, env_img)\nif (!llm_img || llm_img === env_img){ return node.send(msg,false); }\n\n// Build the image object from URL or Buffer\n// https://github.com/Azure/azure-sdk-for-js/issues/29804\nlet llm_content = {\"type\" : \"image_url\", \"image_url\" : { \"url\" : llm_img }}\nif (Buffer.isBuffer(llm_img)){\n    llm_content.image_url.url = \"data:image/jpeg;base64,\"+llm_img.toString('base64')\n}\n\n// Build or convert the user prompt into an array of content\nif (msg.llm.prompt.user){\n    let content = msg.llm.prompt.user.content\n    if (typeof content == 'string'){\n        content = [{\"type\" : \"text\", \"text\" : content}]\n        msg.llm.prompt.user.content = content\n    }\n} else { msg.llm.prompt.user = { role: \"user\", content: [] } }\n\n// Push the image\nmsg.llm.prompt.user.content.push(llm_content)\nreturn node.send(msg,false)\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 100,
        "wires": [
            [
                "4c259065b74f27fd"
            ]
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "a71d047aac000e5d",
        "type": "function",
        "z": "f36dcac84e162f71",
        "name": "Partial Response",
        "func": "let result   = msg.llm.result;\nlet choices  = msg.llm.result.choices\nlet response = choices[0].delta.content\n\nconst pushToHistory = (content, override) => {\n    let history = msg.llm.prompt.history = msg.llm.prompt.history || []\n    if (history.length == 0) { return history.push({ role: \"assistant\", content: content }) }\n    \n    let lastHist = history[history.length - 1] // First time we answer\n    if (lastHist.role !== \"assistant\") { return history.push({ role: \"assistant\", content: content }) }\n\n    // Cumulative answer for streaming unless it's JSON's text\n    lastHist.content = override ? content : (lastHist.content + content) \n}\n\n// Push + Backup + Exit\nlet options = msg.llm.options\nif (!options.response_format || options.response_format.type != \"json_object\") {\n    pushToHistory(response)\n    msg.llm.response = response\n    return node.send(msg, false);\n}\n\n// ------------------------------------------\n//  JSON Part\n// ------------------------------------------\n\n// We are working on full response not just the delta\nresponse = msg.llm.stream.content\n\n// Should never be called with format\nif (response.startsWith('```json')) {\n    response = response.substring(7, response.length - 3).trim()\n}\n\n// Try to parse JSON responses\nlet repaired = \"\"; let parsed   = \"\";\ntry {\n    msg.llm.response = response;\n    if (!response || response.trim() == \"\"){ return; } // Stop here\n    let temp = response.endsWith('}') ? response : response + '\"'\n    repaired = JSONRepair.jsonrepair(temp)\n    parsed   = JSON.parse(repaired)\n    \n    // By design we store the text response in text variable.\n    // We override the last assistant instead of concatenate because it's JSON\n    // It could be a side effect id a tool has been called in between\n    if (parsed.text){\n        pushToHistory(parsed.text, true)\n    }\n    msg.llm.response = parsed\n\n} catch (ex) {\n    \n    msg.llm.error = { err: 'JSON Parsing error', response, repaired, parsed, ex }\n    node.warn(msg.llm.error)\n    response = { text: response } // We ask for a JSON object\n}\n\nreturn node.send(msg,false);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "JSONRepair",
                "module": "jsonrepair"
            }
        ],
        "x": 990,
        "y": 260,
        "wires": [
            []
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "4cc0cab8656bb839",
        "type": "function",
        "z": "f36dcac84e162f71",
        "name": "Build Stream",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\n\n// Handle Streaming format\n// Require a compatible model\nlet llm_stream = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-stream\"))\nif (String(llm_stream).toLowerCase() === 'true'){ // true\n    msg.llm.stream         = msg.llm.stream         || {}\n    msg.llm.stream.chunks  = msg.llm.stream.chunks  || []\n    msg.llm.stream.content = msg.llm.stream.content || \"\"\n}\n\n\nreturn node.send(msg, false);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 220,
        "wires": [
            [
                "3266227f52496b4b"
            ]
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "4768bd1770e7686a",
        "type": "function",
        "z": "f36dcac84e162f71",
        "name": "Stream Engine",
        "func": "let t0 = Date.now()\nlet model = msg.llm.model\n\ntry {\n\n    let options    =  Object.assign({}, msg.llm.options); \n    options.stream = true\n    options.model  = ''\n    options.messages = msg.llm.chat\n    const stream = await model.client.chat(options);\n/*\n    const stream = await model.client.streamChatCompletions(\n        model.id, \n        msg.llm.chat, \n        msg.llm.options\n    );\n*/\n    // Manually process the stream using the async iterator's next() method\n    const iterator = stream[Symbol.asyncIterator]();\n\n    async function processStream() { \n      let result; let toolCalls = []\n      do {\n        result = await iterator.next();\n        if (!result.done) {\n          const chunk = result.value; //node.warn(chunk);\n          msg.llm.result = chunk // send all the chuncks\n\n          // Yes It could happened\n          if (!chunk || chunk.choices?.length == 0) continue;\n\n          // ------------------------------------------\n          //  Handle chunks of content or tools\n          // ------------------------------------------\n\n          // Working on chunk content\n          if (chunk?.choices?.[0]?.delta?.content) {\n            //msg.llm.stream.chunks.push(chunk) // keep track\n            msg.llm.stream.content += chunk?.choices?.[0]?.delta?.content // cumulate content\n          }\n          \n          // Working on chunk tools\n          let chunkToolCalls = chunk?.choices?.[0]?.delta?.tool_calls\n          if (chunkToolCalls){\n            for (let chunkTool of chunkToolCalls) {\n              if (chunkTool.index < toolCalls.length && toolCalls[chunkTool.index]){\n                toolCalls[chunkTool.index].function.arguments += chunkTool.function.arguments\n              } else {\n                toolCalls.push(chunkTool)\n              }\n            }\n            continue; // We can't do anything with it\n          }\n\n          // ------------------------------------------\n          //  Consolidate Chunks\n          // ------------------------------------------\n\n          if (chunk?.choices?.[0]?.finish_reason == \"stop\"){\n            msg.llm.result.choices[0].message = { role: \"assistant\", content: msg.llm.stream.content }\n          }\n          \n          if (chunk?.choices?.[0]?.finish_reason == \"tool_calls\") { // May need to use the index\n            msg.llm.result.choices[0].message = { role: \"assistant\", tool_calls: Object.values(toolCalls) } \n          }\n\n          msg.llm.debug.duration = (Date.now() - t0); \n          node.send([undefined, msg]);\n        }\n      } while (!result.done);\n    }\n    await processStream();\n\n} catch(err){ node.warn(err)\n    msg.llm.error = { err };\n    return node.send([msg, undefined]);\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 260,
        "wires": [
            [
                "a17776677d47af2d"
            ],
            [
                "2a6fb2bb3cebd59c"
            ]
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "7e7e6976876cc720",
        "type": "switch",
        "z": "f36dcac84e162f71",
        "name": "Stream ?",
        "property": "llm.stream",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 380,
        "y": 280,
        "wires": [
            [
                "4768bd1770e7686a",
                "763d76de900101e3"
            ],
            [
                "05c84f2facf6ca69",
                "763d76de900101e3"
            ]
        ]
    },
    {
        "id": "eacaa9e4a6f9cb97",
        "type": "comment",
        "z": "f36dcac84e162f71",
        "name": "Benchmark",
        "info": "3000 tokens would be ~60 seconds",
        "x": 410,
        "y": 60,
        "wires": []
    },
    {
        "id": "4c259065b74f27fd",
        "type": "function",
        "z": "f36dcac84e162f71",
        "name": "Audio Prompt",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\n\nlet env_wav = env.get(\"env-prompt-audio\")\nlet llm_wav = MOONSHOTS.UTIL.getMessageProperty(msg, env_wav)\nif (!llm_wav || llm_wav === env_wav){ return node.send(msg,false); }\n\n// Build the wav object from URL or Buffer\nlet llm_content = {\"type\" : \"audio\", \"audio\" : { \"url\" : llm_wav }}\nif (Buffer.isBuffer(llm_wav)){\n    llm_content.audio.url = \"data:audio/wav;base64,\"+llm_wav.toString('base64')\n}\n\n// Build or convert the user prompt into an array of content\nif (msg.llm.prompt.user){\n    let content = msg.llm.prompt.user.content\n    if (typeof content == 'string'){\n        content = [{\"type\" : \"text\", \"text\" : content}]\n        msg.llm.prompt.user.content = content\n    }\n} else { msg.llm.prompt.user = { role: \"user\", content: [] } }\n\n// Push the audio\nmsg.llm.prompt.user.content.push(llm_content)\nreturn node.send(msg,false)\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 100,
        "wires": [
            [
                "3fae92382b52fb3e"
            ]
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "514cda05c412dab1",
        "type": "subflow:ea894352f6e79051",
        "z": "f36dcac84e162f71",
        "name": "",
        "env": [
            {
                "name": "env-status-color",
                "value": "blue",
                "type": "str"
            },
            {
                "name": "env-status-text",
                "value": "Call Azure OpenAI",
                "type": "str"
            }
        ],
        "x": 1105,
        "y": 100,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "987fc7a7375b0809",
        "type": "subflow:ea894352f6e79051",
        "z": "f36dcac84e162f71",
        "name": "",
        "env": [
            {
                "name": "env-status-color",
                "value": "blue",
                "type": "str"
            },
            {
                "name": "env-status-text",
                "value": "Call LLM Tool",
                "type": "str"
            }
        ],
        "x": 1105,
        "y": 140,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "79a6de46c232b845",
        "type": "subflow:ea894352f6e79051",
        "z": "f36dcac84e162f71",
        "name": "",
        "x": 1105,
        "y": 180,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "039dbaf06f4a8394",
        "type": "subflow:ea894352f6e79051",
        "z": "f36dcac84e162f71",
        "name": "",
        "env": [
            {
                "name": "env-status-color",
                "value": "red",
                "type": "str"
            },
            {
                "name": "env-status-text",
                "value": "llm.error",
                "type": "str"
            }
        ],
        "x": 1105,
        "y": 40,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "763d76de900101e3",
        "type": "function",
        "z": "f36dcac84e162f71",
        "name": "Errors",
        "func": "//node.warn(msg.llm);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 625,
        "y": 100,
        "wires": [
            [
                "514cda05c412dab1"
            ]
        ],
        "icon": "font-awesome/fa-bug",
        "l": false
    },
    {
        "id": "22ed7c1242b0d4c4",
        "type": "debug",
        "z": "f36dcac84e162f71",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 440,
        "wires": []
    },
    {
        "id": "681160babea0f830",
        "type": "subflow",
        "name": "llm:chat",
        "info": "",
        "category": "Encausse.net",
        "in": [
            {
                "x": 80,
                "y": 60,
                "wires": [
                    {
                        "id": "d7ffd619da8fb85c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 650,
                "y": 180,
                "wires": [
                    {
                        "id": "1f3713a6a7a412b5",
                        "port": 0
                    }
                ]
            },
            {
                "x": 660,
                "y": 380,
                "wires": [
                    {
                        "id": "cffc19f1a24fd3d1",
                        "port": "3"
                    }
                ]
            },
            {
                "x": 670,
                "y": 440,
                "wires": [
                    {
                        "id": "1f3713a6a7a412b5",
                        "port": 2
                    }
                ]
            },
            {
                "x": 950,
                "y": 580,
                "wires": [
                    {
                        "id": "8c47e9f422c96517",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "env-llm-model",
                "type": "env",
                "value": "env-llm-gpt-model",
                "ui": {
                    "icon": "font-awesome/fa-cogs",
                    "label": {
                        "en-US": "Model*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-llm-key",
                "type": "env",
                "value": "env-llm-gpt-key",
                "ui": {
                    "icon": "font-awesome/fa-user-secret",
                    "label": {
                        "en-US": "Key*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "env-llm-endpoint",
                "type": "env",
                "value": "env-llm-gpt-endpoint",
                "ui": {
                    "icon": "font-awesome/fa-user-secret",
                    "label": {
                        "en-US": "Endpoint*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-prompt-system",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-align-justify",
                    "label": {
                        "en-US": "System*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-prompt-image",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-image",
                    "label": {
                        "en-US": "Image*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "bin",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-prompt-user",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-user",
                    "label": {
                        "en-US": "User*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-prompt-context",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-commenting-o",
                    "label": {
                        "en-US": "Context*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-stream",
                "type": "str",
                "value": "false",
                "ui": {
                    "icon": "font-awesome/fa-forward",
                    "label": {
                        "en-US": "Streaming*"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Stream"
                                },
                                "v": "true"
                            },
                            {
                                "l": {
                                    "en-US": "Query"
                                },
                                "v": "false"
                            }
                        ]
                    }
                }
            },
            {
                "name": "env-tools",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-puzzle-piece",
                    "label": {
                        "en-US": "Tools*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-llm-tool-bing-key",
                "type": "env",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-user-secret",
                    "label": {
                        "en-US": "Bing Key*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "env-llm-tool-scrap",
                "type": "str",
                "value": "clean",
                "ui": {
                    "icon": "font-awesome/fa-binoculars",
                    "label": {
                        "en-US": "Scraping"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Raw HTML"
                                },
                                "v": "raw"
                            },
                            {
                                "l": {
                                    "en-US": "Clean Body"
                                },
                                "v": "clean"
                            },
                            {
                                "l": {
                                    "en-US": "Main Content"
                                },
                                "v": "main"
                            }
                        ]
                    }
                }
            },
            {
                "name": "env-llm-dalle-model",
                "type": "env",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-image",
                    "label": {
                        "en-US": "Dalle*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-llm-dalle-key",
                "type": "env",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-user-secret",
                    "label": {
                        "en-US": "Dalle Key*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "env-llm-dalle-endpoint",
                "type": "env",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-user-secret",
                    "label": {
                        "en-US": "Dalle URL*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-multimodal",
                "type": "str",
                "value": "true",
                "ui": {
                    "icon": "font-awesome/fa-image",
                    "label": {
                        "en-US": "isMultiModal"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-moonshots-llm",
            "type": "moonshots-llm-chat",
            "version": "1.0.1",
            "author": "Jean-Philippe Encausse <jp@encausse.net>",
            "desc": "Wrapper of llm-client for ws-chat",
            "keywords": "Moonshots, NodeRED, LLM, OpenAI, Web",
            "license": "MIT"
        },
        "color": "#9ff6fd",
        "outputLabels": [
            "An error occured",
            "Query External Tools",
            "Streaming Chunks",
            "Ending Response"
        ],
        "icon": "font-awesome/fa-comments-o"
    },
    {
        "id": "f041a71233a9835a",
        "type": "function",
        "z": "681160babea0f830",
        "name": "Backup History in WebSocket",
        "func": "if (!msg._client_id) { node.warn('Missing _client_id'); return false; }\nlet MOONSHOTS = global.get('__MOONSHOTS__') || {}\nlet SOCKETS = MOONSHOTS['web-socket'] = MOONSHOTS['web-socket'] || {}\n\nlet socket = SOCKETS[msg._client_id]\nif (socket === undefined) { node.warn('No socket available'); return msg; }\n\nsocket.chat = socket.chat || {}\nsocket.chat.history = msg.llm.prompt.history\n\nglobal.set(\"__MOONSHOTS__\", MOONSHOTS);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 500,
        "wires": [
            [
                "7a4f3794a785dc5c"
            ]
        ],
        "icon": "node-red/cog.svg"
    },
    {
        "id": "1f3713a6a7a412b5",
        "type": "subflow:f36dcac84e162f71",
        "z": "681160babea0f830",
        "name": "",
        "env": [
            {
                "name": "env-llm-model",
                "value": "env-llm-model",
                "type": "env"
            },
            {
                "name": "env-llm-key",
                "value": "env-llm-key",
                "type": "env"
            },
            {
                "name": "env-llm-endpoint",
                "value": "env-llm-endpoint",
                "type": "env"
            },
            {
                "name": "env-prompt-system",
                "value": "env-prompt-system",
                "type": "env"
            },
            {
                "name": "env-prompt-image",
                "value": "env-prompt-image",
                "type": "env"
            },
            {
                "name": "env-stream",
                "value": "env-stream",
                "type": "env"
            },
            {
                "name": "env-options-format",
                "value": "json",
                "type": "str"
            },
            {
                "name": "env-multimodal",
                "value": "env-multimodal",
                "type": "env"
            },
            {
                "name": "env-format",
                "value": "json",
                "type": "str"
            },
            {
                "name": "env-system",
                "value": "llm.system",
                "type": "str"
            },
            {
                "name": "env-user",
                "value": "payload.data",
                "type": "str"
            },
            {
                "name": "env-context",
                "value": "llm.context",
                "type": "str"
            },
            {
                "name": "env-history",
                "value": "llm.history",
                "type": "str"
            }
        ],
        "x": 450,
        "y": 300,
        "wires": [
            [],
            [
                "2a97414912f0ab40"
            ],
            [
                "4a397641d07ae882"
            ],
            [
                "f041a71233a9835a"
            ]
        ]
    },
    {
        "id": "a83165b098a1c98c",
        "type": "function",
        "z": "681160babea0f830",
        "name": "LLM Retrieve History",
        "func": "if (!msg._client_id) { node.warn('Missing _client_id'); return msg; }\n\nlet MOONSHOTS = global.get('__MOONSHOTS__') || {}\nlet SOCKETS = MOONSHOTS['web-socket'] = MOONSHOTS['web-socket'] || {}\n\nlet socket = SOCKETS[msg._client_id]\nif (socket === undefined) { node.warn('No socket available'); return msg; }\n\nsocket.chat = socket.chat || {}\n\nmsg.cfg     = msg.cfg     || {}\nmsg.cfg.llm = msg.cfg.llm || {}\nmsg.cfg.llm.history = socket.chat.history\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 100,
        "wires": [
            [
                "3ce99f4d6d905699"
            ]
        ],
        "icon": "node-red/cog.svg"
    },
    {
        "id": "dd4bbcf2b51a9908",
        "type": "subflow:10437a77193b4569",
        "z": "681160babea0f830",
        "name": "Processing",
        "env": [
            {
                "name": "env-replyId",
                "value": "7a97fddb-269a-450f-b4ab-8a2b36eec72c",
                "type": "str"
            },
            {
                "name": "env-from",
                "value": "system",
                "type": "str"
            },
            {
                "name": "env-text",
                "value": "Processing query ...",
                "type": "str"
            }
        ],
        "x": 630,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "f287efb51f36e312",
        "type": "subflow:10437a77193b4569",
        "z": "681160babea0f830",
        "name": "Echo",
        "env": [
            {
                "name": "env-replyId",
                "value": "76322360-1d0d-43a2-9b2e-adc9257f6a72",
                "type": "str"
            },
            {
                "name": "env-from",
                "value": "user",
                "type": "str"
            },
            {
                "name": "env-text",
                "value": "cfg.llm.user",
                "type": "str"
            }
        ],
        "x": 470,
        "y": 60,
        "wires": [
            [
                "dd4bbcf2b51a9908"
            ]
        ]
    },
    {
        "id": "7a4f3794a785dc5c",
        "type": "function",
        "z": "681160babea0f830",
        "name": "Backup Context in WebSocket",
        "func": "\nif (!msg._client_id) { node.warn('Missing _client_id'); return false; }\nlet MOONSHOTS = global.get('__MOONSHOTS__') || {}\nlet SOCKETS = MOONSHOTS['web-socket'] = MOONSHOTS['web-socket'] || {}\n\nlet socket = SOCKETS[msg._client_id]\nif (socket === undefined) { node.warn('No socket available'); return msg; }\n\nsocket.chat = socket.chat || {}\nsocket.chat.context = msg.llm.prompt.context\n\nglobal.set(\"__MOONSHOTS__\", MOONSHOTS);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 540,
        "wires": [
            [
                "8c47e9f422c96517"
            ]
        ],
        "icon": "node-red/cog.svg"
    },
    {
        "id": "3ce99f4d6d905699",
        "type": "function",
        "z": "681160babea0f830",
        "name": "LLM Retrieve Context",
        "func": "if (!msg._client_id) { node.warn('Missing _client_id'); return msg; }\n\nlet MOONSHOTS = global.get('__MOONSHOTS__') || {}\nlet SOCKETS = MOONSHOTS['web-socket'] = MOONSHOTS['web-socket'] || {}\n\nlet socket = SOCKETS[msg._client_id]\nif (socket === undefined) { node.warn('No socket available'); return msg; }\n\nsocket.chat = socket.chat || {}\n\n\nmsg.cfg     = msg.cfg     || {}\nmsg.cfg.llm = msg.cfg.llm || {}\nmsg.cfg.llm.context = socket.chat.context || {}\n\n\n// Merge with caller\nlet llm_context = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-prompt-context\"))\nif (llm_context && (typeof llm_context === 'string') ){\n    msg.cfg.llm.context[\"chat\"] = llm_context\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 140,
        "wires": [
            [
                "d0931bdfd48e406c"
            ]
        ],
        "icon": "node-red/cog.svg"
    },
    {
        "id": "cffc19f1a24fd3d1",
        "type": "switch",
        "z": "681160babea0f830",
        "name": "LLM Tools",
        "property": "llm.tool.function.name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "LLM_Tool_Search",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "LLM_Tool_Scrap",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "LLM_Tool_DALLE",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 650,
        "y": 300,
        "wires": [
            [
                "a5465088a5e715c6"
            ],
            [
                "f0e2db90b42fe1d2"
            ],
            [
                "4d68cf38af5c9c25"
            ],
            []
        ]
    },
    {
        "id": "a5465088a5e715c6",
        "type": "function",
        "z": "681160babea0f830",
        "name": "Bing",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__')\nlet args = MOONSHOTS.UTIL.extractArgs(msg.llm.tool)\n\nif (!args.query){\n    msg.payload = 'Missing Bing Query'\n    msg.llm.toolCallback(msg.payload);\n}\nmsg.url = \"https://api.bing.microsoft.com/v7.0/search?q=\"\nmsg.url += encodeURIComponent(args.query)\n\nlet bing_key = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-llm-tool-bing-key\"))\nmsg.headers = {'Ocp-Apim-Subscription-Key' : bing_key}\n\n\nmsg.payload = 'Searching the web for: ' + args.query\n\nnode.warn({ debug: \"BING\", args });\n\nreturn node.send(msg, false)",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 200,
        "wires": [
            [
                "b7fc7c2cbaca1b8f",
                "75bb73ce2975bad9"
            ]
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "b7fc7c2cbaca1b8f",
        "type": "subflow:10437a77193b4569",
        "z": "681160babea0f830",
        "name": "Searching ...",
        "env": [
            {
                "name": "env-replyId",
                "value": "0c94ad77-f845-444a-a2f1-dabccb769c59",
                "type": "str"
            },
            {
                "name": "env-from",
                "value": "system",
                "type": "str"
            },
            {
                "name": "env-text",
                "value": "payload",
                "type": "str"
            }
        ],
        "x": 1030,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "75bb73ce2975bad9",
        "type": "http request",
        "z": "681160babea0f830",
        "name": "Bing Search",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1030,
        "y": 220,
        "wires": [
            [
                "48e020be845ad9f5"
            ]
        ]
    },
    {
        "id": "48e020be845ad9f5",
        "type": "function",
        "z": "681160babea0f830",
        "name": "Results",
        "func": "let result = msg.payload\n\ndelete result['_type']\ndelete result['videos']\ndelete result['rankingResponse']\n\nmsg.llm.toolCallback(result, true);\n\nlet MOONSHOTS = global.get('__MOONSHOTS__')\nlet args = MOONSHOTS.UTIL.extractArgs(msg.llm.tool)\n\nmsg.payload = 'Consolidating web search for ' + args.query\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 220,
        "wires": [
            [
                "4a11753d1dab985f"
            ]
        ]
    },
    {
        "id": "4a11753d1dab985f",
        "type": "subflow:10437a77193b4569",
        "z": "681160babea0f830",
        "name": "Searching ... End",
        "env": [
            {
                "name": "env-replyId",
                "value": "bcc2cc11-bee4-4b93-9b85-76b93ad2cc23",
                "type": "str"
            },
            {
                "name": "env-from",
                "value": "system",
                "type": "str"
            },
            {
                "name": "env-text",
                "value": "payload",
                "type": "str"
            }
        ],
        "x": 1390,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "269057ea7907cae0",
        "type": "function",
        "z": "681160babea0f830",
        "name": "Tool : Search",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\nlet bing_key = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-llm-tool-bing-key\"))\nif (!bing_key){  return msg; } \n\nconst tool = {\n    name: \"LLM_Tool_Search\",\n    description: \"Perform a query to an online web search engine and return top results. Usefull to get live, accurate data.\",\n    parameters: {\n        type: \"object\",\n        properties: {\n            query: {\n                type: \"string\",\n                description: \"the query to search\",\n            },\n        },\n        required: [\"query\"],\n    },\n};\n\nmsg.cfg.llm.tools = msg.cfg.llm.tools || []\nmsg.cfg.llm.tools.push({ type: \"function\", function: tool })\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 220,
        "wires": [
            [
                "bdb49f1381726de7"
            ]
        ],
        "icon": "font-awesome/fa-arrow-down"
    },
    {
        "id": "bdb49f1381726de7",
        "type": "function",
        "z": "681160babea0f830",
        "name": "Tool : Scrap",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\nlet scrap = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-llm-tool-scrap\"))\nif (!scrap){  return msg; }\n\nconst tool = {\n    name: \"LLM_Tool_Scrap\",\n    description: \"Perform an HTTP GET request to an URL and return the HTML content\",\n    parameters: {\n        type: \"object\",\n        properties: {\n            url: {\n                type: \"string\",\n                description: \"the url to request\",\n            },\n        },\n        required: [\"url\"],\n    },\n};\n\nmsg.cfg.llm.tools = msg.cfg.llm.tools || []\nmsg.cfg.llm.tools.push({ type: \"function\", function: tool })\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 260,
        "wires": [
            [
                "ea1ad5272ed5903c"
            ]
        ],
        "icon": "font-awesome/fa-arrow-down"
    },
    {
        "id": "ea1ad5272ed5903c",
        "type": "function",
        "z": "681160babea0f830",
        "name": "Tool : DALLE",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\nlet dalle_key = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-llm-dalle-key\"))\nif (!dalle_key){  return msg; }\n\n\nconst tool = {\n    name: \"LLM_Tool_DALLE\",\n    description: \"Can generate images according to a given prompt\",\n    parameters: {\n        type: \"object\",\n        properties: {\n            prompt: {\n                type: \"string\",\n                description: \"The prompt to perform\",\n            },\n        },\n        required: [\"prompt\"],\n    },\n};\nmsg.cfg.llm.tools = msg.cfg.llm.tools || []\nmsg.cfg.llm.tools.push({ type: \"function\", function: tool })\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 300,
        "wires": [
            [
                "1f3713a6a7a412b5"
            ]
        ],
        "icon": "font-awesome/fa-arrow-down"
    },
    {
        "id": "f30451398333dda1",
        "type": "subflow:10437a77193b4569",
        "z": "681160babea0f830",
        "name": "Scrapping ...",
        "env": [
            {
                "name": "env-replyId",
                "value": "97b3b29e-02b0-43b1-8bf7-a259e95e93b8",
                "type": "str"
            },
            {
                "name": "env-from",
                "value": "system",
                "type": "str"
            },
            {
                "name": "env-text",
                "value": "payload",
                "type": "str"
            }
        ],
        "x": 1030,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "f0e2db90b42fe1d2",
        "type": "function",
        "z": "681160babea0f830",
        "name": "Scrap",
        "func": "msg.scrap = {}\nmsg.scrap.headers = {'User-Agent' : 'Node-RED'}\n\nlet MOONSHOTS = global.get('__MOONSHOTS__')\nlet args = MOONSHOTS.UTIL.extractArgs(msg.llm.tool)\n\nmsg.scrap.url = args.url\nmsg.payload = 'Scraping URL: ' + args.url\n\nreturn node.send(msg, false)",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 280,
        "wires": [
            [
                "f30451398333dda1",
                "f3c332a201d6ba0c"
            ]
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "332d2061f6cdcf8f",
        "type": "subflow:10437a77193b4569",
        "z": "681160babea0f830",
        "name": "Generating...",
        "env": [
            {
                "name": "env-replyId",
                "value": "3c29abdc-c628-49ad-a21b-2cded6ec110c",
                "type": "str"
            },
            {
                "name": "env-from",
                "value": "system",
                "type": "str"
            },
            {
                "name": "env-text",
                "value": "payload",
                "type": "str"
            }
        ],
        "x": 1030,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "1931ed870fd12047",
        "type": "subflow:9c3ff53b15fd137d",
        "z": "681160babea0f830",
        "name": "",
        "env": [
            {
                "name": "env-llm-model",
                "value": "env-llm-dalle-model",
                "type": "env"
            },
            {
                "name": "env-llm-key",
                "value": "env-llm-dalle-key",
                "type": "env"
            },
            {
                "name": "env-llm-endpoint",
                "value": "env-llm-dalle-endpoint",
                "type": "env"
            },
            {
                "name": "env-data",
                "value": "prompt",
                "type": "str"
            }
        ],
        "x": 1020,
        "y": 380,
        "wires": [
            [
                "c5e423c0e7f55e99"
            ],
            [
                "4a27c108be58b653"
            ]
        ]
    },
    {
        "id": "4a27c108be58b653",
        "type": "function",
        "z": "681160babea0f830",
        "name": "Results",
        "func": "let result = msg.llm.result\nlet img    = result.data[0]\n\ndelete img.content_filter_results\ndelete img.prompt_filter_results\n\nmsg.llm.toolCallback(img);\nmsg.payload = 'Revised prompt: ' + img.revised_prompt\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 400,
        "wires": [
            [
                "f84ed5092446c65c"
            ]
        ]
    },
    {
        "id": "f84ed5092446c65c",
        "type": "subflow:10437a77193b4569",
        "z": "681160babea0f830",
        "name": "Generating ... End",
        "env": [
            {
                "name": "env-replyId",
                "value": "0d8614dd-4fc3-4720-8078-e3bf86df034e",
                "type": "str"
            },
            {
                "name": "env-from",
                "value": "system",
                "type": "str"
            },
            {
                "name": "env-text",
                "value": "payload",
                "type": "str"
            }
        ],
        "x": 1390,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "4d68cf38af5c9c25",
        "type": "function",
        "z": "681160babea0f830",
        "name": "Dalle",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__')\nlet args = MOONSHOTS.UTIL.extractArgs(msg.llm.tool)\n\nmsg.payload = \"Generating Image: \" + args.prompt\nmsg.prompt  = args.prompt\n\nreturn node.send(msg, false)",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 360,
        "wires": [
            [
                "332d2061f6cdcf8f",
                "1931ed870fd12047"
            ]
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "c5e423c0e7f55e99",
        "type": "debug",
        "z": "681160babea0f830",
        "name": "Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 360,
        "wires": []
    },
    {
        "id": "d0931bdfd48e406c",
        "type": "function",
        "z": "681160babea0f830",
        "name": "Tool : Setup",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\n\n// Initialize the tools from parent\nlet llm_tools = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-tools\"))\nmsg.cfg.llm.tools = Array.isArray(llm_tools) ? llm_tools : []\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 180,
        "wires": [
            [
                "269057ea7907cae0"
            ]
        ],
        "icon": "font-awesome/fa-arrow-down"
    },
    {
        "id": "d7ffd619da8fb85c",
        "type": "function",
        "z": "681160babea0f830",
        "name": "LLM Retrieve User Message",
        "func": "if (!msg._client_id) { node.warn('Missing _client_id'); return msg; }\n\nlet MOONSHOTS = global.get('__MOONSHOTS__') || {}\nlet SOCKETS = MOONSHOTS['web-socket'] = MOONSHOTS['web-socket'] || {}\n\nlet socket = SOCKETS[msg._client_id]\nif (socket === undefined) { node.warn('No socket available'); return msg; }\n\nsocket.chat = socket.chat || {}\n\nmsg.cfg     = msg.cfg     || {}\nmsg.cfg.llm = msg.cfg.llm || {}\n\n// Merge with caller\nlet llm_user = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-prompt-user\"))\nif (llm_user && (typeof llm_user === 'string') ){\n    msg.cfg.llm.user = llm_user\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 60,
        "wires": [
            [
                "f287efb51f36e312",
                "a83165b098a1c98c"
            ]
        ],
        "icon": "node-red/cog.svg"
    },
    {
        "id": "f3c332a201d6ba0c",
        "type": "subflow:5a761f7b96ed136a",
        "z": "681160babea0f830",
        "name": "",
        "env": [
            {
                "name": "env-url",
                "value": "scrap.url",
                "type": "str"
            },
            {
                "name": "env-headers",
                "value": "scrap.headers",
                "type": "str"
            },
            {
                "name": "env-scrap",
                "value": "env-llm-tool-scrap",
                "type": "env"
            }
        ],
        "x": 1020,
        "y": 300,
        "wires": [
            [
                "980f143476be8534"
            ],
            [
                "413bcdd7b45cc3ef"
            ]
        ]
    },
    {
        "id": "d8b90e6ebbe27094",
        "type": "subflow:10437a77193b4569",
        "z": "681160babea0f830",
        "name": "Scrapping ... End",
        "env": [
            {
                "name": "env-replyId",
                "value": "64b1b7e8-777f-41d1-9770-b8e2e7b84611",
                "type": "str"
            },
            {
                "name": "env-from",
                "value": "system",
                "type": "str"
            },
            {
                "name": "env-text",
                "value": "payload",
                "type": "str"
            }
        ],
        "x": 1390,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "413bcdd7b45cc3ef",
        "type": "function",
        "z": "681160babea0f830",
        "name": "Results",
        "func": "msg.payload = 'Cleaning HTML for: ' + msg.scrap.url\nmsg.llm.toolCallback({\"url\": msg.scrap.url, \"content\": msg.scrap.result }, 'LLM_Tool_Scrap');\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "cheerio",
                "module": "cheerio"
            }
        ],
        "x": 1200,
        "y": 320,
        "wires": [
            [
                "d8b90e6ebbe27094"
            ]
        ]
    },
    {
        "id": "980f143476be8534",
        "type": "debug",
        "z": "681160babea0f830",
        "name": "Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 280,
        "wires": []
    },
    {
        "id": "4a397641d07ae882",
        "type": "subflow:5f78bcc1fab07bcc",
        "z": "681160babea0f830",
        "name": "Check StandBy",
        "env": [
            {
                "name": "env-stand-by-id",
                "value": "fe7c90c3-ec56-4512-be53-50840569f851",
                "type": "str"
            },
            {
                "name": "evt-stand-by-type",
                "value": null,
                "type": "str"
            },
            {
                "name": "evt-stand-by-action",
                "value": "check",
                "type": "str"
            }
        ],
        "x": 880,
        "y": 440,
        "wires": [
            [],
            [
                "70462e9422f61ea4"
            ]
        ]
    },
    {
        "id": "70462e9422f61ea4",
        "type": "subflow:10437a77193b4569",
        "z": "681160babea0f830",
        "name": "Sending chunks",
        "env": [
            {
                "name": "env-replyId",
                "value": "fe7c90c3-ec56-4512-be53-50840569f851",
                "type": "str"
            },
            {
                "name": "env-from",
                "value": "system",
                "type": "str"
            },
            {
                "name": "env-text",
                "value": "llm.stream.content",
                "type": "str"
            }
        ],
        "x": 1080,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "2a97414912f0ab40",
        "type": "switch",
        "z": "681160babea0f830",
        "name": "Pre Answer",
        "property": "llm.tool_pre_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 240,
        "wires": [
            [
                "e949dcc3ea4183ce",
                "cffc19f1a24fd3d1"
            ],
            [
                "cffc19f1a24fd3d1"
            ]
        ]
    },
    {
        "id": "e949dcc3ea4183ce",
        "type": "subflow:10437a77193b4569",
        "z": "681160babea0f830",
        "name": "Pre Answer",
        "env": [
            {
                "name": "env-replyId",
                "value": "4aa61aaa-7116-44eb-b60f-dada7e04f60d",
                "type": "str"
            },
            {
                "name": "env-from",
                "value": "system",
                "type": "str"
            },
            {
                "name": "env-text",
                "value": "llm.tool_pre_response.text",
                "type": "str"
            },
            {
                "name": "env-speech",
                "value": "llm.tool_pre_response.speech",
                "type": "str"
            }
        ],
        "x": 850,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "8c47e9f422c96517",
        "type": "function",
        "z": "681160babea0f830",
        "name": "Build a Log to Store",
        "func": "// A _client_id is MANDATORY\nif (msg._client_id === undefined){ node.warn('Missing _client_id'); return msg; } \n\nlet MOONSHOTS = global.get('__MOONSHOTS__') || {}\nlet SOCKETS = MOONSHOTS['web-socket'] = MOONSHOTS['web-socket'] || {}\nlet socket = SOCKETS[msg._client_id]\n\n// A session is MANDATORY\nif (!socket){ node.warn('Missing Session Data'); return msg; } \n\n\n\nlet log = msg.llm.log = {}\n\n// Always a timestamp\nlog.timestamp = new Date().toISOString();\n\n// The current session ID\nlog.sessionId = socket.sessionId\n\n// The Authenticated User \nlog.userId = msg.user?.login;\n\n// The Conversation Device or Browser Tab\nlog.clientId = msg._client_id;\n\n// The Chat Application (nagarro, demo, ...)\nlog.chatId = msg._client_hint;\n\n\nlog.chat = {}\n\n// API call in ms + errors\nlog.chat.debug = msg.llm?.debug\n\n// The latest Input message (what append with multibot ?)\nlog.chat.message = msg.llm?.chat?.slice().reverse().find(message => message.role === \"user\");\n\n// The Output text, speech, data, ...\nlog.chat.response = msg.llm?.response\n\n// The input/output filter to check the tone\nlog.chat.filter = {}\nlog.chat.filter.content_filter = msg.llm?.result?.choices?.[0]?.content_filter_results\nlog.chat.filter.prompt_filter  = msg.llm?.result?.prompt_filter_results\n\n// Some usage data\nlog.chat.usage = msg.llm?.result?.usage\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "a1cfb6c2775de544",
        "type": "subflow",
        "name": "ws:manager",
        "info": "",
        "category": "Encausse.net",
        "in": [
            {
                "x": 120,
                "y": 200,
                "wires": [
                    {
                        "id": "0b4e18a3d6b2a9ea"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 750,
                "y": 40,
                "wires": [
                    {
                        "id": "073e7a7211c8b038",
                        "port": 0
                    }
                ]
            },
            {
                "x": 760,
                "y": 100,
                "wires": [
                    {
                        "id": "073e7a7211c8b038",
                        "port": 1
                    }
                ]
            },
            {
                "x": 750,
                "y": 160,
                "wires": [
                    {
                        "id": "e14dda6efbd85b2b",
                        "port": 0
                    }
                ]
            },
            {
                "x": 760,
                "y": 220,
                "wires": [
                    {
                        "id": "995681db5b1b8929",
                        "port": 2
                    }
                ]
            },
            {
                "x": 760,
                "y": 280,
                "wires": [
                    {
                        "id": "995681db5b1b8929",
                        "port": 3
                    }
                ]
            },
            {
                "x": 750,
                "y": 340,
                "wires": [
                    {
                        "id": "995681db5b1b8929",
                        "port": 4
                    }
                ]
            },
            {
                "x": 760,
                "y": 400,
                "wires": [
                    {
                        "id": "995681db5b1b8929",
                        "port": 5
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "module": "node-red-contrib-moonshots-web",
            "type": "moonshots-ws-manager",
            "version": "1.0.0",
            "author": "Jean-Philippe Encausse <jp@encausse.net>",
            "desc": "Handle websocket protocol",
            "keywords": "Moonshots, NodeRED, Web, Websocket",
            "license": "MIT"
        },
        "color": "#9ff6fd",
        "inputLabels": [
            "websocket"
        ],
        "outputLabels": [
            "error",
            "ws:ready",
            "ws:ack",
            "ws:ping",
            "ws:chat",
            "esp32:",
            "otherwise"
        ],
        "icon": "node-red/bridge-dash.svg"
    },
    {
        "id": "0b4e18a3d6b2a9ea",
        "type": "function",
        "z": "a1cfb6c2775de544",
        "name": "_client_id",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\nlet SOCKETS = MOONSHOTS['web-socket'] = MOONSHOTS['web-socket'] || {}\n\n// Parse the Payload\nmsg.payload = JSON.parse(msg.payload)\n\n// Store _client_id provided by client outside of payload\nif (msg.payload && msg.payload._client_id){\n    msg._client_id = msg.payload._client_id\n}\n\n// Retrieve _client_hint that is a feature of websocket\nif (msg.payload && msg.payload._client_hint){\n    msg._client_hint = msg.payload._client_hint\n}\n\n// Retrieve _client_cookie that is a feature of websocket\nif (msg.payload && msg.payload._client_cookie){\n    msg._client_cookie = msg.payload._client_cookie\n}\n\nglobal.set('__MOONSHOTS__', MOONSHOTS)\nreturn node.send(msg, false);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 200,
        "wires": [
            [
                "995681db5b1b8929"
            ]
        ]
    },
    {
        "id": "995681db5b1b8929",
        "type": "switch",
        "z": "a1cfb6c2775de544",
        "name": "Event",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": ":ready",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": ":ack",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ws:ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ws:chat",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "esp32:",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 6,
        "x": 390,
        "y": 200,
        "wires": [
            [
                "073e7a7211c8b038"
            ],
            [
                "e14dda6efbd85b2b"
            ],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "073e7a7211c8b038",
        "type": "function",
        "z": "a1cfb6c2775de544",
        "name": "@:ready",
        "func": "if (msg._client_id === undefined) return [msg, undefined];\n\nlet MOONSHOTS = global.get('__MOONSHOTS__') || {}\nlet SOCKETS = MOONSHOTS['web-socket'] = MOONSHOTS['web-socket'] || {}\n\n// Backup Socket Id for the given client\nlet socket = SOCKETS[msg._client_id]\nif (!socket || msg.payload.data.refresh) {\n    socket = SOCKETS[msg._client_id] = {}\n    socket.sessionId = uuid.v4();\n    //node.warn('New chat session ' + socket.sessionId + ' - ' + msg.payload.data.refresh)\n}\n\n// Store the Socket Id\nsocket.socketID  = msg._session.id\nsocket.STANDBY = {}\n\nglobal.set('__MOONSHOTS__', MOONSHOTS)\nreturn [undefined, msg];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "uuid",
                "module": "uuid"
            }
        ],
        "x": 560,
        "y": 120,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "e14dda6efbd85b2b",
        "type": "function",
        "z": "a1cfb6c2775de544",
        "name": "@:ack",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\nlet SOCKETS = MOONSHOTS['web-socket'] = MOONSHOTS['web-socket'] || {}\n\nlet socket = SOCKETS[msg._client_id]\nif (socket === undefined){ return false; }\n\nlet replyId = msg.payload.replyId\nif (replyId === undefined){ return false; }\n\nlet standby = socket.STANDBY[replyId]\nif (standby === undefined){ return false; }\n\nlet _data = msg.payload.data;\ntry { _data = JSON.parse(_data) } catch(ex){ /* try a JSON Parse */ }\nstandby.callback(_data);\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "ed6749f4e72bfce1",
        "type": "subflow",
        "name": "web:template",
        "info": "",
        "category": "Encausse.net",
        "in": [
            {
                "x": 40,
                "y": 260,
                "wires": [
                    {
                        "id": "f42186fdab8cb592"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1020,
                "y": 540,
                "wires": [
                    {
                        "id": "cf9bf6f91a23564c",
                        "port": 0
                    },
                    {
                        "id": "1c9b744205bc4f1c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "env-static",
                "type": "str",
                "value": "node-red-static/",
                "ui": {
                    "icon": "font-awesome/fa-folder-o",
                    "label": {
                        "en-US": "Static Folder"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-overwrite",
                "type": "bool",
                "value": "false",
                "ui": {
                    "icon": "font-awesome/fa-warning",
                    "label": {
                        "en-US": "Overwrite"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-login",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-lock",
                    "label": {
                        "en-US": "Login*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-db-users",
                "type": "env",
                "value": "env-db-users",
                "ui": {
                    "icon": "font-awesome/fa-address-book-o",
                    "label": {
                        "en-US": "Users DB"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-title",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-code",
                    "label": {
                        "en-US": "Title*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-body",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-code",
                    "label": {
                        "en-US": "Body"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-css",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-file-code-o",
                    "label": {
                        "en-US": "CSS*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-js",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-file-code-o",
                    "label": {
                        "en-US": "JS*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-ws-url",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-link",
                    "label": {
                        "en-US": "WS URL"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-ws-hint",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-american-sign-language-interpreting",
                    "label": {
                        "en-US": "WS Hint"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-tts-url",
                "type": "env",
                "value": "env-tts-url",
                "ui": {
                    "icon": "font-awesome/fa-link",
                    "label": {
                        "en-US": "TTS URL"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-moonshots-web",
            "type": "moonshots-web-template",
            "version": "1.0.0",
            "author": "Jean-Philippe Encausse <jp@encausse.net>",
            "desc": "Web Template Helper",
            "keywords": "Moonshots, NodeRED, Web",
            "license": "MIT"
        },
        "color": "#9ff6fd",
        "icon": "font-awesome/fa-file-code-o"
    },
    {
        "id": "89b8a57e568ac302",
        "type": "template",
        "z": "ed6749f4e72bfce1",
        "name": "app.css",
        "field": "payload",
        "fieldType": "msg",
        "format": "css",
        "syntax": "mustache",
        "template": "BODY {\n   \n}\n",
        "output": "str",
        "x": 720,
        "y": 40,
        "wires": [
            [
                "05aa51dc607e11c0"
            ]
        ]
    },
    {
        "id": "2b64e1ef38cb0a9d",
        "type": "template",
        "z": "ed6749f4e72bfce1",
        "name": "app.js",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "!function ($) {\n  $.CLIENT = $.CLIENT || {};\n  $.CLIENT.CONFIG =  $.CLIENT.CONFIG || {}\n  \n  $.CLIENT.CONFIG.tts = {\n    url : '{{{env.env-tts-url}}}',\n  },\n\n  $.CLIENT.CONFIG.animate = {\n      bounce: 800,\n      fade:   800,\n  }\n\n\n  // ------------------------------------------\n  //  EVENT\n  // ------------------------------------------\n\n  const fireEvent = $.CLIENT.fireEvent = (name, data) => {\n    let event = $.Event(name);\n    event.custom = { name, data };\n    $(document).trigger(event);\n  }\n\n  const listenEvent = $.CLIENT.listenEvent = (name, callback) => {\n    $(document).on(name, (event) => { callback(event.custom.data) })\n  }\n\n  // ------------------------------------------\n  //  STATUS\n  // ------------------------------------------\n\n  const status = $.CLIENT.status = (type, msg) => {\n    console.log('Status', type, msg);\n  }\n\n  // ------------------------------------------\n  //  UTIL\n  // ------------------------------------------\n\n  const getQueryVariable = (variable) => {\n    var query = window.location.search.substring(1);\n    var vars = query.split('&');\n    for (var i = 0; i < vars.length; i++) {\n      var pair = vars[i].split('=');\n      if (decodeURIComponent(pair[0]) == variable) {\n        return decodeURIComponent(pair[1]);\n      }\n    }\n    console.log('Query variable %s not found', variable);\n  }\n\n\n  const getCookie = (name) => {\n    let cookies = document.cookie.split(';');\n    for(var i=0 ; i < cookies.length ; ++i) {\n        var pair = cookies[i].trim().split('=');\n        if(pair[0] == name){\n            return pair[1] ? decodeURIComponent(pair[1]) : null;\n        }\n    }\n    return null;\n  };\n\n  // ------------------------------------------\n  //  PUBLIC\n  // ------------------------------------------\n\n  $.CLIENT.CONFIG.clientID = getQueryVariable('clientID')\n  if (!$.CLIENT.CONFIG.clientID){\n    var url = new URL(window.location.href);\n    url.searchParams.set('clientID', 'client_' + Date.now());\n    window.location.href = url.href;\n  }\n  console.log('New ClientID:', $.CLIENT.CONFIG.clientID)\n\n  $.CLIENT.CONFIG.clientCookie = getCookie('session')\n  const register = () => {\n    \n  }\n\n  // Initialization on DOM ready\n  $(() => { register(); });\n\n}(jQuery);\n",
        "output": "str",
        "x": 710,
        "y": 80,
        "wires": [
            [
                "05aa51dc607e11c0"
            ]
        ]
    },
    {
        "id": "8955448258d00308",
        "type": "template",
        "z": "ed6749f4e72bfce1",
        "name": "tts.js",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "!function ($) {\n\n    $.CLIENT = $.CLIENT || {};\n\n    // ------------------------------------------\n    //  PUBLIC\n    // ------------------------------------------\n\n    const textToSpeech = $.CLIENT.textToSpeech = (text, callback) => {\n\n        // No audio context\n        if (audioCtxt === undefined) { return callback(); }\n\n        // No text to speech (or hack)\n        if (text === undefined || text.length <=1 || !$.CLIENT.CONFIG.tts.url ) { return callback(); }\n\n        // Call a text to speech services\n        $.CLIENT.status($.CLIENT.STATUS.NETWORK, 'Text to speech ...');\n        $.CLIENT.ajax($.CLIENT.CONFIG.tts.url, { 'text': text, '_client_id' : $.CLIENT.CONFIG.clientID, 'buffer': false }, (err, result) => {\n            stopAudio();\n\n            if (err || !result){ \n                if (callback) callback(); \n                return; \n            }\n\n            // Parse results (we ask for a JSON with buffer=false)\n            let json = JSON.parse(result)\n            if (!json.buffer){\n                console.log('Error reading buffer', text)\n                if (callback) callback(); \n                return; \n            }\n\n            // Convert back Binary Buffer (?? work on buffer.data field)\n            const binary = new ArrayBuffer(json.buffer.data.length)\n            const view   = new Uint8Array(binary);\n            for (let i = 0; i < json.buffer.data.length; ++i) {\n                view[i] = json.buffer.data[i];\n            }\n            \n             // Play audio\n             playAudio(binary, callback);\n             playSSML(json.ssml.viseme, 'tts:viseme')\n             playSSML(json.ssml.bookmarks, 'tts:bookmarks')\n        })\n    }\n\n    const stopAudio = $.CLIENT.stopSpeech = (text, callback) => {\n        if (!bufferSource) return false;\n        bufferSource.stop();\n        bufferSource = undefined;\n        return true;\n    }\n\n\n    let bufferSource = undefined;\n    const playAudio = $.CLIENT.playAudio = (data, callback) => {\n        if (audioCtxt === undefined) return callback(); // require a page gesture\n        if (data === undefined) return callback(); // require an audio\n        $.CLIENT.status($.CLIENT.STATUS.SPEAKER, 'Playing audio ...', undefined, 0); // Manual\n        $.CLIENT.fireEvent('tts:audio:start', {})\n        try {\n            audioCtxt.decodeAudioData(data, function(buffer) {\n                let source  = bufferSource = audioCtxt.createBufferSource();\n                source.buffer = buffer;\n                source.addEventListener('ended', () => { \n                    $.CLIENT.clearStatus(); \n                    $.CLIENT.fireEvent('tts:audio:end', {})\n                    if (callback) callback(); \n                });\n                source.connect(audioCtxt.destination);\n                source.start(0);\n            }, (e) => { \n                bufferSource = undefined; \n                $.CLIENT.clearStatus(); if (callback) callback(); \n            });\n        } catch (ex){\n            console.error(ex);\n        }\n    }\n\n    const playSSML = $.CLIENT.playSSML = (ssml, event, callback) => {\n        if (!ssml){ if (callback) callback(); return;}\n\n        let timer = Date.now()\n        let index = 0\n\n        let handleTimer = () => {\n\n            if (index >= ssml.length){  \n                $.CLIENT.fireEvent(event, { index, ssml }) // notify end\n                if (callback){ callback(); } \n                return; \n            }\n\n            // Send event\n            $.CLIENT.fireEvent(event, {\n                index, elm : ssml[index], ssml\n            })\n\n            // Wait for next\n            let offset    = Math.round(ssml[index].privAudioOffset  / 10000)\n            let elapse    = Date.now() - timer\n            let duration  = offset - elapse\n\n            index += 1\n            if (duration < 0){  return handleTimer(); }\n            setTimeout(handleTimer, duration)\n        }\n\n        handleTimer();\n    }\n\n\n    // ------------------------------------------\n    //  PRIVATE\n    // ------------------------------------------\n\n    let audioCtxt;\n    const initAudioContext = () => { \n        if (audioCtxt !== undefined) { return audioCtxt; }\n        try {\n            // Fix up for prefixing\n            window.AudioContext = window.AudioContext || window.webkitAudioContext;\n            audioCtxt = new AudioContext();\n\n            if (audioCtxt.state === 'suspended') {\n                if (document.autoplayPolicy === 'allowed') {\n                  console.log(\"State is suspended only because hardware is slow.\");\n                }\n                if (document.autoplayPolicy === 'disallowed' ||\n                    document.autoplayPolicy === 'allowed-muted') {\n                    console.log(\"State is suspended because of the autoplay policy.\");\n                    audioCtxt.resume();\n                }\n            }\n\n        } catch (err) {\n            console.log(\"Error: \", err);\n            audioCtxt = undefined;\n        }\n\n        console.log(\"Init Audio Context\");\n        return audioCtxt;\n    }\n\n    // ------------------------------------------\n    //  REGISTER\n    // ------------------------------------------\n\n    const register = () => {\n        $(document).on('click', initAudioContext)\n        $.CLIENT.listenEvent('ws:audio', (msg) => {\n            let data = msg.message.event.value\n            playAudio(data, () => {\n                $.CLIENT.sendAck(msg.replyId) \n            });\n        });\n    }\n\n    // Initialization on DOM ready\n    $(() => { register(); });\n\n}(jQuery);",
        "output": "str",
        "x": 710,
        "y": 200,
        "wires": [
            [
                "05aa51dc607e11c0"
            ]
        ]
    },
    {
        "id": "2e50320d50891fb0",
        "type": "template",
        "z": "ed6749f4e72bfce1",
        "name": "status.js",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "!function ($) {\n\n    $.CLIENT = $.CLIENT || {};\n    $.CLIENT.STATUS = {\n        NONE       : '',\n        ERROR      : 'app-status-error',\n        OK         : 'app-status-ok',\n        WAITING    : 'app-status-waiting',\n        NETWORK    : 'app-status-network',\n        MICROPHONE : 'app-status-microphone',\n        SPEAKER    : 'app-status-speaker',\n        CAMERA     : 'app-status-camera',\n        WATCHING   : 'app-status-watching',\n        HELLO      : 'app-status-hello',\n        BYE        : 'app-status-bye',\n    }\n\n    // ------------------------------------------\n    //  STATUS\n    // ------------------------------------------\n\n    let _status = undefined;\n    let statusHandle;\n    const status = $.CLIENT.status = (status, msg, params, timeout) => {\n\n        // Print console.log() \n        console.log('Status:', msg, params || '');\n\n        // Reset clean timer\n        clearTimeout(statusHandle);\n        \n        // Backup last status\n        let _backup = status + '_' + msg\n        if (_backup !== _status) { // Avoid refresh animation\n            _status = _backup\n\n            // Print HTML\n            let html  = '<div class=\"app-status-wrapper '+ status +'\">';\n                html += '  <div class=\"app-status-icon\"></div>'\n                html += '  <div class=\"app-status-text\">' + msg + '</div>'\n                html += '</div>'\n\n            $('#app-status').html(html);\n        }\n\n        // Manual timeout\n        if (timeout === 0){ return; }\n\n        // Clean status after a timeout\n        statusHandle = setTimeout(clearStatus, timeout || 2000);\n    }\n\n    const clearStatus = $.CLIENT.clearStatus = () => {\n        $('#app-status').html('');\n        _status = undefined;\n    }\n\n    // ------------------------------------------\n    //  PUBLIC\n    // ------------------------------------------\n\n    const handleStatus = (msg) => {\n        let text       = msg.message.event.value.text\n        let params     = msg.message.event.value.params\n        let status     = msg.message.event.value.status\n        let status_css = $.CLIENT.STATUS[status] || status\n        $.CLIENT.status(status_css, text, params)\n        $.CLIENT.sendAck(msg.replyId);\n    }\n\n    const register = () => {\n        $.CLIENT.listenEvent('app:status', handleStatus);\n    }\n\n    // Initialization on DOM ready\n    $(() => { register(); });\n\n}(jQuery);",
        "output": "str",
        "x": 720,
        "y": 120,
        "wires": [
            [
                "05aa51dc607e11c0"
            ]
        ]
    },
    {
        "id": "a5d53fb0415bfa8a",
        "type": "template",
        "z": "ed6749f4e72bfce1",
        "name": "ajax.js",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "!function ($) {\n\n    $.CLIENT = $.CLIENT || {};\n\n    // ------------------------------------------\n    //  AJAX\n    // ------------------------------------------\n\n    const ajax = $.CLIENT.ajax = (url, params, callback, method, raw) => {\n        \n        let options = {\n            url: url, \n            data: params,\n            type: method || 'GET', \n            traditional: true\n        }\n\n        // Send blob as raw binary (without processing)\n        if (raw){\n            options.processData = false\n            options.contentType = false\n        }\n\n        // Build Request\n        let request = $.ajax(options);\n        \n        // Handle Response\n        request.done((data) => {\n            if (callback) callback(undefined, data);\n        });\n        \n        // Handle Error\n        request.fail(( jqXHR, textStatus, errorThrown ) => {\n            console.error(textStatus, errorThrown);\n        });\n    }\n\n    const ajaxBlob = $.CLIENT.ajaxBlob = (url, blob, callback) => {\n        let data = new FormData();\n        data.append(\"blobData\", blob);\n        $.CLIENT.ajax(url, data, callback, 'POST', true)\n    }\n\n    const ajaxBuffer = $.CLIENT.ajaxBuffer = (url, params, callback, method) => {\n\n        method = method || 'GET';\n        if (method === 'GET'){ \n            url += '?' + $.param(params);\n        }\n\n        let request = new XMLHttpRequest();\n            request.open(method, url, true);\n            request.responseType  = \"arraybuffer\";\n            request.onload  = (e) => { callback(undefined, request.response) };\n            request.onerror = ( ) => { console.error(\"An error occurred during the XMLHttpRequest\", url) };\n            request.send(method !== 'GET' ? JSON.stringify(params || {}) : undefined)\n    }\n\n    // ------------------------------------------\n    //  REFRESH\n    // ------------------------------------------\n\n    const _target = (target, callback) => {\n        if (!target){ return; }\n\n        let $target = $(target);\n        if ($target.length <= 0){\n            location.reload();\n            if (callback) callback();\n            return;\n        }\n\n        $target.removeClass('fadeIn').addClass('fadeOut');\n        return $target;\n    }\n\n    const updateHTML = $.CLIENT.updateHTML = (html, target, callback) => {\n        let $target = _target(target, callback)\n        if ($target === undefined) { return; }\n\n        setTimeout(() => {\n            $target.html(html)\n            $target.removeClass('fadeOut').addClass('fadeIn');\n            if (callback) callback();\n        }, 500)\n    }\n\n    const refresh = $.CLIENT.refresh = (url, params, target, callback, method) => {\n        let $target = _target(target, callback)\n        if ($target === undefined) { return; }\n\n        // Handle Response\n        ajax(url, params, (err, html) => {\n            let content = clean(html);\n            if (content){\n               \n                $target.html(content.body)\n                $target.removeClass('fadeOut').addClass('fadeIn');\n                \n                // Can also work on $target attributes\n            }\n            if (callback) callback();\n\n            // Fire pseudo event\n            let event = $.Event(\"ajax:ready\");\n            event.refresh         = {};\n            event.refresh.$target = $target;\n            $(document).trigger(event);\n            \n        }, method);\n    }\n\n    let clean = (html) => {\n\n        html = html.trim();\n        let patternDIV = new RegExp('^(<div[^>]*ajax-body[^>]*>)(.*)','gi');\n        let mtch = patternDIV.exec(html);\n        if (!mtch){ return false; }\n    \n        let $wrap = $(mtch[1]+'</div>');\n        \n        html = html.replace(patternDIV, '$2');\n        html = html.substring(0, html.lastIndexOf(\"</div>\"));\n        return { 'body' : html , '$wrapper' : $wrap };\n    }\n\n    // ------------------------------------------\n    //  REGISTER\n    // ------------------------------------------\n\n    const register = () => {\n        $.CLIENT.listenEvent('mirror:refresh', (msg) => {\n            let value = msg.message.event.value;\n            let callback = (err) => { $.CLIENT.sendAck(msg.replyId); }\n\n            if (value.html !== undefined){\n                $.CLIENT.updateHTML(value.html, value.target, callback)\n            } else {\n                $.CLIENT.refresh(value.url, undefined, value.target, callback);\n            }\n        });\n    }\n\n    // Initialization on DOM ready\n    $(() => { register(); });\n\n}(jQuery);",
        "output": "str",
        "x": 710,
        "y": 160,
        "wires": [
            [
                "05aa51dc607e11c0"
            ]
        ]
    },
    {
        "id": "6b5f6666dc07fa90",
        "type": "template",
        "z": "ed6749f4e72bfce1",
        "name": "puppet.js",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "!function ($) {\n\n    $.CLIENT = $.CLIENT || {};\n    $.CLIENT.portlet = $.CLIENT.portlet || {};\n    $.CLIENT.portlet.puppet = $.CLIENT.portlet.puppet || {};\n\n    // ------------------------------------------\n    //  SPEAK\n    // ------------------------------------------\n\n    const speak = $.CLIENT.portlet.puppet.speak = (ssml, audio, callback) => {\n        $.CLIENT.playAudio(audio, callback);\n        $.CLIENT.playSSML(ssml.viseme,    'tts:viseme')\n        $.CLIENT.playSSML(ssml.bookmarks, 'tts:bookmarks')\n    }\n\n    const handleSpeak = (msg) => {\n\n        let value = msg.message.event.value\n        if(!value){ return $.CLIENT.sendAck(msg.replyId); }\n\n        speak(value.ssml, value.buffer, () => {\n            $.CLIENT.sendAck(msg.replyId);\n        })\n    }\n\n    // ------------------------------------------\n    //  PRIVATE\n    // ------------------------------------------\n\n    let pluginsReady = false;\n    const init = ($canvas, callback) => {\n\n        $.CLIENT.portlet.puppet.$canvas = $canvas;\n        const scene  =  $.CLIENT.portlet.puppet.scene = new THREE.Scene();\n        const canvas = $canvas[0];\n\n        // ------------------------------------------\n        //  SIZES\n        // ------------------------------------------\n\n        const sizes = {\n            width:  $canvas.width(),\n            height: $canvas.height()\n        }\n\n        // ------------------------------------------\n        //  CAMERA\n        // ------------------------------------------\n\n        const camera = $.CLIENT.portlet.puppet.camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)\n        camera.position.x = 0\n        camera.position.y = 1\n        camera.position.z = 4\n        camera.lookAt(1,1,1);\n\n        scene.add(camera)\n \n        // ------------------------------------------\n        //  RENDERER\n        // ------------------------------------------\n\n        const renderer = $.CLIENT.portlet.puppet.renderer = new THREE.WebGLRenderer({\n            canvas: canvas,\n            antialias: true,\n            transparent: true,\n        })\n\n        renderer.setSize(sizes.width, sizes.height)\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n        renderer.setClearColor( 0x000000, 0 );\n        renderer.render(scene, camera);\n        \n\n        // ------------------------------------------\n        //  LIGHT\n        // ------------------------------------------\n\n        const ambientLight = new THREE.AmbientLight(0xffffff, 1)\n        scene.add(ambientLight)\n\n        const directionalLight = new THREE.DirectionalLight(0xffffff, 1.5)\n        directionalLight.castShadow = true\n        directionalLight.position.set(0, 0.5, 0)\n        scene.add(directionalLight)\n\n        // ------------------------------------------\n        //  ELEMENTS\n        // ------------------------------------------\n/*\n        const sphere = new THREE.SphereGeometry( 0.5, 32, 32 )\n        const light1 = new THREE.PointLight( 0xff0040, 2, 5 )\n        light1.add( new THREE.Mesh( sphere, new THREE.MeshBasicMaterial( { color: 0xff0040 } ) ) )\n        light1.position.set(1, 0.5, -2)\n        light1.scale.set(2,2,2)\n        scene.add( light1 )\n\n        const sphere2 = new THREE.SphereGeometry( 1, 32, 32 )\n        const light2 = new THREE.PointLight( 0x9514ff, 3, 10 )\n        light2.add( new THREE.Mesh( sphere2, new THREE.MeshBasicMaterial( { color: 0x9514ff } ) ) )\n        light2.position.set(0, 1, -1)\n        light2.scale.set(0.2,0.2,0.2)\n        scene.add( light2 )\n        \n        const sphere3 = new THREE.SphereGeometry( 1, 32, 32 )\n        const light3 = new THREE.PointLight( 0xff14c0, 3, 10 )\n        light3.add( new THREE.Mesh( sphere3, new THREE.MeshBasicMaterial( { color: 0xff14c0 } ) ) )\n        light3.position.set(2, 1, -1)\n        light3.scale.set(0.2,0.2,0.2)\n        scene.add( light3 )\n        \n        const sphere4 = new THREE.SphereGeometry( 1, 32, 32 )\n        const light4 = new THREE.PointLight( 0x146eff, 3, 10 )\n        light4.add( new THREE.Mesh( sphere4, new THREE.MeshBasicMaterial( { color: 0x146eff } ) ) )\n        light4.position.set(1, 2, -1)\n        light4.scale.set(0.2,0.2,0.2)\n        scene.add( light4 )\n*/\n\n        // ------------------------------------------\n        //  ANIMATION\n        // ------------------------------------------\n\n        \n        const animation_callbacks = $.CLIENT.portlet.puppet.animation_callbacks = []\n        const animation = ( elapsedTime ) => {\n\n            // Call all callbacks\n            for (let cb of animation_callbacks){ cb(); }\n\n            // TWEEN callbacks\n            TWEEN.update();\n\n            renderer.render( scene, camera );\n        }\n        renderer.setAnimationLoop( animation );\n\n        // ------------------------------------------\n        //  MODEL\n        // ------------------------------------------\n\n        const loadingManager = new THREE.LoadingManager( () => { /*hasLoaded = true*/ })\n        const gltfLoader     = new THREE.GLTFLoader(loadingManager)\n        gltfLoader.load('assets/model_anim_v3.glb', (model) => {\n\n                let puppet = $.CLIENT.portlet.puppet\n                puppet.avatar = { model }\n                scene.add(model.scene)\n                pluginsReady = true;\n                callback();\n            } \n        )\n    }\n\n\n    // ------------------------------------------\n    //  PLUGIN : AVATAR MIXER\n    // ------------------------------------------\n\n    const initPlugin_AvatarMixer = () => {\n\n        let avatar =  $.CLIENT.portlet.puppet.avatar\n        avatar.mixer = new THREE.AnimationMixer(avatar.model.scene)\n        avatar.mixer.addEventListener('finished', stopAction);\n\n        avatar.actions = {}\n        for (let anim of (avatar.model).animations){\n            avatar.actions[anim.name] = avatar.mixer.clipAction(anim)\n        }\n\n        // Init Scenes (aka Camera/Model position/rotation)\n        initScenes(avatar.model.scene);\n        avatar.model.scene.visible = true\n\n        // Default Action\n        avatar.actions['default'] = avatar.actions['Track_Idle']\n\n        // Setup Animations Loop\n        avatar.actions['Track_Bored']\n        avatar.actions['Track_Cheering'].setLoop(THREE.LoopOnce)\n        avatar.actions['Track_Clapping'].setLoop(THREE.LoopOnce)\n        avatar.actions['Track_Counting'].setLoop(THREE.LoopOnce)\n        avatar.actions['Track_Jumping'].setLoop(THREE.LoopOnce)\n        avatar.actions['Track_Dance_House']\n        avatar.actions['Track_Fitness_Plank']\n        avatar.actions['Track_Fitness_Plank_End'].setLoop(THREE.LoopOnce)\n        avatar.actions['Track_Fitness_Plank_Start'].setLoop(THREE.LoopOnce)\n        avatar.actions['Track_Fitness_Pushup']\n        avatar.actions['Track_Fitness_Pushup_End'].setLoop(THREE.LoopOnce)\n        avatar.actions['Track_Fitness_Pushup_Start'].setLoop(THREE.LoopOnce)\n        avatar.actions['Track_Fitness_Situp']\n        avatar.actions['Track_Fitness_Situp_End'].setLoop(THREE.LoopOnce)\n        avatar.actions['Track_Fitness_Situp_Start'].setLoop(THREE.LoopOnce)\n        avatar.actions['Track_Fitness_Squat']\n        avatar.actions['Track_Hand_Forward'].setLoop(THREE.LoopOnce)\n        avatar.actions['Track_Idle'].setLoop(THREE.LoopPingPong)\n        avatar.actions['Track_Idle_Sad'].setLoop(THREE.LoopPingPong)\n        avatar.actions['Track_Idle_Stand'].setLoop(THREE.LoopPingPong) \n        avatar.actions['Track_Hand_Pointing'].setLoop(THREE.LoopOnce)\n        avatar.actions['Track_Shake_No'].setLoop(THREE.LoopOnce)\n        avatar.actions['Track_Shake_Yes'].setLoop(THREE.LoopOnce)\n        avatar.actions['Track_Speaking']\n        avatar.actions['Track_Walk']\n        avatar.actions['Track_Walk_Happy']\n        avatar.actions['Track_Walk_Sad']\n        avatar.actions['Track_Walk_Start'].setLoop(THREE.LoopOnce)\n        avatar.actions['Track_Walk_Stop'].setLoop(THREE.LoopOnce)\n        avatar.actions['Track_Waving'].setLoop(THREE.LoopOnce)\n\n        const clock = new THREE.Clock();\n        const handleAnimation = () => {\n            let puppet = $.CLIENT.portlet.puppet\n            if (!puppet.avatar || !puppet.avatar.mixer) { return; }\n            puppet.avatar.mixer.update( clock.getDelta() );\n        }\n        $.CLIENT.portlet.puppet.animation_callbacks.push(handleAnimation)\n    }\n\n    let lastAction   = undefined\n    let onceAction   = undefined\n    let onceCallback = undefined\n    let fadeDuration = 0.4;\n\n    const playAction = (name, callback) => {\n        let avatar = $.CLIENT.portlet.puppet.avatar\n        let action = avatar.actions[name]\n        if (lastAction == action){ return; }\n\n        // Stop or Let It Go\n        if (lastAction){\n            if (lastAction === action){ return; }\n            //lastAction.stop()\n            lastAction.fadeOut(fadeDuration)\n        }\n        \n        // Always Play (Once or More)\n        if (onceAction){\n            if (onceAction === action){ return; }\n            stopOnceAction();\n        }\n        \n        //action.play();\n        action.reset().setEffectiveTimeScale( 1 ).fadeIn( fadeDuration ).play();\n\n        // If More store it for later\n        if (action.loop !== THREE.LoopOnce){\n            lastAction = action\n            if (callback) callback();\n        } else {\n            onceAction   = action\n            onceCallback = callback\n        }\n    }\n\n    const stopOnceAction = () => {\n        if (onceAction)  { \n            //onceAction.stop();\n            onceAction.reset().setEffectiveTimeScale( 1 ).fadeOut(fadeDuration).play()\n            onceAction = undefined; \n        }\n        if (onceCallback){ \n            onceCallback(); \n            onceCallback = undefined; \n        }\n    }\n    const stopAction = (reset) => {\n        stopOnceAction();\n        if (!reset && lastAction){ \n            //lastAction.play();\n            lastAction.reset().setEffectiveTimeScale( 1 ).fadeIn( fadeDuration ).play();\n            \n        } else {\n            playAction('default');\n        }\n    }\n\n    const handleAnimate = (msg) => {\n        \n        let value = msg.message.event.value\n        let cb = () => {  $.CLIENT.sendAck(msg.replyId)  }\n        if (!pluginsReady){ return cb(); }\n        playAnimation(value, cb);\n    }\n\n    // ------------------------------------------\n    //  PLUGIN : AVATAR MIXER : PUBLIC PART\n    // ------------------------------------------\n\n    const playAnimation = $.CLIENT.portlet.puppet.playAnimation = (value, cb) => {\n        if(!value){ if (cb) { cb() }; return; }\n        let avatar = $.CLIENT.portlet.puppet.avatar\n\n        // Play a given Animation Track\n        if (value.indexOf('Track') == 0){\n            playAction(value, cb);\n            return;\n        }\n\n        // Show/Hide the Avatar\n        if (value.indexOf('Action') == 0){\n            if (value == 'Action_Hide'){\n                avatar.model.scene.visible = false\n            }\n            if (value == 'Action_Show'){\n                avatar.model.scene.visible = true\n            }\n            if (cb) { cb(); } \n            return;\n        }\n\n        // Move to Scene\n        if (value.indexOf('Scene') == 0){ \n            let split = value.split('_')\n            SCENES[split[1]][split[2]](cb)\n            return;\n        }\n\n        // Look at location\n        if (value.indexOf('Look') == 0){\n            let pointer = $.CLIENT.portlet.puppet.avatar.lookAt\n            let $canvas = $.CLIENT.portlet.puppet.$canvas\n\n            let target = {x : 0, y : 0}\n            let size   = {w : $canvas.width(), h : $canvas.height()}\n            if (value == 'Look_Center'){\n                target.x= size.w / 2\n                target.y= size.h / 2\n            }\n\n            pointer.x =   target.x / size.w * 2 - 1\n            pointer.y = - target.y / size.h * 2 + 1\n\n            if (cb) { cb(); } \n            return;\n        }\n    }\n\n    const SCENES = {\n        center : {\n            data : {\n                position : { x : 1, y : 1, z : 1 },\n                rotation : { x : 0, y : 0, z : 0 }\n            }\n        },\n        left : {\n            data : {\n                position: { x: 1, y: 1, z: 1 },\n                rotation: { x: 0, y: 0, z: 0}\n            }\n        },\n        zoom : {\n            data : {\n                position : { x : 1, y : 1, z : 1 },\n                rotation : { x : 0, y : 0, z : 0 }\n            }\n        },\n    } \n\n    const initScenes = (scene) => {\n        let _position = (ctx) => { scene.position.set(ctx.x, ctx.y, ctx.z)}\n        let _rotation = (ctx) => { scene.rotation.set(ctx.x, ctx.y, ctx.z)}\n\n        SCENES.center.set = (cb) => { _position(SCENES.center.data.position); _rotation(SCENES.center.data.rotation); if (cb){cb()} }\n        SCENES.left.set   = (cb) => { _position(SCENES.left.data.position);   _rotation(SCENES.left.data.rotation);   if (cb){cb()} }\n        SCENES.zoom.set   = (cb) => { _position(SCENES.zoom.data.position);   _rotation(SCENES.zoom.data.rotation);   if (cb){cb()} }\n\n        // Center => Left\n        let cl_walk          = new TWEEN.Tween(SCENES.center.data.position).to(SCENES.left.data.position, 2300).onUpdate(_position).onStart(()   => { playAction('Track_Walk') })\n        let cl_rotate        = new TWEEN.Tween(SCENES.center.data.rotation).to(SCENES.left.data.rotation, 300).onUpdate(_rotation).onComplete(() => { stopAction(true)})\n        SCENES.center.toLeft = (cb) => { SCENES.center.set(); cl_walk.chain(cl_rotate).start(); if (cb){ setTimeout(cb,3000) } }\n        \n        // Center => Zoom\n        let cz_walk          = new TWEEN.Tween(SCENES.center.data.position).to(SCENES.zoom.data.position, 1800).onUpdate(_position).onStart(()   => { playAction('Track_Walk') })\n        let cz_rotate        = new TWEEN.Tween(SCENES.center.data.rotation).to(SCENES.zoom.data.rotation, 0).onUpdate(_rotation).onComplete(() => { stopAction(true)})\n        SCENES.center.toZoom = (cb) => { SCENES.center.set(); cz_walk.chain(cz_rotate).start(); if (cb){ setTimeout(cb,2000) }}\n\n\n        // Zoom => Left\n        let zl_turnback      = new TWEEN.Tween(SCENES.zoom.data.rotation).to({ x: THREE.Math.degToRad(0), y: THREE.Math.degToRad(-160), z: THREE.Math.degToRad(0)}, 500).onUpdate(_rotation).onStart(()   => { playAction('Track_Walk') })\n        let zl_walk          = new TWEEN.Tween(SCENES.zoom.data.position).to(SCENES.left.data.position, 1500).onUpdate(_position)\n        let zl_rotate        = new TWEEN.Tween(SCENES.zoom.data.rotation).to(SCENES.left.data.rotation, 500).onUpdate(_rotation).onComplete(() => { stopAction(true)})\n        SCENES.zoom.toLeft   = (cb) => { SCENES.zoom.set(); zl_turnback.chain(zl_walk.chain(zl_rotate)).start(); if (cb){ setTimeout(cb,2000) }}\n\n    }\n\n\n\n\n    // ------------------------------------------\n    //  PLUGIN : AVATAR SSML\n    // ------------------------------------------\n\n    //  VISEME\n    //  Occulus   : https://developer.oculus.com/documentation/unity/audio-ovrlipsync-viseme-reference\n    //  Microsoft : https://docs.microsoft.com/en-us/azure/cognitive-services/speech-service/speech-ssml-phonetic-sets#french-suprasegmentals \n\n    const MS_2_RPM = [\n        { ms :  0, name: '  ',  rpm: [{  id: 0,   dict: ' ',         value: 0    }] },\n        { ms :  1, name: 'eu',  rpm: [{  id: 59,  dict: 'viseme_E',  value: 0.7  }] },\n        { ms :  2, name: 'ae',  rpm: [{  id: 58,  dict: 'viseme_aa', value: 0.7  }] },\n        { ms :  3, name: 'oh',  rpm: [{  id: 61,  dict: 'viseme_O',  value: 0.7  }] },\n        { ms :  4, name: 'un',  rpm: [{  id: 59,  dict: 'viseme_E',  value: 0.7  }] },\n        { ms :  5, name: '  ',  rpm: [{  id: 0,   dict: ' ',         value: 0    }] },\n        { ms :  6, name: 'iy',  rpm: [{  id: 60,  dict: 'viseme_I',  value: 0.7  }] },\n        { ms :  7, name: 'uw',  rpm: [{  id: 62,  dict: 'viseme_U',  value: 0.7  }] },\n        { ms :  8, name: 'ow',  rpm: [{  id: 61,  dict: 'viseme_O',  value: 0.7  }] },\n        { ms :  9, name: '  ',  rpm: [{  id: 0,   dict: ' ',         value: 0    }] },\n        { ms : 10, name: 'ch',  rpm: [{  id: 54,  dict: 'viseme_CH', value: 0.7  }] },\n        { ms : 11, name: '  ',  rpm: [{  id: 0,   dict: ' ',         value: 0    }] },\n        { ms : 12, name: 'x',   rpm: [{  id: 57,  dict: 'viseme_RR', value: 0.7  }] },\n        { ms : 13, name: 'r',   rpm: [{  id: 57,  dict: 'viseme_RR', value: 0.7  }] },\n        { ms : 14, name: 'l',   rpm: [{  id: 56,  dict: 'viseme_nn', value: 0.7  }] },\n        { ms : 15, name: 's',   rpm: [{  id: 55,  dict: 'viseme_SS', value: 0.7  }] },\n        { ms : 16, name: 'sh',  rpm: [{  id: 54,  dict: 'viseme_CH', value: 0.7  }] },\n        { ms : 17, name: 'dh',  rpm: [{  id: 51,  dict: 'viseme_TH', value: 0.7  }] },\n        { ms : 18, name: 'v',   rpm: [{  id: 50,  dict: 'viseme_FF', value: 0.7  }] },\n        { ms : 19, name: 'n‿', rpm: [{  id: 56,  dict: 'viseme_nn', value: 0.7  }] },\n        { ms : 20, name: 'kk',  rpm: [{  id: 53,  dict: 'viseme_kk', value: 0.7  }] },\n        { ms : 21, name: 'p',   rpm: [{  id: 53,  dict: 'viseme_PP', value: 0.7  }] },\n    ]\n\n    const initPlugin_AvatarSSML = () => {\n        let avatar = $.CLIENT.portlet.puppet.avatar\n        let raycastHead\n        avatar.model.scene.traverse((child) => {\n            if (child.name === \"Wolf3D_Head\") {\n                raycastHead = child\n            }\n        })\n\n        let lastRPM = undefined;\n        const handleLipsync = (evt) => {\n    \n            if (lastRPM){\n                raycastHead.morphTargetInfluences[ lastRPM.id ] = 0;\n            } else {\n                playAction('Track_Speaking');\n            }\n    \n            if(!evt.elm) {\n                playAction('default');\n                lastRPM = undefined;\n                return;\n            }\n    \n            lastRPM = MS_2_RPM[evt.elm.privVisemeId].rpm[0]\n            raycastHead.morphTargetInfluences[ lastRPM.id ] = lastRPM.value;\n        }\n    \n        const handleBookmarks= (evt) => {\n            if (!evt.elm){ return; } // no more bookmarks\n    \n            let bookmark = evt.elm.privText\n            if (bookmark.indexOf('puppet') !== 0) return;\n    \n            let action = bookmark.replace('puppet','Track')\n            playAnimation(action);\n        }\n\n        $.CLIENT.listenEvent('tts:viseme',    handleLipsync);\n        $.CLIENT.listenEvent('tts:bookmarks', handleBookmarks);\n    }\n\n    // ------------------------------------------\n    //  PLUGIN : FOLLOW CURSOR\n    // ------------------------------------------\n\n    const initPlugin_FollowCursor = (mouse) => {\n\n        let avatar = $.CLIENT.portlet.puppet.avatar\n        let avatarHead, avatarLeftEye, avatarRightEye, avatarSpine\n        avatar.model.scene.traverse((child) => {\n            if (child.name === \"Head\") {\n                avatarHead = child\n            }\n            if (child.name === \"LeftEye\") {\n                avatarLeftEye = child\n            }\n            if (child.name === \"RightEye\") {\n                avatarRightEye = child\n            }\n            if (child.name === \"Spine2\") {\n                avatarSpine = child\n            }\n            if (child.name === \"Spine1\") {\n                avatarSpine = child\n            }\n        })\n\n        const pointer = $.CLIENT.portlet.puppet.avatar.lookAt = new THREE.Vector2();\n        let $canvas = $.CLIENT.portlet.puppet.$canvas;\n        \n        if (mouse){\n            document.addEventListener( 'mousemove', (event) => {\n                \n                let offset  = $canvas.offset()\n                let size    = { w : $canvas.width(), h : $canvas.height() }\n                \n                if (event.clientX < offset.left || event.clientX > offset.left + size.w) return;\n                if (event.clientY < offset.top  || event.clientY > offset.top  + size.h) return;\n\n                pointer.x =   (event.clientX - offset.left) / size.w * 2 - 1\n                pointer.y = - (event.clientY - offset.top)  / size.h * 2 + 1\n            }) \n        }\n        \n        const handleAnimation = () => {\n            if (!avatar.model){ return; }\n\n            const parallaxX =   pointer.x * 0.5\n            const parallaxY = - pointer.y * 0.5\n\n            avatarHead.rotation.y = parallaxX / 1.5\n            avatarHead.rotation.x = parallaxY / 1.5 - 0.3\n\n            avatarSpine.rotation.y = parallaxX / 4\n            avatarSpine.rotation.x = parallaxY / 4\n\n            avatarLeftEye.rotation.y = parallaxX / 1.5\n            avatarLeftEye.rotation.x = parallaxY / 1.5\n\n            avatarRightEye.rotation.y = parallaxX / 1.5\n            avatarRightEye.rotation.x = parallaxY / 1.5\n        }\n        $.CLIENT.portlet.puppet.animation_callbacks.push(handleAnimation)\n    }\n    \n\n    // ------------------------------------------\n    //  REGISTER\n    // ------------------------------------------\n\n    const register = () => {\n\n        $.CLIENT.listenEvent('puppet:speak',   handleSpeak);\n        $.CLIENT.listenEvent('puppet:animate', handleAnimate);\n        init( $('#puppet-canvas'), () => {    \n            initPlugin_AvatarMixer();\n            initPlugin_FollowCursor();\n            initPlugin_AvatarSSML();\n\n            setTimeout(() => {\n                $.CLIENT.portlet.puppet.avatar.model.scene.position.x = 0.3\n                $.CLIENT.portlet.puppet.avatar.model.scene.position.y = 0\n                $.CLIENT.portlet.puppet.avatar.model.scene.position.z = 2.5\n\n                $.CLIENT.portlet.puppet.avatar.lookAt.y = -0.7\n                $.CLIENT.portlet.puppet.avatar.lookAt.x = -0.3\n            },500)\n            \n\n        });\n    }\n\n    // Initialization on DOM ready\n    $(() => { register(); });\n\n}(jQuery);",
        "output": "str",
        "x": 720,
        "y": 280,
        "wires": [
            [
                "05aa51dc607e11c0"
            ]
        ]
    },
    {
        "id": "05aa51dc607e11c0",
        "type": "file",
        "z": "ed6749f4e72bfce1",
        "name": "Cache to static folder",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 940,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "b59c87253129963e",
        "type": "function",
        "z": "ed6749f4e72bfce1",
        "name": "js/app.js",
        "func": "let staticRoot = env.get(\"env-static\")\nmsg.filename = staticRoot + 'js/app.js'\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 80,
        "wires": [
            [
                "2b64e1ef38cb0a9d"
            ]
        ]
    },
    {
        "id": "30f629bfcb62611d",
        "type": "function",
        "z": "ed6749f4e72bfce1",
        "name": "css/app.css",
        "func": "let staticRoot = env.get(\"env-static\")\nmsg.filename = staticRoot + 'css/app.css'\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 40,
        "wires": [
            [
                "89b8a57e568ac302"
            ]
        ]
    },
    {
        "id": "ac1b9eaec814e843",
        "type": "switch",
        "z": "ed6749f4e72bfce1",
        "name": "Overwrite",
        "property": "env-overwrite",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 160,
        "wires": [
            [
                "30f629bfcb62611d",
                "b59c87253129963e",
                "f5604f592680ec11",
                "49c6178f76c85d63",
                "b64ff58b04f0f25c",
                "24d51b83bc97ddfd",
                "7bfcfc32429a3bc4"
            ]
        ]
    },
    {
        "id": "f5604f592680ec11",
        "type": "function",
        "z": "ed6749f4e72bfce1",
        "name": "js/tts.js",
        "func": "let staticRoot = env.get(\"env-static\")\nmsg.filename = staticRoot + 'js/tts.js'\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 200,
        "wires": [
            [
                "8955448258d00308"
            ]
        ]
    },
    {
        "id": "49c6178f76c85d63",
        "type": "function",
        "z": "ed6749f4e72bfce1",
        "name": "js/status.js",
        "func": "let staticRoot = env.get(\"env-static\")\nmsg.filename = staticRoot + 'js/status.js'\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 120,
        "wires": [
            [
                "2e50320d50891fb0"
            ]
        ]
    },
    {
        "id": "b64ff58b04f0f25c",
        "type": "function",
        "z": "ed6749f4e72bfce1",
        "name": "js/ajax.js",
        "func": "let staticRoot = env.get(\"env-static\")\nmsg.filename = staticRoot + 'js/ajax.js'\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 160,
        "wires": [
            [
                "a5d53fb0415bfa8a"
            ]
        ]
    },
    {
        "id": "24d51b83bc97ddfd",
        "type": "function",
        "z": "ed6749f4e72bfce1",
        "name": "js/puppet.js",
        "func": "let staticRoot = env.get(\"env-static\")\nmsg.filename = staticRoot + 'js/puppet.js'\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 280,
        "wires": [
            [
                "6b5f6666dc07fa90"
            ]
        ]
    },
    {
        "id": "78bce17ee2f19b84",
        "type": "template",
        "z": "ed6749f4e72bfce1",
        "name": "header-start.html",
        "field": "web.header.start",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!doctype html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n        <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-KyZXEAg3QhqLMpG8r+8fhAXLRk2vvoC2f3B09zVXn8CA5QIVfZOJ3BCsw2P0p/We\" crossorigin=\"anonymous\">\n        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css\" integrity=\"sha512-c42qTSw/wPZ3/5LBzD+Bw5f7bSF2oxou6wEb+I/lqeaKV5FDIfMvvRp772y4jcJLKuGUOpbJMdg/BTl50fJYAw==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" />\n        <link rel=\"stylesheet\" href=\"/css/app.css\"  type=\"text/css\"/>\n        \n",
        "output": "str",
        "x": 530,
        "y": 400,
        "wires": [
            [
                "d69cf2496fc9b5c2"
            ]
        ]
    },
    {
        "id": "2aa446124b685083",
        "type": "template",
        "z": "ed6749f4e72bfce1",
        "name": "footer-start.html",
        "field": "web.footer.start",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "\n<!-- FOOTER  -->\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\" integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js\" integrity=\"sha512-qTXRIMyZIFb8iQcfjXWCO8+M5Tbc38Qi5WzdPOYZHIlZpzBHG3L3by84BBBOiRGiEb7KKtAOAs5qYdUiZiQNNQ==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-U1DAWAznBHeqEIlVSCgzq+c9gqGAJn5c/t99JyeKa9xxaYpSvHU5awsuZVVFIhvj\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/webfont/1.6.26/webfont.js\"></script>\n    \n    <script src='/js/app.js'></script>\n    <script src='/js/status.js'></script>\n    <script src='/js/ajax.js'></script>\n    <script src='/js/tts.js'></script>\n\n{{#web.ws.url}}\n    <script src='/js/websocket.js'></script>\n    <script>\n        !function ($) {\n            $(() => { $.CLIENT.connect('{{{web.ws.url}}}', {hint : '{{{web.ws.hint}}}', cookie: {{{web.ws.cookie}}}  }); });\n        }(jQuery);\n    </script>\n{{/web.ws.url}}",
        "output": "str",
        "x": 540,
        "y": 480,
        "wires": [
            [
                "839d13f73ebe051b"
            ]
        ]
    },
    {
        "id": "d69cf2496fc9b5c2",
        "type": "template",
        "z": "ed6749f4e72bfce1",
        "name": "header-end.html",
        "field": "web.header.end",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "       {{#web.css}}<link rel=\"stylesheet\" href=\"{{{web.css}}}\"  type=\"text/css\"/>{{/web.css}}\n       {{#web.title}}<title>{{{web.title}}}</title>{{/web.title}}\n    </head>\n    <body>\n  \n<!-- HEADER  -->\n",
        "output": "str",
        "x": 540,
        "y": 440,
        "wires": [
            [
                "2aa446124b685083"
            ]
        ]
    },
    {
        "id": "839d13f73ebe051b",
        "type": "template",
        "z": "ed6749f4e72bfce1",
        "name": "web.footer.end",
        "field": "web.footer.end",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "    {{#web.js}}<script src='{{{web.js}}}'></script>{{/web.js}}\n    </body>\n</html>",
        "output": "str",
        "x": 540,
        "y": 520,
        "wires": [
            [
                "d03f8245bd6a06f3"
            ]
        ]
    },
    {
        "id": "cf9bf6f91a23564c",
        "type": "template",
        "z": "ed6749f4e72bfce1",
        "name": "HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{{web.header.start}}}\n{{{web.header.end}}}\n{{{web.body}}}\n{{{web.footer.start}}}\n{{{web.footer.end}}}",
        "output": "str",
        "x": 890,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "4e4a31bd0e5d9a29",
        "type": "subflow:8b8c4ee6a78019cd",
        "z": "ed6749f4e72bfce1",
        "name": "",
        "env": [
            {
                "name": "env-login",
                "value": "env-login",
                "type": "env"
            }
        ],
        "x": 500,
        "y": 360,
        "wires": [
            [],
            [
                "78bce17ee2f19b84"
            ]
        ]
    },
    {
        "id": "44ff2129146f1399",
        "type": "switch",
        "z": "ed6749f4e72bfce1",
        "name": "Login",
        "property": "env-login",
        "propertyType": "env",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 380,
        "wires": [
            [
                "4e4a31bd0e5d9a29"
            ],
            [
                "78bce17ee2f19b84"
            ]
        ]
    },
    {
        "id": "1c9b744205bc4f1c",
        "type": "switch",
        "z": "ed6749f4e72bfce1",
        "name": "has Body",
        "property": "web.body",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 880,
        "y": 520,
        "wires": [
            [],
            [
                "cf9bf6f91a23564c"
            ]
        ]
    },
    {
        "id": "d03f8245bd6a06f3",
        "type": "function",
        "z": "ed6749f4e72bfce1",
        "name": "env-body",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\nmsg.web.body = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-body\"))\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 520,
        "wires": [
            [
                "1c9b744205bc4f1c"
            ]
        ]
    },
    {
        "id": "f42186fdab8cb592",
        "type": "function",
        "z": "ed6749f4e72bfce1",
        "name": "Variables",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\nmsg.web = msg.web || {}\nmsg.web.title =  MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-title\"))\nmsg.web.css   =  MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-css\"))\nmsg.web.js    =  MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-js\"))\n\nmsg.web.ws = msg.web.ws || {}\nmsg.web.ws.url  = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-ws-url\"))\nmsg.web.ws.hint = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-ws-hint\"))\nmsg.web.ws.cookie = env.get(\"env-login\") ? true : false\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 260,
        "wires": [
            [
                "ac1b9eaec814e843",
                "44ff2129146f1399"
            ]
        ]
    },
    {
        "id": "65567eb6ba579041",
        "type": "template",
        "z": "ed6749f4e72bfce1",
        "name": "websocket.js",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "!function ($) {\n  $.CLIENT = $.CLIENT || {};\n  $.CLIENT.CONFIG =  $.CLIENT.CONFIG || {}\n  $.CLIENT.CONFIG.websocket = $.CLIENT.CONFIG.websocket || {}\n\n  // ------------------------------------------\n  //  PRIVATE\n  // ------------------------------------------\n\n  let socket  = undefined;\n  const connect = $.CLIENT.connect = (url, options) => {\n    options = $.CLIENT.CONFIG.websocket.options = options || {}\n\n    socket = new WebSocket(url);\n\n    socket.addEventListener(\"open\", (event) => {\n      console.log(\"Websocket\", \"OPEN\", options)\n      let data = { 'refresh' : !options.refresh } // Refresh session if it's the first time\n      options.refresh = true;\n      send('app:ready', data);\n      \n    });\n\n    socket.addEventListener(\"close\", (event) => {\n      console.log(\"Websocket\", \"CLOSE\")\n      setTimeout(() => { connect(socket.url, $.CLIENT.CONFIG.websocket.options) }, 1000);\n    });\n\n    socket.addEventListener(\"message\", function (event) {\n      let json = JSON.parse(event.data);\n      console.log(\"Websocket\", \"MESSAGE\", json, event)\n\n      // Split event message in multiple events\n      if (json.message && json.message.type === 'event'){\n          $.CLIENT.fireEvent(json.message.event.name, json)\n      } else if (msg.message) {\n          $.CLIENT.fireEvent('message', json)\n      }\n\n    });\n\n    socket.addEventListener(\"error\", function (event) {\n      console.log(\"Websocket\", \"ERROR\", event)\n    });\n\n  }\n\n  let pingHandle = undefined;\n  const ping = function() { send('ws:ping', 'pong', true);  }\n\n  const _send = (data, quiet) => {\n    if (!socket) return;\n\n    // Reset the Ping/Pong\n    if (pingHandle) { clearTimeout(pingHandle); }\n    pingHandle = setTimeout(ping, 45*1000);\n\n    if (!quiet){ $.CLIENT.status($.CLIENT.STATUS.NETWORK, 'Sending...');  }\n\n    // Add a hidden client id provided by browser\n    let clientID = $.CLIENT.CONFIG.clientID\n    if (clientID) {\n        data._client_id  = clientID\n    } else { console.error('Missing Client ID'); }\n\n    // Add a hidden hint for custom behavior\n    if ($.CLIENT.CONFIG.websocket.options.hint){\n      data._client_hint = $.CLIENT.CONFIG.websocket.options.hint\n    }\n\n    // Add a cookie secret for security\n    if ($.CLIENT.CONFIG.websocket.options.cookie){\n      data._client_cookie = $.CLIENT.CONFIG.clientCookie\n    }\n\n    // Send Message\n    socket.send(JSON.stringify(data));\n\n    if (!quiet){\n        $.CLIENT.status($.CLIENT.STATUS.OK,'Sending... done');\n    }    \n  }\n\n  // ------------------------------------------\n  //  PUBLIC\n  // ------------------------------------------\n\n  const send = $.CLIENT.send = (type, data, quiet) => {\n      _send({ type, data }, quiet)\n  }\n\n  const sendAck = $.CLIENT.sendAck = (replyId, data) => {\n      if (!replyId){ return; }\n      _send({ type: 'ws:ack', replyId, data }, true)\n  }\n\n  // ------------------------------------------\n  //  REGISTER\n  // ------------------------------------------\n\n  const register = () => {\n    $.CLIENT.listenEvent('ws:debug', (msg)=> {\n      console.log('ws:debug', msg);\n      $.CLIENT.sendAck(msg.replyId);\n    });\n  }\n\n  // Initialization on DOM ready\n  $(() => { register(); });\n\n}(jQuery);\n",
        "output": "str",
        "x": 730,
        "y": 240,
        "wires": [
            [
                "05aa51dc607e11c0"
            ]
        ]
    },
    {
        "id": "7bfcfc32429a3bc4",
        "type": "function",
        "z": "ed6749f4e72bfce1",
        "name": "js/websocket.js",
        "func": "let staticRoot = env.get(\"env-static\")\nmsg.filename = staticRoot + 'js/websocket.js'\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 240,
        "wires": [
            [
                "65567eb6ba579041"
            ]
        ]
    },
    {
        "id": "b9a304504e87d0dd",
        "type": "subflow",
        "name": "core:util",
        "info": "A Helper Node that provide utility function and class to all Moonshot's framework\r\nMust be run at startup to initialize a global variable.",
        "category": "Encausse.net",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "405239a52e0c9117"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 140,
                "wires": [
                    {
                        "id": "22f64f94bd5524b8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "env-language",
                "type": "str",
                "value": "fr-FR",
                "ui": {
                    "icon": "font-awesome/fa-flag-o",
                    "label": {
                        "en-US": "Language"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-moonshots-core",
            "type": "moonshots-util",
            "version": "1.0.0",
            "author": "Jean-Philippe Encausse <jp@encausse.net>",
            "desc": "Utility function for all Moonshots Framework",
            "keywords": "Moonshots, NodeRED",
            "license": "MIT"
        },
        "color": "#9ff6fd",
        "icon": "node-red/alert.svg"
    },
    {
        "id": "405239a52e0c9117",
        "type": "function",
        "z": "b9a304504e87d0dd",
        "name": "getMessageProperty()",
        "func": "let MOONSHOTS  = {}\nMOONSHOTS.UTIL = MOONSHOTS.UTIL || {}\n\nMOONSHOTS.UTIL.getMessageProperty = (msg, field) => {\n    if (field === undefined || field === ''){ return undefined; } // undefined, blank, ...\n    if (typeof field !== 'string'){ field }\n    try {\n        let value = RED.util.getMessageProperty(msg, field)\n        if (value !== undefined){ return value }\n    } catch (ex){ }\n    return field;\n}\n\nglobal.set('__MOONSHOTS__', MOONSHOTS)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 60,
        "wires": [
            [
                "afc847078eb663c1"
            ]
        ]
    },
    {
        "id": "22f64f94bd5524b8",
        "type": "function",
        "z": "b9a304504e87d0dd",
        "name": "LRU Cache",
        "func": "let MOONSHOTS  = global.get('__MOONSHOTS__') || {}\nMOONSHOTS.UTIL = MOONSHOTS.UTIL || {}\n\nclass LRUCache {\n    constructor(capacity) {\n        this.capacity = capacity;\n        this.cache = new Map();\n    }\n\n    get(key) {\n        if (!this.cache.has(key)) {\n            return -1;\n        }\n        // Move the accessed key to the end (most recently used)\n        let value = this.cache.get(key);\n        this.cache.delete(key);\n        this.cache.set(key, value);\n        return value;\n    }\n\n    put(key, value) {\n        if (this.cache.has(key)) {\n            // If the key already exists, delete it first\n            this.cache.delete(key);\n        } else if (this.cache.size >= this.capacity) {\n            // If the cache is full, remove the least recently used item\n            // keys().next().value gives us the first item's key\n            this.cache.delete(this.cache.keys().next().value);\n        }\n        // Insert the new key-value pair\n        this.cache.set(key, value);\n    }\n}\nMOONSHOTS.UTIL.LRUCache = LRUCache;\n\nglobal.set('__MOONSHOTS__', MOONSHOTS)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "afc847078eb663c1",
        "type": "function",
        "z": "b9a304504e87d0dd",
        "name": "getLanguage()",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\nlet SOCKETS = MOONSHOTS['web-socket'] = MOONSHOTS['web-socket'] || {}\n\nlet i18n_default = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-language\")) || 'fr-FR'\n\nMOONSHOTS.UTIL = MOONSHOTS.UTIL || {}\nMOONSHOTS.UTIL.getLanguage = (_client_id) => {\n    if (_client_id === undefined) { return i18n_default; }\n\n    let socket = SOCKETS[_client_id]\n    if (!socket) { return i18n_default; }\n\n    return socket.language || i18n_default\n}\n\nglobal.set('__MOONSHOTS__', MOONSHOTS)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 100,
        "wires": [
            [
                "22f64f94bd5524b8"
            ]
        ]
    },
    {
        "id": "a1e98c1cc76bcf50",
        "type": "subflow",
        "name": "llm:search",
        "info": "This node return a sorted array of Cosine Similarities\r\n- a String query or an embedding\r\n- an array of documents\r\n\r\n# Input\r\n\r\nModel's credential should be provide using environment mechanism. See llm:Model documentation.\r\n- Query : String or Embedding\r\n- Database: Array of Documents\r\n- Dimensions: Size of Embeddings\r\n\r\nArray of documents must be follow this template. See also llm:extractor documentation\r\n```\r\n[\r\n    {\r\n        chunks : [\r\n            data : {\r\n                data: String\r\n                embedding : [...]\r\n            }\r\n        ]\r\n    }\r\n]\r\n```\r\n",
        "category": "Encausse.net",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "6dfa9ef01e4c69bf"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 480,
                "y": 60,
                "wires": [
                    {
                        "id": "331f90a37680e229",
                        "port": 0
                    }
                ]
            },
            {
                "x": 520,
                "y": 140,
                "wires": [
                    {
                        "id": "23207f26a5098aa0",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "env-llm-model",
                "type": "env",
                "value": "env-llm-gpt-model",
                "ui": {
                    "icon": "font-awesome/fa-cogs",
                    "label": {
                        "en-US": "Embedding*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-llm-key",
                "type": "env",
                "value": "env-llm-gpt-key",
                "ui": {
                    "icon": "font-awesome/fa-user-secret",
                    "label": {
                        "en-US": "Key*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-llm-endpoint",
                "type": "env",
                "value": "env-llm-gpt-endpoint",
                "ui": {
                    "icon": "font-awesome/fa-user-secret",
                    "label": {
                        "en-US": "Endpoint*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-query",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-search",
                    "label": {
                        "en-US": "Query"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-db",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "Database"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-dim",
                "type": "num",
                "value": "320",
                "ui": {
                    "icon": "font-awesome/fa-arrows-h",
                    "label": {
                        "en-US": "Dimensions"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-moonshots-llm",
            "type": "moonshots-llm-search",
            "version": "1.0.1",
            "author": "Jean-Philippe Encausse <jp@encausse.net>",
            "desc": "Perform Cosine Similarities on Embeddings",
            "keywords": "Moonshots, NodeRED, LLM, OpenAI",
            "license": "MIT"
        },
        "color": "#9ff6fd",
        "icon": "font-awesome/fa-search"
    },
    {
        "id": "23207f26a5098aa0",
        "type": "function",
        "z": "a1e98c1cc76bcf50",
        "name": "Cosine Similarity",
        "func": "\n// Target Embedding\nconst targetEmbedding = msg.search.targetEmbedding\nconst targetTensor = tf.tensor(targetEmbedding);\n\n// Compute similarities\nlet similarityArray = [];\nfor (let doc of msg.search.db){\n    for (let chunk of doc.chunks.data){\n        const embeddingTensor = tf.tensor(chunk.embedding);\n        const similarity = context.cosineSimilarity(targetTensor, embeddingTensor);\n        similarityArray.push({\n            similarity, \n            'data' : chunk.data,\n            'index': chunk.chunkIndex || 0,\n            'doc'  : doc.source\n        });\n    }\n}\n\nsimilarityArray.sort((a, b) => b.similarity - a.similarity);\nmsg.search.similarityArray = similarityArray\nreturn node.send(msg,false);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "\ncontext.cosineSimilarity = (a, b) => {\n    const dotProduct = tf.dot(a, b).dataSync()[0];\n    const normA = tf.norm(a).dataSync()[0];\n    const normB = tf.norm(b).dataSync()[0];\n    return dotProduct / (normA * normB);\n}",
        "finalize": "",
        "libs": [
            {
                "var": "tf",
                "module": "@tensorflow/tfjs"
            }
        ],
        "x": 370,
        "y": 140,
        "wires": [
            []
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "6dfa9ef01e4c69bf",
        "type": "function",
        "z": "a1e98c1cc76bcf50",
        "name": "Variables",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\n\nmsg.search       = msg.search || {}\nmsg.search.query = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-query\"))\nmsg.search.db    = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-db\"))\n\n// Query can be a String or an Embedding\nif (typeof msg.search.query == 'string'){\n    return node.send([msg, undefined], false);\n} else {\n    msg.search.targetEmbedding = msg.search.query\n    delete msg.search.query\n    return node.send([undefined, msg], false);\n}\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 100,
        "wires": [
            [
                "331f90a37680e229"
            ],
            [
                "23207f26a5098aa0"
            ]
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "331f90a37680e229",
        "type": "subflow:5704ae21aaa902c8",
        "z": "a1e98c1cc76bcf50",
        "name": "",
        "env": [
            {
                "name": "env-llm-model",
                "value": "env-llm-model",
                "type": "env"
            },
            {
                "name": "env-llm-key",
                "value": "env-llm-key",
                "type": "env"
            },
            {
                "name": "env-llm-endpoint",
                "value": "env-llm-endpoint",
                "type": "env"
            },
            {
                "name": "env-dim",
                "value": "env-dim",
                "type": "env"
            },
            {
                "name": "env-data",
                "value": "search.query",
                "type": "str"
            },
            {
                "name": "env-chunk",
                "value": "payload.chunk",
                "type": "str"
            }
        ],
        "x": 340,
        "y": 80,
        "wires": [
            [],
            [
                "d1efe93006159623"
            ]
        ]
    },
    {
        "id": "d1efe93006159623",
        "type": "change",
        "z": "a1e98c1cc76bcf50",
        "name": "targetEmbedding",
        "rules": [
            {
                "t": "set",
                "p": "search.targetEmbedding",
                "pt": "msg",
                "to": "llm.embedding",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 100,
        "wires": [
            [
                "23207f26a5098aa0"
            ]
        ]
    },
    {
        "id": "071ffca41809de80",
        "type": "subflow",
        "name": "llm:extractor",
        "info": "Split input data into chunck, create embedding, output a document and cache it on disk\r\n\r\n# Input\r\n\r\nModel's credential should be provide using environment mechanism. See llm:Model documentation.\r\n\r\n- Source: a unique name used to cache the document\r\n- Override: override the cache \r\n- Buffer: an input buffer (Pdf). URL & Text are alternate option to Buffer \r\n- Metadata: store metadata aside the document \r\n- Chunck Size: Size of the chunks\r\n- Chunk Overlap : Overlap some part of the chunk \r\n- Dimensions: Embedding size\r\n\r\n# Output\r\n\r\nDocument with the following template.\r\n```\r\n[\r\n    {\r\n        chunks : [\r\n            data : {\r\n                data: String\r\n                embedding : [...]\r\n            }\r\n        ]\r\n    }\r\n]",
        "category": "Encausse.net",
        "in": [
            {
                "x": 40,
                "y": 160,
                "wires": [
                    {
                        "id": "1daec4fa45613530"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 840,
                "y": 160,
                "wires": [
                    {
                        "id": "0d9aa84471867204",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1020,
                "y": 80,
                "wires": [
                    {
                        "id": "340bf9890b1849d2",
                        "port": 0
                    },
                    {
                        "id": "1daec4fa45613530",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "env-llm-model",
                "type": "env",
                "value": "env-llm-gpt-model",
                "ui": {
                    "icon": "font-awesome/fa-cogs",
                    "label": {
                        "en-US": "Embedding*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-llm-key",
                "type": "env",
                "value": "env-llm-gpt-key",
                "ui": {
                    "icon": "font-awesome/fa-user-secret",
                    "label": {
                        "en-US": "Key*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-llm-endpoint",
                "type": "env",
                "value": "env-llm-gpt-endpoint",
                "ui": {
                    "icon": "font-awesome/fa-user-secret",
                    "label": {
                        "en-US": "Endpoint*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-source",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-i-cursor",
                    "label": {
                        "en-US": "Source*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-override",
                "type": "bool",
                "value": "false",
                "ui": {
                    "icon": "font-awesome/fa-trash-o",
                    "label": {
                        "en-US": "Override"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-buffer",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-braille",
                    "label": {
                        "en-US": "Buffer*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "bin",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-url",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-cloud",
                    "label": {
                        "en-US": "URL*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-text",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-align-left",
                    "label": {
                        "en-US": "Text*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-meta",
                "type": "json",
                "value": "{}",
                "ui": {
                    "icon": "font-awesome/fa-diamond",
                    "label": {
                        "en-US": "Metadata*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-chunck-size",
                "type": "str",
                "value": "1000",
                "ui": {
                    "icon": "font-awesome/fa-arrows-h",
                    "label": {
                        "en-US": "Chunk Size*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-chunck-overlap",
                "type": "str",
                "value": "0",
                "ui": {
                    "icon": "font-awesome/fa-clone",
                    "label": {
                        "en-US": "Chunk Overlap*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-dim",
                "type": "num",
                "value": "320",
                "ui": {
                    "icon": "font-awesome/fa-arrows-h",
                    "label": {
                        "en-US": "Dimensions"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-moonshots-llm",
            "type": "moonshots-llm-extractor",
            "version": "1.0.0",
            "author": "Jean-Philippe Encausse <jp@encausse.net>",
            "desc": "Extract Embeddings from Documents",
            "keywords": "Moonshots, NodeRED, LLM, OpenAI",
            "license": "MIT"
        },
        "color": "#9ff6fd",
        "icon": "font-awesome/fa-file-zip-o"
    },
    {
        "id": "1daec4fa45613530",
        "type": "function",
        "z": "071ffca41809de80",
        "name": "Variables",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\n\nmsg.extractor = {}\nmsg.extractor.debug = {}\nmsg.extractor.source          = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-source\"))         // Source Name for caching\nmsg.extractor.override        = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-override\"))       // Override cache if exists\nmsg.extractor.buffer          = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-buffer\"))         // Buffer to work on\nmsg.extractor.text            = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-text\"))           // Text to work on\nmsg.extractor.url             = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-url\"))            // Remote content to retrieve\nmsg.extractor.metadata        = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-meta\")) || {}     // Metadata to link\nmsg.extractor.chunks          = {}\nmsg.extractor.chunks.size     = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-chunck-size\"))    // Size of chunks\nmsg.extractor.chunks.overlap  = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-chunck-overlap\")) // Size of chunks overlap\nmsg.extractor.chunks.data     = []\n\n// Build a hash from source\nif (msg.extractor.source){\n    let shaObj   = new jsSHA(\"SHA-1\", \"TEXT\");\n        shaObj.update(msg.extractor.source);\n\n    msg.extractor.filename = 'node-red-static/db/rag_'+shaObj.getHash(\"HEX\")+'.json';\n\n    if (fs.existsSync(msg.extractor.filename) && !msg.extractor.override){\n        msg.extractor = JSON.parse(fs.readFileSync(msg.extractor.filename));\n        msg.extractor.debug = { cache : true};\n        return node.send([msg, undefined, undefined, undefined],false);\n    }\n\n} else { node.warn('Missing source to cache the extractor'); }\n\nif (msg.extractor.buffer){ return node.send([undefined, msg, undefined, undefined],false); }\nif (msg.extractor.text)  { return node.send([undefined, undefined, msg, undefined],false); }\nreturn node.send([undefined, undefined, undefined, msg],false);",
        "outputs": 4,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsSHA",
                "module": "jssha"
            },
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 160,
        "y": 100,
        "wires": [
            [],
            [
                "9aa7a5fcc32c742f"
            ],
            [
                "42a6819ca65816d7"
            ],
            [
                "06100e19d6a018af"
            ]
        ],
        "outputLabels": [
            "Already cached",
            "Use the Buffer",
            "Use the Text",
            "Other"
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "9aa7a5fcc32c742f",
        "type": "function",
        "z": "071ffca41809de80",
        "name": "Buffer Extractor",
        "func": "const { getTextExtractor } = OfficeTextExtractor\nconst extractor = getTextExtractor()\nmsg.extractor.text = await extractor.extractText({ input: msg.extractor.buffer, type: 'buffer' })\n\nreturn node.send(msg,false);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "OfficeTextExtractor",
                "module": "office-text-extractor"
            }
        ],
        "x": 380,
        "y": 120,
        "wires": [
            [
                "42a6819ca65816d7"
            ]
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "13da18883dba02a9",
        "type": "comment",
        "z": "071ffca41809de80",
        "name": "See EmbedJs Documentation",
        "info": "// https://github.com/llm-tools/embedJs/blob/23f4fd0203f166362789adfbe3f89350b4e0b0ee/src/loaders/ppt-loader.ts",
        "x": 140,
        "y": 40,
        "wires": []
    },
    {
        "id": "42a6819ca65816d7",
        "type": "function",
        "z": "071ffca41809de80",
        "name": "TextSplitter",
        "func": "const chunkSize    = msg.extractor.chunks.size;\nconst chunkOverlap = msg.extractor.chunks.overlap;\nconst chunker = new TextSplitter.RecursiveCharacterTextSplitter({ chunkSize, chunkOverlap });\n\nconst cleanString = (text) => {\n    text = text.replace(/\\\\/g, '');\n    text = text.replace(/#/g, ' ');\n    text = text.replace(/\\. \\./g, '.');\n    text = text.replace(/\\s\\s+/g, ' ');\n    text = text.replace(/(\\r\\n|\\n|\\r)/gm, ' ');\n    return text.trim();\n}\n\nlet chunks = await chunker.splitText(cleanString(msg.extractor.text));\nmsg.extractor.chunks.data = chunks.map((data, index) => {\n    const startIndex = index * (chunkSize - chunkOverlap);\n    const endIndex = startIndex + data.length;\n    return { data, chunkIndex: index, startIndex, endIndex };\n});\n\nreturn node.send(msg, false);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "TextSplitter",
                "module": "@langchain/textsplitters"
            }
        ],
        "x": 390,
        "y": 160,
        "wires": [
            [
                "764ea68c982a91fd"
            ]
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "764ea68c982a91fd",
        "type": "array-loop",
        "z": "071ffca41809de80",
        "name": "Chunks",
        "key": "al417ae5a9e06a3859",
        "keyType": "msg",
        "reset": false,
        "resetValue": "value-null",
        "array": "extractor.chunks.data",
        "arrayType": "msg",
        "x": 540,
        "y": 200,
        "wires": [
            [
                "f4776003e798e875"
            ],
            [
                "0d9aa84471867204"
            ]
        ]
    },
    {
        "id": "0d9aa84471867204",
        "type": "subflow:5704ae21aaa902c8",
        "z": "071ffca41809de80",
        "name": "",
        "env": [
            {
                "name": "env-llm-model",
                "value": "env-llm-model",
                "type": "env"
            },
            {
                "name": "env-llm-key",
                "value": "env-llm-key",
                "type": "env"
            },
            {
                "name": "env-llm-endpoint",
                "value": "env-llm-endpoint",
                "type": "env"
            },
            {
                "name": "env-dim",
                "value": "env-dim",
                "type": "env"
            },
            {
                "name": "env-data",
                "value": "payload.data",
                "type": "str"
            },
            {
                "name": "env-chunk",
                "value": "payload.chunk",
                "type": "str"
            }
        ],
        "x": 700,
        "y": 200,
        "wires": [
            [],
            [
                "8ff439df04d18f3f"
            ]
        ]
    },
    {
        "id": "8ff439df04d18f3f",
        "type": "change",
        "z": "071ffca41809de80",
        "name": "setEmbedding",
        "rules": [
            {
                "t": "set",
                "p": "payload.embedding",
                "pt": "msg",
                "to": "llm.embedding",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 200,
        "wires": [
            [
                "764ea68c982a91fd"
            ]
        ]
    },
    {
        "id": "f4776003e798e875",
        "type": "function",
        "z": "071ffca41809de80",
        "name": "Build Document",
        "func": "\n// Build the Document\nmsg.filename = msg.extractor.filename\nmsg.payload  = msg.extractor\n\n// Remove Heavy\ndelete msg.extractor.buffer\ndelete msg.extractor.text\ndelete msg.extractor.override\n\nreturn node.send(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 120,
        "wires": [
            [
                "340bf9890b1849d2"
            ]
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "340bf9890b1849d2",
        "type": "file",
        "z": "071ffca41809de80",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 900,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "06100e19d6a018af",
        "type": "debug",
        "z": "071ffca41809de80",
        "name": "FIXME",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 170,
        "y": 160,
        "wires": []
    },
    {
        "id": "63608c8ffd25253a",
        "type": "subflow",
        "name": "llm:model",
        "info": "\r\nThis node build and cache Azure OpenAI Client.\r\n\r\n# Input\r\n\r\nModel's credential should be provide using environment mechanism. \r\nSo all the custom variable related to the project will be stored in one location.\r\nYou can use a pattern like `env-llm-gpt4-key` for you env variables.\r\n\r\n- Model: the name of the Model\r\n- Key: The Azure API Key\r\n- Endpoint : The Azure API Endpoint\r\n\r\n# Output\r\n\r\nThe model is return into `msg.llm.model`\r\nThe model is cached at Node level.",
        "category": "Encausse.net",
        "in": [
            {
                "x": 100,
                "y": 160,
                "wires": [
                    {
                        "id": "7765b312572202c0"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 950,
                "y": 120,
                "wires": [
                    {
                        "id": "7765b312572202c0",
                        "port": 0
                    },
                    {
                        "id": "0535485087b7f606",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1000,
                "y": 200,
                "wires": [
                    {
                        "id": "0535485087b7f606",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "env-llm-model",
                "type": "env",
                "value": "env-llm-model",
                "ui": {
                    "icon": "font-awesome/fa-cogs",
                    "label": {
                        "en-US": "Model*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-llm-key",
                "type": "env",
                "value": "env-llm-key",
                "ui": {
                    "icon": "font-awesome/fa-user-secret",
                    "label": {
                        "en-US": "Key*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-llm-endpoint",
                "type": "env",
                "value": "env-llm-endpoint",
                "ui": {
                    "icon": "font-awesome/fa-user-secret",
                    "label": {
                        "en-US": "Endpoint*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-moonshots-llm",
            "type": "moonshots-llm-model",
            "version": "1.1.0",
            "author": "Jean-Philippe Encausse <Jp@encausse.net>",
            "desc": "Config Node of Azure OpenAI",
            "keywords": "Moonshots, NodeRED, LLM, OpenAI",
            "license": "MIT"
        },
        "color": "#9ff6fd",
        "outputLabels": [
            "Error",
            "Build msg.llm.model"
        ],
        "icon": "node-red/cog.svg"
    },
    {
        "id": "7765b312572202c0",
        "type": "function",
        "z": "63608c8ffd25253a",
        "name": "Retrieve Model",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\nlet CONTEXT = MOONSHOTS['llm-model'] = MOONSHOTS['llm-model'] || {}\n\nmsg.llm = msg.llm || {}\n\nlet key = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-llm-key\"))\nif (key == \"env-llm-key\"){ key = undefined }\n\nlet endpoint = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-llm-endpoint\"))\nif (endpoint == \"env-llm-endpoint\"){ endpoint = undefined }\n\nlet id = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-llm-model\"))\nif (id == \"env-llm-model\"){ id = undefined }\n\n// Check Configuration\nif (!key || !endpoint || !id){\n    msg.llm.error = 'Missing OpenAI credential'\n    return [msg, undefined, undefined];\n}\n\n// Retrive Cached Model\nlet config = msg.llm.model = CONTEXT[id]\nif (config && config.client){\n    return [undefined, msg, undefined];\n}\n\n// Build Model\nmsg.llm.model = { key, endpoint, id }\nreturn [undefined, undefined, msg];",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 160,
        "wires": [
            [],
            [
                "0535485087b7f606"
            ],
            [
                "ecb7d2d977d41b78"
            ]
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "ecb7d2d977d41b78",
        "type": "switch",
        "z": "63608c8ffd25253a",
        "name": "",
        "property": "llm.model.key",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OLLAMA",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 220,
        "wires": [
            [
                "05a19c7b3f35e11d"
            ],
            [
                "b88086bd3214a77d"
            ]
        ]
    },
    {
        "id": "05a19c7b3f35e11d",
        "type": "function",
        "z": "63608c8ffd25253a",
        "name": "OLLAMA",
        "func": "\n// ------------------------------------------\n//  HELPERS\n// ------------------------------------------\n\nconst showOllama = async (url, name) => {\n  return await fetchOllama(url.replace(/chat$/, \"show\"), {name});\n}\n\nconst fetchOllama = async (url, post) => {\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(post)\n  });\n\n  let result = await response.text();\n  if (!response.ok) { \n    node.warn({ error: `HTTP ${response.status} - ${response.statusText}`, result})\n  }\n  \n  try { result = JSON.parse(result) } catch(ex){ node.warn(ex) }\n  return result;\n}\n\nconst handleResults = async (results, options) => {\n  let finish_reason  = results.done_reason || 'stop'\n  let message = results.message\n  message.content = message.content.trim();\n\n  if (message.tool_calls){\n    finish_reason = \"tool_calls\"\n    delete message.content\n    let uid = Date.now()\n    for (let tool of message.tool_calls){\n      tool.type = \"function\"\n      tool.id = \"call_ollama_\" + (uid++);\n      //tool['function'].arguments = JSON.stringify(tool['function'].arguments);\n    }\n  }\n  /*\n  try { \n    let json = JSON.parse(message.content);\n    let fctn = json['function']\n    if (json.name && fctn) {\n      \n      message.tool_calls[{\n        \"type\"    : \"function\",\n        \"id\"      : \"call_ollama_function\",\n        \"function\":  {\n          \"name\"     : json.name,\n          \"arguments\": JSON.stringify(fctn.parameters.properties)\n        }\n      }]\n\n      delete message.content\n      finish_reason = \"tool_calls\"\n      node.warn(message)\n    }\n  } catch (ex) { node.warn(ex) }\n*/\n\n  // Follow OpenAI structure\n  results.choices = [{ finish_reason, message }]\n}\n\n// ------------------------------------------\n//  CLIENT\n// ------------------------------------------\n\nlet MOONSHOTS = global.get('__MOONSHOTS__') || {}\nlet CONTEXT = MOONSHOTS['llm-model'] = MOONSHOTS['llm-model'] || {}\n\nlet config   = msg.llm.model\nlet metadata = await showOllama(config.endpoint, config.id);\n\nconfig.client = {\n    chat  : async (options) => {\n      let post = { \"model\": config.id, \"stream\" : options.stream }\n      if (options?.response_format?.type == 'json_object') { post.format = \"json\"; }\n\n      // Options\n      post.options = { num_ctx: 8192 } // max_context_tokens\n      if (options.temperature)       { post.options.temperature = options.temperature; }\n      //if (options.max_tokens)        { post.options.num_predict = options.max_tokens;  }\n      if (options.frequency_penalty) { post.options.repeat_penalty = options.frequency_penalty; }\n      if (options.presence_penalty)  { post.options.presence_penalty = options.presence_penalty; }\n\n      // Tools\n      if (metadata.capabilities.includes(\"tools\") && options.tools){\n        post.tools = options.tools\n      }\n\n      // Messages\n      post.messages = options.messages\n      let results = await fetchOllama(config.endpoint, post)\n\n      // Normalize, Tools, \n      await handleResults(results, options)\n      node.warn({post, results})\n      return results\n    },\n    embed : async (options) => {\n\n    }\n}\n\nCONTEXT[config.id] = config;\nglobal.set('__MOONSHOTS__', MOONSHOTS)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fetch",
                "module": "node-fetch"
            }
        ],
        "x": 580,
        "y": 200,
        "wires": [
            [
                "0535485087b7f606"
            ]
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "b88086bd3214a77d",
        "type": "function",
        "z": "63608c8ffd25253a",
        "name": "OPENAI",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\nlet CONTEXT = MOONSHOTS['llm-model'] = MOONSHOTS['llm-model'] || {}\n\nlet config = msg.llm.model\n\nconst { AzureOpenAI } = azureOpenai;\nconst apiVersion = \"2024-08-01-preview\";\nlet openaiClient = new AzureOpenAI({ \"endpoint\": config.endpoint, \"apiKey\": config.key, \"deployment\": config.id, apiVersion });\nconfig.client = {\n    chat  : async (options) => {\n        let results = await openaiClient.chat.completions.create(options);\n        //node.warn({options, results});\n        return results\n    },\n    embed : async (options) => { \n        let results = await openaiClient.embeddings.create(options); \n        //node.warn({options, results});\n        return results\n    }\n}\n\nCONTEXT[config.id] = config;\nglobal.set('__MOONSHOTS__', MOONSHOTS)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "azureOpenai",
                "module": "openai"
            }
        ],
        "x": 580,
        "y": 240,
        "wires": [
            [
                "0535485087b7f606"
            ]
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "0535485087b7f606",
        "type": "function",
        "z": "63608c8ffd25253a",
        "name": "CLIENT",
        "func": "let config = msg.llm.model\nif (config.client === undefined){\n    msg.llm.error = 'Missing LLM Client'\n    return [msg, undefined];\n}\nreturn [undefined, msg]",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 160,
        "wires": [
            [],
            []
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "5704ae21aaa902c8",
        "type": "subflow",
        "name": "llm:embed",
        "info": "This node is a wrapper of Azure OpenAI Client to generate Embedding.\r\nEmbedding are cache into a LRU.\r\n\r\n# Input\r\nModel's credential should be provide using environment mechanism. See llm:Model documentation.\r\n\r\n- Dimension : Size of the embedding array\r\n- Data: The data to convert\r\n- Format: Stringify the embedding\r\n\r\n# Output\r\n\r\nThe node will output a `msg.llm` object with all underlaying elements\r\n 1. Errors (look into msg.llm.error)\r\n 2. Tools to handle\r\n 3. Response",
        "category": "Encausse.net",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "1da62cbf9b2b1e3e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 840,
                "y": 80,
                "wires": [
                    {
                        "id": "e73149b17a11bdb0",
                        "port": 0
                    }
                ]
            },
            {
                "x": 400,
                "y": 180,
                "wires": [
                    {
                        "id": "073b52d82f0ef7fd",
                        "port": 1
                    },
                    {
                        "id": "7c2c276230e382e2",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "env-llm-model",
                "type": "env",
                "value": "env-llm-gpt-model",
                "ui": {
                    "icon": "font-awesome/fa-cogs",
                    "label": {
                        "en-US": "Embedding*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-llm-key",
                "type": "env",
                "value": "env-llm-gpt-key",
                "ui": {
                    "icon": "font-awesome/fa-user-secret",
                    "label": {
                        "en-US": "Key*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-llm-endpoint",
                "type": "env",
                "value": "env-llm-gpt-endpoint",
                "ui": {
                    "icon": "font-awesome/fa-user-secret",
                    "label": {
                        "en-US": "Endpoint*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-dim",
                "type": "num",
                "value": "320",
                "ui": {
                    "icon": "font-awesome/fa-arrows",
                    "label": {
                        "en-US": "Dimensions*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-data",
                "type": "str",
                "value": "payload",
                "ui": {
                    "icon": "font-awesome/fa-align-left",
                    "label": {
                        "en-US": "Data*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-format",
                "type": "bool",
                "value": "false",
                "ui": {
                    "icon": "font-awesome/fa-code",
                    "label": {
                        "en-US": "Stringify"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-moonshots-llm",
            "type": "moonshots-llm-embedding",
            "version": "1.1.0",
            "author": "Jean-Philippe Encausse <jp@encausse.net>",
            "desc": "Wrapper on Azure OpenAI Client for Embeddings",
            "keywords": "Moonshots, NodeRED, LLM, OpenAI",
            "license": "MIT"
        },
        "color": "#9ff6fd",
        "icon": "node-red/split.svg"
    },
    {
        "id": "073b52d82f0ef7fd",
        "type": "function",
        "z": "5704ae21aaa902c8",
        "name": "Query OpenAI Embedding",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\nlet CONTEXT = MOONSHOTS['llm-embedding'] = MOONSHOTS['llm-embedding'] || {}\n\nmsg.llm.options = { \"dimensions\": msg.llm.dimensions };\n\nlet t0 = Date.now()\nlet model = msg.llm.model\ntry { \n    let opts    =  Object.assign({}, msg.llm.options); \n    opts.model  = ''\n    opts.input  = msg.llm.data\n    let result = await model.client.embed(opts);\n    msg.llm.result = result;\n} catch(err){\n    node.warn({ debug: '3. Query OpenAI Embedding', err})\n    msg.llm.error = { err };\n    return node.send([msg, undefined], false);\n}\n\n// Debug duration of API calls\nmsg.llm.debug.duration = (Date.now() - t0); \n\n\n// Handle result assume there is only 1\nlet datas = msg.llm.result.data\nif (!datas || datas.length < 1){\n    msg.llm.error = { err : 'No LLM embeddings' }\n    return node.send([msg, undefined],false);\n}\n\n// Store embedding\nmsg.llm.embedding =datas[0].embedding;\n\n// Stringify\nif (msg.llm.stringify){\n    try { msg.llm.embedding = JSON.stringify(msg.llm.embedding) } \n    catch(err){\n        msg.llm.error = { err }\n        return node.send([msg, undefined],false);\n    }\n}\n\n// Cache into an LRU\nCONTEXT.cache.put(msg.llm.data, msg.llm.embedding)\nreturn node.send([undefined,msg],false);",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 120,
        "wires": [
            [
                "e73149b17a11bdb0"
            ],
            []
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "7c2c276230e382e2",
        "type": "function",
        "z": "5704ae21aaa902c8",
        "name": "Variables",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\nlet CONTEXT = MOONSHOTS['llm-embedding'] = MOONSHOTS['llm-embedding'] || {}\n\nif (!CONTEXT.cache){\n    CONTEXT.cache = new MOONSHOTS.UTIL.LRUCache(500)\n    global.set('__MOONSHOTS__', MOONSHOTS)\n    node.warn('Building Embedding LRU Cache')\n}\n\n\nmsg.llm = msg.llm || {}\nmsg.llm.debug = msg.llm.debug || {}\n\nmsg.llm.data       = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-data\"))\nmsg.llm.dimensions = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-dim\"))\nmsg.llm.stringify  = env.get(\"env-format\");\n\nlet cache = CONTEXT.cache.get(msg.llm.data)\nif (cache != -1){\n    msg.llm.embedding = cache\n    msg.llm.debug.cache = true;\n    return node.send([undefined, msg],false);\n}\n\nreturn node.send([msg, undefined], false);",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 120,
        "wires": [
            [
                "073b52d82f0ef7fd"
            ],
            []
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "1da62cbf9b2b1e3e",
        "type": "subflow:63608c8ffd25253a",
        "z": "5704ae21aaa902c8",
        "name": "Build Model",
        "x": 190,
        "y": 80,
        "wires": [
            [
                "e73149b17a11bdb0"
            ],
            [
                "7c2c276230e382e2"
            ]
        ]
    },
    {
        "id": "e73149b17a11bdb0",
        "type": "function",
        "z": "5704ae21aaa902c8",
        "name": "Errors",
        "func": "//node.warn(msg.llm);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 80,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-bug"
    },
    {
        "id": "8b8c4ee6a78019cd",
        "type": "subflow",
        "name": "web:auth",
        "info": "",
        "category": "Encausse.net",
        "in": [
            {
                "x": 60,
                "y": 140,
                "wires": [
                    {
                        "id": "45fec5c3b5e1413a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 520,
                "y": 60,
                "wires": [
                    {
                        "id": "b94e6b3ce73aabe0",
                        "port": 0
                    }
                ]
            },
            {
                "x": 360,
                "y": 160,
                "wires": [
                    {
                        "id": "45fec5c3b5e1413a",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "env-login",
                "type": "str",
                "value": "/login",
                "ui": {
                    "icon": "font-awesome/fa-lock",
                    "label": {
                        "en-US": "Login"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-cookie-secret",
                "type": "env",
                "value": "env-cookie-secret",
                "ui": {
                    "icon": "font-awesome/fa-diamond",
                    "label": {
                        "en-US": "Secret"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-cookie-max-age",
                "type": "env",
                "value": "env-cookie-max-age",
                "ui": {
                    "icon": "font-awesome/fa-diamond",
                    "label": {
                        "en-US": "Max Age"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-db",
                "type": "env",
                "value": "env-db-users",
                "ui": {
                    "icon": "font-awesome/fa-address-book-o",
                    "label": {
                        "en-US": "Database"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-moonshots-web",
            "type": "moonshots-web-auth",
            "version": "1.0.0",
            "author": "Jean-Philippe Encausse <jp@encausse.net>",
            "desc": "Authentication with cookies",
            "keywords": "Moonshots, NodeRED, Web",
            "license": "MIT"
        },
        "color": "#9ff6fd",
        "outputLabels": [
            "Redirect (info)",
            "Continue"
        ],
        "icon": "font-awesome/fa-lock"
    },
    {
        "id": "45fec5c3b5e1413a",
        "type": "function",
        "z": "8b8c4ee6a78019cd",
        "name": "Authenticate",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\n\nlet cookie = undefined\nlet cookie_max_age = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-cookie-max-age\")) || 28800000\nlet cookie_secret  = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-cookie-secret\"))  || '_default_secret'\nlet db_user        = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-db\"))\n\n//node.warn({cookie_max_age, cookie_secret, db_user})\n\nif (!db_user){\n     node.warn(\"Missing user's database\")\n    return [msg, undefined];\n}\n\nif (msg.req){\n    if (msg.req.cookies && msg.req.cookies.session){\n        cookie = msg.req.cookies.session\n    }\n} else if (msg.payload && msg.payload._client_cookie){ // Design/Hack for Websocket\n    cookie = msg.payload._client_cookie\n} else {\n    node.warn('Missing request or cookie')\n    return [msg, undefined];\n}\n\n// Init login/hash\nlet login = undefined\nlet hash  = undefined\nif (cookie){\n    let split = cookie.split(':')\n    login = split[0] \n    hash = split[1]\n}\n\n// Override BOTH with payload\nif (msg.payload.password !== undefined){\n    login = msg.payload.login\n    // Hash the Password\n    let password = msg.payload.password\n    let shaObj = new jsSHA(\"SHA-1\", \"TEXT\");\n    shaObj.update(password + cookie_secret);\n    hash = shaObj.getHash(\"HEX\");\n}\n\n// Find in Database\nlet user = db_user[login]\nif (!user || !hash || user.hash !== hash){\n    node.warn({ error: 'Authenticate', user, login, hash, cookie, msg})\n    msg.cookies = { 'session': { value: null }}\n    return [msg, undefined];\n}\nmsg.user = user\n\n// Store and Refresh the Cookie\nmsg.cookies = {\n    'session': {\n        value: user.login + ':' + user.hash,\n        maxAge: cookie_max_age\n    }\n}\nreturn [undefined, msg];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsSHA",
                "module": "jssha"
            }
        ],
        "x": 190,
        "y": 140,
        "wires": [
            [
                "b94e6b3ce73aabe0"
            ],
            []
        ]
    },
    {
        "id": "ccad5772b056af65",
        "type": "http response",
        "z": "8b8c4ee6a78019cd",
        "name": "",
        "statusCode": "303",
        "headers": {},
        "x": 660,
        "y": 100,
        "wires": []
    },
    {
        "id": "33226263a5823792",
        "type": "function",
        "z": "8b8c4ee6a78019cd",
        "name": "Redirect",
        "func": "let redirect = env.get('env-login') \nredirect += redirect.indexOf('?') > 0 ? '&' : '?'\n\nif (msg.payload && msg.payload.redirect){\n    redirect += 'redirect=' + encodeURIComponent(msg.payload.redirect);\n} else {\n    redirect += 'redirect=' + encodeURIComponent(msg.req.url);\n}\n\nmsg.headers = { 'Location' : redirect }\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 100,
        "wires": [
            [
                "ccad5772b056af65"
            ]
        ]
    },
    {
        "id": "b94e6b3ce73aabe0",
        "type": "switch",
        "z": "8b8c4ee6a78019cd",
        "name": "",
        "property": "req",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 120,
        "wires": [
            [
                "33226263a5823792"
            ],
            []
        ]
    },
    {
        "id": "2a0881fea396956c",
        "type": "subflow",
        "name": "core:airtable",
        "info": "",
        "category": "Encausse.net",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "4685703ffed5e818"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1040,
                "y": 80,
                "wires": [
                    {
                        "id": "4685703ffed5e818",
                        "port": 0
                    },
                    {
                        "id": "5642c0f39c5ad1a6",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1040,
                "y": 240,
                "wires": [
                    {
                        "id": "5642c0f39c5ad1a6",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "env-database",
                "type": "env",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "Database*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-database-key",
                "type": "env",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "Key*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-table",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-table",
                    "label": {
                        "en-US": "Table*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-view",
                "type": "str",
                "value": "GridView",
                "ui": {
                    "icon": "font-awesome/fa-search",
                    "label": {
                        "en-US": "View*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-query",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-edit",
                    "label": {
                        "en-US": "Query*"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "List"
                                },
                                "v": "list"
                            },
                            {
                                "l": {
                                    "en-US": "Retrieve"
                                },
                                "v": "retrieve"
                            },
                            {
                                "l": {
                                    "en-US": "Create"
                                },
                                "v": "create"
                            },
                            {
                                "l": {
                                    "en-US": "Update"
                                },
                                "v": "update"
                            },
                            {
                                "l": {
                                    "en-US": "Delete"
                                },
                                "v": "delete"
                            },
                            {
                                "l": {
                                    "en-US": "Metadata"
                                },
                                "v": "metadata"
                            }
                        ]
                    }
                }
            },
            {
                "name": "env-offset",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-angle-double-right",
                    "label": {
                        "en-US": "Offset"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-data",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-cubes",
                    "label": {
                        "en-US": "Data*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-moonshots-core",
            "type": "moonshots-airtable",
            "version": "1.0.0",
            "author": "Jean-Philippe Encausse <jp@encausse.net>",
            "desc": "Wrapper on top of AirTable",
            "keywords": "Moonshots, NodeRED, AirTable",
            "license": "MIT"
        },
        "color": "#9ff6fd",
        "icon": "font-awesome/fa-table"
    },
    {
        "id": "4685703ffed5e818",
        "type": "function",
        "z": "2a0881fea396956c",
        "name": "AIRTABLE",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\nnode.warn(\"AIRTABLE\")\n\n//if (msg.airtable){ node.warn(\"Overriding airtable object\") }\nlet db = msg.airtable = {}\n\ndb.config = {}\ndb.config.database =  MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-database\"))\ndb.config.key      =  MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-database-key\"))\nif (!db.config.database || !db.config.key ) return [msg, undefined];\n\ndb.req = {}\ndb.req.table = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-table\"))\nlet url   = 'https://api.airtable.com/v0/' + db.config.database + '/' + db.req.table\n\ndb.req.view = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-view\"))\n\ndb.req.query = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-query\"))\nif (!db.req.query) return [msg, undefined];\n\ndb.req.offset = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-offset\"))\nif (db.req.offset && db.req.offset == env.get(\"env-offset\")) { delete db.req.offset }\n\ndb.req.data  = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-data\"))\nif (db.req.data){ msg.payload = db.req.data }\n\nmsg.headers = {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer '+db.config.key\n} \n\nmsg.url = db.req.url = url\ndb.res = {}\nreturn [undefined, msg];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 80,
        "wires": [
            [],
            [
                "a597b66eb92d5430"
            ]
        ]
    },
    {
        "id": "a0d3a994d005469d",
        "type": "http request",
        "z": "2a0881fea396956c",
        "name": "GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 180,
        "wires": [
            [
                "5642c0f39c5ad1a6"
            ]
        ]
    },
    {
        "id": "a597b66eb92d5430",
        "type": "switch",
        "z": "2a0881fea396956c",
        "name": "",
        "property": "airtable.req.query",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "metadata",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "list",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "retrieve",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "create",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 7,
        "x": 390,
        "y": 220,
        "wires": [
            [
                "507b48ebb0d19cb4"
            ],
            [
                "d094dc66df8a753b"
            ],
            [
                "f6487c9e6abab0e5"
            ],
            [
                "27f9a484af94abd4"
            ],
            [
                "e821238f6e8985ba"
            ],
            [
                "e821238f6e8985ba"
            ],
            []
        ]
    },
    {
        "id": "d094dc66df8a753b",
        "type": "function",
        "z": "2a0881fea396956c",
        "name": "List",
        "func": "msg.airtable.req.url += '?maxRecords=1000'\nif (msg.airtable.req.offset) { msg.airtable.req.url += '&offset=' + msg.airtable.req.offset }\nif (msg.airtable.req.view)   { msg.airtable.req.url += '&view=' + msg.airtable.req.view }\n\nmsg.url = msg.airtable.req.url\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 160,
        "wires": [
            [
                "a0d3a994d005469d"
            ]
        ]
    },
    {
        "id": "f6487c9e6abab0e5",
        "type": "function",
        "z": "2a0881fea396956c",
        "name": "Retrieve",
        "func": "msg.url = msg.airtable.req.url += '/' + msg.airtable.req.data\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 200,
        "wires": [
            [
                "a0d3a994d005469d"
            ]
        ]
    },
    {
        "id": "e821238f6e8985ba",
        "type": "function",
        "z": "2a0881fea396956c",
        "name": "Create / Update",
        "func": "msg.method = 'POST'\nif (msg.airtable.req.query == 'update'){\n    msg.method = 'PATCH'\n}\n\n\nif (msg.airtable.req.data){\n    msg.payload = { 'records': Array.isArray(msg.airtable.req.data) ?msg.airtable.req.data : [ msg.airtable.req.data ] }\n    return msg;\n}\n\nif (msg.payload['records']){\n    return msg;\n}\n\nnode.warn(\"Missing data to update msg.payload.records or custom\")\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 240,
        "wires": [
            [
                "e8870fa7d7d32b4d"
            ]
        ]
    },
    {
        "id": "e8870fa7d7d32b4d",
        "type": "http request",
        "z": "2a0881fea396956c",
        "name": "POST",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 260,
        "wires": [
            [
                "5642c0f39c5ad1a6"
            ]
        ]
    },
    {
        "id": "27f9a484af94abd4",
        "type": "http request",
        "z": "2a0881fea396956c",
        "name": "DELETE",
        "method": "DELETE",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 740,
        "y": 220,
        "wires": [
            [
                "5642c0f39c5ad1a6"
            ]
        ]
    },
    {
        "id": "5642c0f39c5ad1a6",
        "type": "function",
        "z": "2a0881fea396956c",
        "name": "Error",
        "func": "\n// Request Error\nif (msg.statusCode != 200){\n    return [msg, undefined]; \n}\n\nmsg.airtable.result = msg.payload\n\n// An error message from Airtable\nif (msg.airtable.result.error){\n    return [msg, undefined]; \n}\n\n// Cleaning the HTTP Request stuff\ndelete msg.airtable.req\ndelete msg.airtable.res\ndelete msg.headers\ndelete msg.url\ndelete msg.statusCode\ndelete msg.responseUrl\ndelete msg.redirectList\ndelete msg.responseCookies\n\nreturn [undefined, msg];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 220,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "507b48ebb0d19cb4",
        "type": "function",
        "z": "2a0881fea396956c",
        "name": "Metadata",
        "func": "msg.url = msg.airtable.req.url = 'https://api.airtable.com/v0/meta/bases/' + msg.airtable.config.database + '/tables?include=visibleFieldIds'\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 120,
        "wires": [
            [
                "2aa9d1aef6339cb7"
            ]
        ]
    },
    {
        "id": "2aa9d1aef6339cb7",
        "type": "http request",
        "z": "2a0881fea396956c",
        "name": "GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 120,
        "wires": [
            [
                "5963778f48cfb174"
            ]
        ]
    },
    {
        "id": "5963778f48cfb174",
        "type": "function",
        "z": "2a0881fea396956c",
        "name": "Filter",
        "func": "if (!msg.airtable.req.table){ return msg; }\n\nfor (let table of msg.payload.tables){\n    if (table.name == msg.airtable.req.table){\n        msg.airtable.res.table = table\n    }\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 120,
        "wires": [
            [
                "5642c0f39c5ad1a6"
            ]
        ]
    },
    {
        "id": "30ca57d.d9cd6a8",
        "type": "subflow",
        "name": "ai:tts",
        "info": "Convert a Text to an Audio\nCache the audio on disk with a hash\nReturn a tts_cache with contextualt data",
        "category": "Encausse.net",
        "in": [
            {
                "x": 80,
                "y": 220,
                "wires": [
                    {
                        "id": "b69f2e3fea04cee4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 350,
                "y": 60,
                "wires": [
                    {
                        "id": "b69f2e3fea04cee4",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1160,
                "y": 160,
                "wires": [
                    {
                        "id": "9efd3c95299199a9",
                        "port": 0
                    },
                    {
                        "id": "112b83823fc8f381",
                        "port": 1
                    },
                    {
                        "id": "112b83823fc8f381",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "env-speech-key",
                "type": "env",
                "value": "env-speech-default-key",
                "ui": {
                    "icon": "font-awesome/fa-key",
                    "label": {
                        "en-US": "Key"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "env-speech-config",
                "type": "env",
                "value": "env-speech-default-config",
                "ui": {
                    "icon": "font-awesome/fa-key",
                    "label": {
                        "en-US": "Config"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-cache-fs",
                "type": "str",
                "value": "node-red-static/voices/",
                "ui": {
                    "icon": "font-awesome/fa-folder-o",
                    "label": {
                        "en-US": "Cache FS"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-cache-web",
                "type": "str",
                "value": "https://path.domain.com/voices/",
                "ui": {
                    "icon": "font-awesome/fa-link",
                    "label": {
                        "en-US": "Cache Web"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-tts",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-bullhorn",
                    "label": {
                        "en-US": "Text*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-speech-format",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-file-audio-o",
                    "label": {
                        "en-US": "Format*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-moonshots-ai",
            "type": "moonshots-ai-tts",
            "version": "1.0.0",
            "author": "Jean-Philippe Encausse <Jp@encausse.net>",
            "desc": "Wrapper on Azure TTS API",
            "keywords": "Moonshots, NodeRED, Azure, AI",
            "license": "MIT"
        },
        "color": "#9ff6fd",
        "outputLabels": [
            "Error",
            ""
        ],
        "icon": "node-red/status.svg",
        "status": {
            "x": 680,
            "y": 220,
            "wires": [
                {
                    "id": "bacbbd908bf68554",
                    "port": 0
                },
                {
                    "id": "d529ab918818d4f0",
                    "port": 0
                },
                {
                    "id": "5ae59fc5d8a4aa3c",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "8c2691f3.088cb",
        "type": "function",
        "z": "30ca57d.d9cd6a8",
        "name": "REST API",
        "func": "let CLIENT = global.get(\"CLIENT\");\nlet lang   = CLIENT.UTIL.getLanguage(msg._client_id);\nlet voice  = CLIENT.CONFIG.i18n.voice[lang];\n\nlet subscription = CLIENT.UTIL.getMessageProperty(msg, env.get(\"env-sub\"))\n    subscription = CLIENT.CONFIG.azure[subscription]\n\nmsg.url = 'https://'+subscription.region+'.tts.speech.microsoft.com/cognitiveservices/v1'\nmsg.headers = {\n    'Ocp-Apim-Subscription-Key': subscription.key,\n    'Content-Type': 'application/ssml+xml',\n    'X-Microsoft-OutputFormat': 'audio-16khz-128kbitrate-mono-mp3',\n    'User-Agent' : 'Node-RED',\n}\n\nmsg.payload = \"<speak version='1.0' xml:lang='\"+lang+\"'>\"\n            + \"<voice xml:lang='\"+lang+\"' xml:gender='\"+voice.gender+\"' name='\"+voice.name+\"'>\"\n            + msg.cache_tts.tts\n            + \"</voice>\"\n            + \"</speak>\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 100,
        "y": 680,
        "wires": [
            [
                "92164592.cc5aa8"
            ]
        ]
    },
    {
        "id": "92164592.cc5aa8",
        "type": "http request",
        "z": "30ca57d.d9cd6a8",
        "name": "Cognitive Services",
        "method": "POST",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 290,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "716136273b1cef6a",
        "type": "file",
        "z": "30ca57d.d9cd6a8",
        "name": "Write /voices/*.mp3",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 850,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "b69f2e3fea04cee4",
        "type": "function",
        "z": "30ca57d.d9cd6a8",
        "name": "Hash",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\n\nlet lang      = MOONSHOTS.UTIL.getLanguage(msg._client_id);\nlet cache_fs  = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-cache-fs\"))\nlet cache_web = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-cache-web\"))\nlet tts       = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-tts\"))\nlet config    = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-speech-config\"))\nlet format    = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-speech-format\"))\n\nif (!config || !cache_fs || !tts){\n    node.warn('Missing speech credential')\n    return [msg, undefined, undefined]\n}\n\nlet ext = (format && format =='wav') ? 'wav' : 'mp3'\n\nmsg.payload   = { tts }\n\n// BUild a hash\nlet shaObj   = new jsSHA(\"SHA-1\", \"TEXT\");\n    shaObj.update(msg.payload.tts);\n    \n// Cache Language\nmsg.payload.hash = config.name+'_'+lang+'_'+shaObj.getHash(\"HEX\");\n\n// Prepare filenames\nmsg.payload.filename_json = cache_fs + msg.payload.hash + '.json'\nmsg.payload.filename_mp3  = cache_fs + msg.payload.hash + '.' + ext\nmsg.payload.url = cache_web + msg.payload.hash + '.' + ext\n\nif (fs.existsSync(msg.payload.filename_mp3)){\n    return [undefined, undefined, msg]\n}\nreturn [undefined, msg, undefined]",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsSHA",
                "module": "jssha"
            },
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 190,
        "y": 220,
        "wires": [
            [],
            [
                "bacbbd908bf68554",
                "112b83823fc8f381"
            ],
            [
                "98ba4b4e48eee014",
                "d529ab918818d4f0"
            ]
        ]
    },
    {
        "id": "fb114fa9f99c8bd1",
        "type": "file in",
        "z": "30ca57d.d9cd6a8",
        "name": "Read /voices/*.mp3",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 550,
        "y": 280,
        "wires": [
            [
                "3d8ab092df89f877"
            ]
        ]
    },
    {
        "id": "112b83823fc8f381",
        "type": "function",
        "z": "30ca57d.d9cd6a8",
        "name": "Microsoft Speech SDK",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\n\nlet subskey      = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-speech-key\"))\nlet subscription = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-speech-config\"))\nlet lang         = MOONSHOTS.UTIL.getLanguage(msg._client_id);\nlet voice        = subscription.voices[lang];\n\n// Retrieve TTS\nlet ssml = \"<speak version='1.0' xml:lang='\"+lang+\"' xmlns='http://www.w3.org/2001/10/synthesis'  xmlns:mstts='https://www.w3.org/2001/mstts'>\"\n         + \"<voice xml:lang='\"+lang+\"' xml:gender='\"+voice.gender+\"' name='\"+voice.name+\"'>\"\n         + msg.payload.tts\n         + \"</voice>\"\n         + \"</speak>\"\n\n\n// Speech Config : https://learn.microsoft.com/en-us/azure/ai-services/speech-service/speech-services-private-link?tabs=portal\nlet speechConfig = SpeechSDK.SpeechConfig.fromSubscription(subskey, subscription.region);\nif (voice.privateEndPoint) {\n    speechConfig = SpeechSDK.SpeechConfig.fromEndpoint(new url.URL(voice.privateEndPoint), subskey);\n}\nelse if (voice.endpointId) {\n    speechConfig.endpointId = voice.endpointId\n}\n\nspeechConfig.speechSynthesisLanguage = lang\nspeechConfig.speechSynthesisVoiceName = voice.name\n\n// FIXME\nlet format = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-speech-format\"))\nif (format && format == \"wav\"){\n    speechConfig.speechSynthesisOutputFormat = SpeechSDK.SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm;\n}\n\nlet stream       = SpeechSDK.AudioOutputStream.createPullStream();\nlet audioConfig  = SpeechSDK.AudioConfig.fromStreamOutput(stream);\n\nlet viseme    = []\nlet bookmarks = []\nlet synthesizer = new SpeechSDK.SpeechSynthesizer(speechConfig, audioConfig);\n\nsynthesizer.visemeReceived  = (s, e) => { viseme.push(e) }\nsynthesizer.bookmarkReached = (s, e) => { bookmarks.push(e) }\n\nlet handleResult = (result) => {\n    synthesizer.close();\n    msg.payload.ssml = { viseme, bookmarks }\n    if (result.audioData){\n        msg.payload.buffer = Buffer.from(result.audioData)\n        node.send(msg)\n    } else {\n        msg.payload.error = result.privErrorDetails\n        node.send([undefined,msg])\n    }\n}\n\nlet handleError = (err) => {\n    synthesizer.close();\n    msg.payload.error = err;\n    node.send([undefined,msg])\n}\n\nif (subscription.ssml){\n    synthesizer.speakSsmlAsync(ssml, handleResult, handleError);\n} else {\n    synthesizer.speakTextAsync(msg.payload.tts, handleResult, handleError);\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "SpeechSDK",
                "module": "microsoft-cognitiveservices-speech-sdk"
            },
            {
                "var": "url",
                "module": "url"
            }
        ],
        "x": 420,
        "y": 160,
        "wires": [
            [
                "232425d871a08562",
                "b792937d7b4ff79d"
            ],
            [
                "5ae59fc5d8a4aa3c"
            ]
        ]
    },
    {
        "id": "232425d871a08562",
        "type": "change",
        "z": "30ca57d.d9cd6a8",
        "name": "Store Buffer",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "payload.filename_mp3",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.buffer",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 120,
        "wires": [
            [
                "716136273b1cef6a"
            ]
        ]
    },
    {
        "id": "98ba4b4e48eee014",
        "type": "change",
        "z": "30ca57d.d9cd6a8",
        "name": "Backup",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "payload.filename_mp3",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "_payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 280,
        "wires": [
            [
                "fb114fa9f99c8bd1"
            ]
        ]
    },
    {
        "id": "b792937d7b4ff79d",
        "type": "change",
        "z": "30ca57d.d9cd6a8",
        "name": "Store SSML",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "payload.filename_json",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.ssml",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 80,
        "wires": [
            [
                "c9d6877d8ea76315"
            ]
        ]
    },
    {
        "id": "c9d6877d8ea76315",
        "type": "file",
        "z": "30ca57d.d9cd6a8",
        "name": "Write /voices/*.json",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 850,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "77f059100d86d60c",
        "type": "change",
        "z": "30ca57d.d9cd6a8",
        "name": "Restore JSON",
        "rules": [
            {
                "t": "set",
                "p": "_payload.ssml",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "_payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "_payload",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "filename",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 320,
        "wires": [
            [
                "9efd3c95299199a9"
            ]
        ]
    },
    {
        "id": "e7aa40a4ee9dd703",
        "type": "change",
        "z": "30ca57d.d9cd6a8",
        "name": "Backup",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "payload.filename_json",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 320,
        "wires": [
            [
                "7661ad2d44c7a3c8"
            ]
        ]
    },
    {
        "id": "7661ad2d44c7a3c8",
        "type": "file in",
        "z": "30ca57d.d9cd6a8",
        "name": "Read /voices/*.json",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 550,
        "y": 320,
        "wires": [
            [
                "77f059100d86d60c"
            ]
        ]
    },
    {
        "id": "3d8ab092df89f877",
        "type": "change",
        "z": "30ca57d.d9cd6a8",
        "name": "Restore Buffer",
        "rules": [
            {
                "t": "set",
                "p": "_payload.buffer",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "_payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 280,
        "wires": [
            [
                "e7aa40a4ee9dd703"
            ]
        ]
    },
    {
        "id": "9efd3c95299199a9",
        "type": "json",
        "z": "30ca57d.d9cd6a8",
        "name": "SSML to Object",
        "property": "payload.ssml",
        "action": "obj",
        "pretty": false,
        "x": 960,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "28a692f452a8d2c2",
        "type": "comment",
        "z": "30ca57d.d9cd6a8",
        "name": "Backup",
        "info": "",
        "x": 90,
        "y": 640,
        "wires": []
    },
    {
        "id": "bacbbd908bf68554",
        "type": "change",
        "z": "30ca57d.d9cd6a8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.fill",
                "pt": "msg",
                "to": "blue",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.text",
                "pt": "msg",
                "to": "Cloud API Call",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 305,
        "y": 200,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-wrench",
        "l": false
    },
    {
        "id": "d529ab918818d4f0",
        "type": "change",
        "z": "30ca57d.d9cd6a8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.fill",
                "pt": "msg",
                "to": "green",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.text",
                "pt": "msg",
                "to": "Using Cache",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 305,
        "y": 240,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-wrench",
        "l": false
    },
    {
        "id": "5ae59fc5d8a4aa3c",
        "type": "change",
        "z": "30ca57d.d9cd6a8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.fill",
                "pt": "msg",
                "to": "red",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.text",
                "pt": "msg",
                "to": "payload.error",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 595,
        "y": 200,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-wrench",
        "l": false
    },
    {
        "id": "10437a77193b4569",
        "type": "subflow",
        "name": "ws:chat",
        "info": "Use the mirror:event to send a chat message on the mirror.",
        "category": "Encausse.net",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "c59e30d2aa43d57d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 740,
                "y": 60,
                "wires": [
                    {
                        "id": "70d061ef59c2f54f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "env-replyId",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-paper-plane-o",
                    "label": {
                        "en-US": "Reply ID"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-from",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-user-circle-o",
                    "label": {
                        "en-US": "From"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Server"
                                },
                                "v": ""
                            },
                            {
                                "l": {
                                    "en-US": "System"
                                },
                                "v": "system"
                            },
                            {
                                "l": {
                                    "en-US": "User"
                                },
                                "v": "user"
                            }
                        ]
                    }
                }
            },
            {
                "name": "env-text",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-file-text-o",
                    "label": {
                        "en-US": "Text*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-speech",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-volume-control-phone",
                    "label": {
                        "en-US": "Voix*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-moonshots-web",
            "type": "moonshots-ws-chat",
            "version": "1.0.0",
            "author": "Jean-Philippe Encausse <Jp@encausse.net>",
            "desc": "Handle websocket chat message",
            "keywords": "Moonshots, NodeRED, Web, Websocket",
            "license": "MIT"
        },
        "color": "#9ff6fd",
        "icon": "node-red/comment.svg",
        "status": {
            "x": 740,
            "y": 120,
            "wires": [
                {
                    "id": "adb07b6dd2395695",
                    "port": 0
                },
                {
                    "id": "3181dc13045607ed",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "c59e30d2aa43d57d",
        "type": "function",
        "z": "10437a77193b4569",
        "name": "Build Message",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\n\nlet text   = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-text\"))\nlet speech = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-speech\"))\n\n\nmsg['env-value'] = {\n    from : env.get(\"env-from\"),\n    text, speech\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 100,
        "wires": [
            [
                "adb07b6dd2395695",
                "184c42307ce7f3d1"
            ]
        ]
    },
    {
        "id": "70d061ef59c2f54f",
        "type": "change",
        "z": "10437a77193b4569",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "env-value",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "adb07b6dd2395695",
        "type": "function",
        "z": "10437a77193b4569",
        "name": "Status",
        "func": "let fill = 'blue'\nlet text = 'Broadcast'\n\nif (msg._client_id){\n    fill = 'green'\n    text = msg._client_id\n}\n\nmsg.payload = ({fill, text});\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "3181dc13045607ed",
        "type": "function",
        "z": "10437a77193b4569",
        "name": "Clear",
        "func": "msg.payload = ({});\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "184c42307ce7f3d1",
        "type": "subflow:b3636bf5f1ee4b3a",
        "z": "10437a77193b4569",
        "name": "",
        "env": [
            {
                "name": "env-replyId",
                "value": "env-replyId",
                "type": "env"
            },
            {
                "name": "env-name",
                "value": "ws:chat",
                "type": "str"
            },
            {
                "name": "env-value",
                "value": "env-value",
                "type": "str"
            }
        ],
        "x": 380,
        "y": 80,
        "wires": [
            [
                "70d061ef59c2f54f",
                "3181dc13045607ed"
            ]
        ]
    },
    {
        "id": "5f78bcc1fab07bcc",
        "type": "subflow",
        "name": "ws:stdby",
        "info": "Wait for a SocketIO message to continue the flow",
        "category": "Encausse.net",
        "in": [
            {
                "x": 80,
                "y": 120,
                "wires": [
                    {
                        "id": "07bbfaabef33391a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 510,
                "y": 80,
                "wires": [
                    {
                        "id": "07bbfaabef33391a",
                        "port": 0
                    }
                ]
            },
            {
                "x": 460,
                "y": 160,
                "wires": [
                    {
                        "id": "07bbfaabef33391a",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "env-stand-by-id",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-clock-o",
                    "label": {
                        "en-US": "Unique ID"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "evt-stand-by-type",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-map-signs",
                    "label": {
                        "en-US": "Type"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "StandBy"
                                },
                                "v": "mirror:standby"
                            },
                            {
                                "l": {
                                    "en-US": "Reply/Ack"
                                },
                                "v": "mirror:ack"
                            }
                        ]
                    }
                }
            },
            {
                "name": "evt-stand-by-action",
                "type": "str",
                "value": "set",
                "ui": {
                    "icon": "font-awesome/fa-code-fork",
                    "label": {
                        "en-US": "Action"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Set to StandBy"
                                },
                                "v": "set"
                            },
                            {
                                "l": {
                                    "en-US": "Check StandBy"
                                },
                                "v": "check"
                            }
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-moonshots-web",
            "type": "moonshots-ws-stdby",
            "version": "1.0.0",
            "author": "Jean-Philippe Encausse <Jp@encausse.net>",
            "desc": "Handle websocket StandBy",
            "keywords": "Moonshots, NodeRED, Web, Websocket",
            "license": "MIT"
        },
        "color": "#9ff6fd",
        "outputLabels": [
            "Error: Missing Variable or Already in StandBy",
            "Done or Ready to StandBy"
        ],
        "icon": "font-awesome/fa-clock-o"
    },
    {
        "id": "07bbfaabef33391a",
        "type": "function",
        "z": "5f78bcc1fab07bcc",
        "name": "STANDBY",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\nlet SOCKETS = MOONSHOTS['web-socket'] = MOONSHOTS['web-socket'] || {}\n\nif (msg._client_id === undefined) { /* Broadcast ?! */\n    msg._standby = { err: 'Missing _client_id, bypass as a broadcast' }; \n    return [undefined, msg];\n}\n\nlet socket = SOCKETS[msg._client_id]\nif (socket === undefined) {\n    msg._standby = { err: 'Missing socket'}; \n    return [msg, undefined];\n}\n\n// Only once > per node > per socket\nlet standById = env.get('env-stand-by-id')\nif (standById === undefined) {\n    msg._standby = {err : 'Missing stand-by id'}; \n    return [msg, undefined];\n}\n\n// Check \nif (socket.STANDBY[standById] !== undefined) {\n    msg._standby = {err : 'Stand-by already set'}; \n    return [msg, undefined];\n}\n\nlet stb_action = env.get('evt-stand-by-action')\nif (stb_action == \"set\") {\n    // Wait for an internal event\n    let type = env.get('evt-stand-by-type')\n    let callback = (msg_wakeup) => {\n        delete socket.STANDBY[standById]\n        msg.standby = msg_wakeup\n        node.send([undefined, msg]) \n    }\n    socket.STANDBY[standById] = { type, callback }\n    global.set('__MOONSHOTS__', MOONSHOTS)\n    \n} else { node.send([undefined, msg]) } // We only check in it's possible\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 120,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "b3636bf5f1ee4b3a",
        "type": "subflow",
        "name": "ws:event",
        "info": "",
        "category": "Encausse.net",
        "in": [
            {
                "x": 60,
                "y": 140,
                "wires": [
                    {
                        "id": "8b13fa6a73b103e2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 680,
                "y": 160,
                "wires": [
                    {
                        "id": "3dd3b3ea3255c8d7",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "env-replyId",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-send-o",
                    "label": {
                        "en-US": "Reply ID"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-name",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-send",
                    "label": {
                        "en-US": "Name"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "env-value",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-align-justify",
                    "label": {
                        "en-US": "Value*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "bool",
                            "json",
                            "bin",
                            "env",
                            "conf-types"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-moonshots-web",
            "type": "moonshots-ws-event",
            "version": "1.1.1",
            "author": "Jean-Philippe Encausse <jp@encausse.net>",
            "desc": "Handle Websocket Events",
            "keywords": "Moonshots, NodeRED, Web, Websocket",
            "license": "MIT"
        },
        "color": "#9ff6fd",
        "icon": "font-awesome/fa-send-o",
        "status": {
            "x": 1120,
            "y": 80,
            "wires": [
                {
                    "id": "c2240b694e49c45e",
                    "port": 0
                },
                {
                    "id": "d504278dfb90b051",
                    "port": 0
                },
                {
                    "id": "018e8bd451a9980f",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "cefafc0b0888d4fd",
        "type": "function",
        "z": "b3636bf5f1ee4b3a",
        "name": "Build",
        "func": "if (typeof msg.payload == 'object'){\n    msg.payload = JSON.stringify(msg.payload);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 200,
        "wires": [
            [
                "a3b92cb9057710ba"
            ]
        ]
    },
    {
        "id": "8b13fa6a73b103e2",
        "type": "function",
        "z": "b3636bf5f1ee4b3a",
        "name": "@:restore",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\nlet SOCKETS = MOONSHOTS['web-socket'] = MOONSHOTS['web-socket'] || {}\n\n// Store a reply object\nlet replyId = env.get('env-replyId')\nif (replyId === undefined){ node.warn('Missing reply id'); return false; }\n\n// Broadcast or ClientID\nif (msg._client_id){\n    let socket = SOCKETS[msg._client_id]\n    if (socket === undefined){ node.warn('No socket available'); return false; }\n\n    // Set the target socket\n    msg._session      = msg._session || {}\n    msg._session.id   = socket.socketID\n    msg._session.type =  \"websocket\"\n}\n\n// If there is no env-value then use the payload as data\nlet value = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-value\")) || { data : msg.payload }\n\n// Build message\nmsg._payload = msg.payload\nmsg.payload = {\n    \"replyId\": replyId,\n    \"message\": {\n        \"type\": \"event\",\n        \"event\": {\n            \"name\":  env.get(\"env-name\"),\n            \"value\": value\n        }\n    }\n}\n\nglobal.set(\"__MOONSHOTS__\", MOONSHOTS)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 140,
        "wires": [
            [
                "cefafc0b0888d4fd",
                "c2240b694e49c45e",
                "5f36cc676b2e9ed2"
            ]
        ]
    },
    {
        "id": "c2240b694e49c45e",
        "type": "function",
        "z": "b3636bf5f1ee4b3a",
        "name": "Status",
        "func": "let fill = 'blue'\nlet text = 'Broadcast'\n\nif (msg._client_id){\n    fill = 'green'\n    text = msg._client_id\n}\n\nmsg.payload = ({fill, text});\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "d504278dfb90b051",
        "type": "function",
        "z": "b3636bf5f1ee4b3a",
        "name": "Status",
        "func": "let fill = 'blue'\nlet text = env.get('env-replyId')\n\nif (msg._client_id){\n    fill  = 'green'\n    text += ' from ' + msg._client_id\n}\n\nmsg.payload = ({fill, text});\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 120,
        "wires": [
            [
                "da30cebd6a22d89a"
            ]
        ]
    },
    {
        "id": "da30cebd6a22d89a",
        "type": "delay",
        "z": "b3636bf5f1ee4b3a",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 860,
        "y": 120,
        "wires": [
            [
                "018e8bd451a9980f"
            ]
        ]
    },
    {
        "id": "018e8bd451a9980f",
        "type": "function",
        "z": "b3636bf5f1ee4b3a",
        "name": "Clear",
        "func": "msg.payload = ({});\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "5f36cc676b2e9ed2",
        "type": "change",
        "z": "b3636bf5f1ee4b3a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "_payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 140,
        "wires": [
            [
                "3dd3b3ea3255c8d7"
            ]
        ]
    },
    {
        "id": "3dd3b3ea3255c8d7",
        "type": "subflow:5f78bcc1fab07bcc",
        "z": "b3636bf5f1ee4b3a",
        "name": "",
        "env": [
            {
                "name": "env-stand-by-id",
                "value": "env-replyId",
                "type": "env"
            },
            {
                "name": "evt-stand-by-type",
                "value": null,
                "type": "str"
            }
        ],
        "x": 560,
        "y": 140,
        "wires": [
            [],
            [
                "d504278dfb90b051"
            ]
        ]
    },
    {
        "id": "a3b92cb9057710ba",
        "type": "link call",
        "z": "b3636bf5f1ee4b3a",
        "name": "",
        "links": [
            "6cd87716b8e9f785"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 850,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "d65659307bbe1d4a",
        "type": "subflow:b3636bf5f1ee4b3a",
        "z": "8dce453e92fa8a59",
        "name": "",
        "x": 100,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "85d69fac6ccfd2e0",
        "type": "subflow:10437a77193b4569",
        "z": "8dce453e92fa8a59",
        "name": "",
        "x": 100,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "0955a23dbc22c657",
        "type": "subflow:30ca57d.d9cd6a8",
        "z": "8dce453e92fa8a59",
        "name": "",
        "x": 510,
        "y": 1520,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "9a511b8f3bd65590",
        "type": "subflow:2a0881fea396956c",
        "z": "8dce453e92fa8a59",
        "name": "",
        "env": [
            {
                "name": "env-query",
                "value": null,
                "type": "str"
            }
        ],
        "x": 530,
        "y": 1340,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "9b820e49dc55a518",
        "type": "subflow:8b8c4ee6a78019cd",
        "z": "8dce453e92fa8a59",
        "name": "",
        "x": 520,
        "y": 1580,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "b7cf9b51f5955dfb",
        "type": "subflow:5704ae21aaa902c8",
        "z": "8dce453e92fa8a59",
        "name": "",
        "x": 310,
        "y": 1340,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "1147db4550061ead",
        "type": "subflow:071ffca41809de80",
        "z": "8dce453e92fa8a59",
        "name": "",
        "x": 310,
        "y": 1380,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "1766ced951006934",
        "type": "subflow:a1e98c1cc76bcf50",
        "z": "8dce453e92fa8a59",
        "name": "",
        "x": 310,
        "y": 1420,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "8cc2c575d49c77b4",
        "type": "subflow:b9a304504e87d0dd",
        "z": "8dce453e92fa8a59",
        "name": "",
        "x": 520,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "163d94bd281f1cbc",
        "type": "subflow:ed6749f4e72bfce1",
        "z": "8dce453e92fa8a59",
        "name": "",
        "x": 530,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "5a226890d86cd05c",
        "type": "subflow:a1cfb6c2775de544",
        "z": "8dce453e92fa8a59",
        "name": "",
        "x": 110,
        "y": 1500,
        "wires": [
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "a378c6b4239dbc81",
        "type": "subflow:681160babea0f830",
        "z": "8dce453e92fa8a59",
        "name": "",
        "x": 300,
        "y": 1560,
        "wires": [
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "aead39cd036e1157",
        "type": "subflow:9c3ff53b15fd137d",
        "z": "8dce453e92fa8a59",
        "name": "",
        "x": 300,
        "y": 1460,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "fa75d5567809768a",
        "type": "subflow:f36dcac84e162f71",
        "z": "8dce453e92fa8a59",
        "name": "",
        "env": [
            {
                "name": "env-options-format",
                "value": null,
                "type": "str"
            }
        ],
        "x": 310,
        "y": 1640,
        "wires": [
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "3d7c132503964849",
        "type": "subflow:5a761f7b96ed136a",
        "z": "8dce453e92fa8a59",
        "name": "",
        "x": 530,
        "y": 1460,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "8f92a77fbf8d3da2",
        "type": "subflow:5f78bcc1fab07bcc",
        "z": "8dce453e92fa8a59",
        "name": "",
        "env": [
            {
                "name": "evt-stand-by-type",
                "value": null,
                "type": "str"
            }
        ],
        "x": 100,
        "y": 1420,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "0101a7d80fb0928e",
        "type": "subflow:63608c8ffd25253a",
        "z": "8dce453e92fa8a59",
        "name": "",
        "x": 300,
        "y": 1500,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "232c3fc37d927f27",
        "type": "subflow:23c4be2d8e257059",
        "z": "8dce453e92fa8a59",
        "name": "",
        "x": 520,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "f8a53d4e076a1538",
        "type": "link in",
        "z": "8dce453e92fa8a59",
        "name": "ws:shortcut",
        "links": [],
        "x": 110,
        "y": 1580,
        "wires": [
            [
                "d1907d2cd135b519"
            ]
        ],
        "l": true
    },
    {
        "id": "d1907d2cd135b519",
        "type": "link out",
        "z": "8dce453e92fa8a59",
        "name": "ws:done",
        "mode": "return",
        "links": [],
        "x": 215,
        "y": 1580,
        "wires": []
    },
    {
        "id": "26ad775378fae24a",
        "type": "subflow:8e0f26963e23e657",
        "z": "8dce453e92fa8a59",
        "name": "",
        "x": 630,
        "y": 1520,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "6c126bb4578c54a2",
        "type": "subflow:4649143ffb637082",
        "z": "8dce453e92fa8a59",
        "name": "",
        "env": [
            {
                "name": "env-database",
                "value": "demo",
                "type": "str"
            },
            {
                "name": "env-query",
                "value": "create",
                "type": "str"
            },
            {
                "name": "env-payload",
                "value": "{\"schema\":{\"uid\":\"string\",\"piece\":\"string\",\"gamme\":\"string\",\"description\":\"string\"}}",
                "type": "json"
            }
        ],
        "x": 530,
        "y": 1380,
        "wires": [
            [],
            []
        ]
    }
]
