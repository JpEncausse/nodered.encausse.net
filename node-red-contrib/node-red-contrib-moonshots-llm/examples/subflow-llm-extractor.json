[
    {
        "id": "63608c8ffd25253a",
        "type": "subflow",
        "name": "llm:Model",
        "info": "\r\nThis node build and cache Azure OpenAI Client.\r\n\r\n# Input\r\n\r\nModel's credential should be provide using environment mechanism. \r\nSo all the custom variable related to the project will be stored in one location.\r\nYou can use a pattern like `env-llm-gpt4-key` for you env variables.\r\n\r\n- Model: the name of the Model\r\n- Key: The Azure API Key\r\n- Endpoint : The Azure API Endpoint\r\n\r\n# Output\r\n\r\nThe model is return into `msg.llm.model`\r\nThe model is cached at Node level.",
        "category": "Encausse.net",
        "in": [
            {
                "x": 80,
                "y": 100,
                "wires": [
                    {
                        "id": "f8484d1c8d4ce3da"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 410,
                "y": 60,
                "wires": [
                    {
                        "id": "f8484d1c8d4ce3da",
                        "port": 0
                    }
                ]
            },
            {
                "x": 460,
                "y": 120,
                "wires": [
                    {
                        "id": "f8484d1c8d4ce3da",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "env-llm-model",
                "type": "env",
                "value": "env-llm-model",
                "ui": {
                    "icon": "font-awesome/fa-cogs",
                    "label": {
                        "en-US": "Model*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-llm-key",
                "type": "env",
                "value": "env-llm-key",
                "ui": {
                    "icon": "font-awesome/fa-user-secret",
                    "label": {
                        "en-US": "Key*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-llm-endpoint",
                "type": "env",
                "value": "env-llm-endpoint",
                "ui": {
                    "icon": "font-awesome/fa-user-secret",
                    "label": {
                        "en-US": "Endpoint*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-moonshots-llm",
            "type": "moonshots-llm-model",
            "version": "1.0.0",
            "author": "Jean-Philippe Encausse <Jp@encausse.net>",
            "desc": "Config Node of Azure OpenAI",
            "keywords": "Moonshots, NodeRED, LLM, OpenAI",
            "license": "MIT"
        },
        "color": "#9ff6fd",
        "outputLabels": [
            "Error",
            "Build msg.llm.model"
        ],
        "icon": "node-red/cog.svg"
    },
    {
        "id": "f8484d1c8d4ce3da",
        "type": "function",
        "z": "63608c8ffd25253a",
        "name": "Build Model",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\nlet CONTEXT = MOONSHOTS['llm-model'] = MOONSHOTS['llm-model'] || {}\n\nmsg.llm = msg.llm || {}\n\nlet key      = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-llm-key\"))\nlet endpoint = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-llm-endpoint\"))\nlet id       = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-llm-model\"))\n\nif (!key || !endpoint || !id){\n    msg.llm.error = 'Missing OpenAI credential'\n    return [msg, undefined];\n}\n\n// Retrive Subflow Context\nlet config    = CONTEXT[id]\n\n// Retrieve and/or build a configuration file\nif (!config || !config.client){\n    const { OpenAIClient, AzureKeyCredential } = azureOpenai;\n\n    config = { key, endpoint, id }\n    config.client = new OpenAIClient(config.endpoint, new AzureKeyCredential(config.key));\n    CONTEXT[id] = config;\n    global.set('__MOONSHOTS__', MOONSHOTS)\n}\n\nif (config.client === undefined){\n    msg.llm.error = 'Missing OpenAI client'\n    return [msg, undefined];\n}\n\nmsg.llm.model = config\nreturn node.send([undefined, msg],false);",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "azureOpenai",
                "module": "@azure/openai"
            }
        ],
        "x": 230,
        "y": 100,
        "wires": [
            [],
            []
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "5704ae21aaa902c8",
        "type": "subflow",
        "name": "llm:Embedding",
        "info": "This node is a wrapper of Azure OpenAI Client to generate Embedding.\r\nEmbedding are cache into a LRU.\r\n\r\n# Input\r\nModel's credential should be provide using environment mechanism. See llm:Model documentation.\r\n\r\n- Dimension : Size of the embedding array\r\n- Data: The data to convert\r\n- Format: Stringify the embedding\r\n\r\n# Output\r\n\r\nThe node will output a `msg.llm` object with all underlaying elements\r\n 1. Errors (look into msg.llm.error)\r\n 2. Tools to handle\r\n 3. Response",
        "category": "Encausse.net",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "1da62cbf9b2b1e3e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 840,
                "y": 80,
                "wires": [
                    {
                        "id": "e73149b17a11bdb0",
                        "port": 0
                    }
                ]
            },
            {
                "x": 400,
                "y": 180,
                "wires": [
                    {
                        "id": "073b52d82f0ef7fd",
                        "port": 1
                    },
                    {
                        "id": "7c2c276230e382e2",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "env-llm-model",
                "type": "env",
                "value": "env-llm-gpt-model",
                "ui": {
                    "icon": "font-awesome/fa-cogs",
                    "label": {
                        "en-US": "Embedding*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-llm-key",
                "type": "env",
                "value": "env-llm-gpt-key",
                "ui": {
                    "icon": "font-awesome/fa-user-secret",
                    "label": {
                        "en-US": "Key*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-llm-endpoint",
                "type": "env",
                "value": "env-llm-gpt-endpoint",
                "ui": {
                    "icon": "font-awesome/fa-user-secret",
                    "label": {
                        "en-US": "Endpoint*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-dim",
                "type": "num",
                "value": "320",
                "ui": {
                    "icon": "font-awesome/fa-arrows",
                    "label": {
                        "en-US": "Dimensions*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-data",
                "type": "str",
                "value": "payload",
                "ui": {
                    "icon": "font-awesome/fa-align-left",
                    "label": {
                        "en-US": "Data*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-format",
                "type": "bool",
                "value": "false",
                "ui": {
                    "icon": "font-awesome/fa-code",
                    "label": {
                        "en-US": "Stringify"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-moonshots-llm",
            "type": "moonshots-llm-embedding",
            "version": "1.0.0",
            "author": "Jean-Philippe Encausse <jp@encausse.net>",
            "desc": "Wrapper on Azure OpenAI Client for Embeddings",
            "keywords": "Moonshots, NodeRED, LLM, OpenAI",
            "license": "MIT"
        },
        "color": "#9ff6fd",
        "icon": "node-red/split.svg"
    },
    {
        "id": "073b52d82f0ef7fd",
        "type": "function",
        "z": "5704ae21aaa902c8",
        "name": "Query OpenAI Embedding",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\nlet CONTEXT = MOONSHOTS['llm-embedding'] = MOONSHOTS['llm-embedding'] || {}\n\nlet options = msg.llm.options = { \"dimensions\": msg.llm.dimensions };\n\nlet t0 = Date.now()\nlet model = msg.llm.model\n\ntry { \n    let result = await model.client.getEmbeddings(\n        model.id, \n        msg.llm.data, \n        msg.llm.options\n    );\n    msg.llm.result = result;\n\n} catch(err){\n    msg.llm.error = { err };\n    return node.send([msg, undefined], false);\n}\n\n// Debug duration of API calls\nmsg.llm.debug.duration = (Date.now() - t0); \n\n\n// Handle result assume there is only 1\nlet datas = msg.llm.result.data\nif (!datas || datas.length < 1){\n    msg.llm.error = { err : 'No LLM embeddings' }\n    return node.send([msg, undefined],false);\n}\n\n// Store embedding\nmsg.llm.embedding =datas[0].embedding;\n\n// Stringify\nif (msg.llm.stringify){\n    try { msg.llm.embedding = JSON.stringify(msg.llm.embedding) } \n    catch(err){\n        msg.llm.error = { err }\n        return node.send([msg, undefined],false);\n    }\n}\n\n// Cache into an LRU\nCONTEXT.cache.put(msg.llm.data, msg.llm.embedding)\nreturn node.send([undefined,msg],false);",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 120,
        "wires": [
            [
                "e73149b17a11bdb0"
            ],
            []
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "7c2c276230e382e2",
        "type": "function",
        "z": "5704ae21aaa902c8",
        "name": "Variables",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\nlet CONTEXT = MOONSHOTS['llm-embedding'] = MOONSHOTS['llm-embedding'] || {}\n\nif (!CONTEXT.cache){\n    CONTEXT.cache = new MOONSHOTS.UTIL.LRUCache(500)\n    global.set('__MOONSHOTS__', MOONSHOTS)\n    node.warn('Building Embedding LRU Cache')\n}\n\n\nmsg.llm = msg.llm || {}\nmsg.llm.debug = msg.llm.debug || {}\n\nmsg.llm.data       = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-data\"))\nmsg.llm.dimensions = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-dim\"))\nmsg.llm.stringify  = env.get(\"env-format\");\n\nlet cache = CONTEXT.cache.get(msg.llm.data)\nif (cache != -1){\n    msg.llm.embedding = cache\n    msg.llm.debug.cache = true;\n    return node.send([undefined, msg],false);\n}\n\nreturn node.send([msg, undefined], false);",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 120,
        "wires": [
            [
                "073b52d82f0ef7fd"
            ],
            []
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "1da62cbf9b2b1e3e",
        "type": "subflow:63608c8ffd25253a",
        "z": "5704ae21aaa902c8",
        "name": "Build Model",
        "x": 190,
        "y": 80,
        "wires": [
            [
                "e73149b17a11bdb0"
            ],
            [
                "7c2c276230e382e2"
            ]
        ]
    },
    {
        "id": "e73149b17a11bdb0",
        "type": "function",
        "z": "5704ae21aaa902c8",
        "name": "Errors",
        "func": "//node.warn(msg.llm);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 80,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-bug"
    },
    {
        "id": "071ffca41809de80",
        "type": "subflow",
        "name": "llm:Extractor",
        "info": "Split input data into chunck, create embedding, output a document and cache it on disk\r\n\r\n# Input\r\n\r\nModel's credential should be provide using environment mechanism. See llm:Model documentation.\r\n\r\n- Source: a unique name used to cache the document\r\n- Override: override the cache \r\n- Buffer: an input buffer (Pdf). URL & Text are alternate option to Buffer \r\n- Metadata: store metadata aside the document \r\n- Chunck Size: Size of the chunks\r\n- Chunk Overlap : Overlap some part of the chunk \r\n- Dimensions: Embedding size\r\n\r\n# Output\r\n\r\nDocument with the following template.\r\n```\r\n[\r\n    {\r\n        chunks : [\r\n            data : {\r\n                data: String\r\n                embedding : [...]\r\n            }\r\n        ]\r\n    }\r\n]",
        "category": "Encausse.net",
        "in": [
            {
                "x": 40,
                "y": 160,
                "wires": [
                    {
                        "id": "1daec4fa45613530"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 840,
                "y": 160,
                "wires": [
                    {
                        "id": "0d9aa84471867204",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1020,
                "y": 80,
                "wires": [
                    {
                        "id": "340bf9890b1849d2",
                        "port": 0
                    },
                    {
                        "id": "1daec4fa45613530",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "env-llm-model",
                "type": "env",
                "value": "env-llm-gpt-model",
                "ui": {
                    "icon": "font-awesome/fa-cogs",
                    "label": {
                        "en-US": "Embedding*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-llm-key",
                "type": "env",
                "value": "env-llm-gpt-key",
                "ui": {
                    "icon": "font-awesome/fa-user-secret",
                    "label": {
                        "en-US": "Key*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-llm-endpoint",
                "type": "env",
                "value": "env-llm-gpt-endpoint",
                "ui": {
                    "icon": "font-awesome/fa-user-secret",
                    "label": {
                        "en-US": "Endpoint*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-source",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-i-cursor",
                    "label": {
                        "en-US": "Source*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-override",
                "type": "bool",
                "value": "false",
                "ui": {
                    "icon": "font-awesome/fa-trash-o",
                    "label": {
                        "en-US": "Override"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-buffer",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-braille",
                    "label": {
                        "en-US": "Buffer*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "bin",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-url",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-cloud",
                    "label": {
                        "en-US": "URL*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-text",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-align-left",
                    "label": {
                        "en-US": "Text*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-meta",
                "type": "json",
                "value": "{}",
                "ui": {
                    "icon": "font-awesome/fa-diamond",
                    "label": {
                        "en-US": "Metadata*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-chunck-size",
                "type": "str",
                "value": "1000",
                "ui": {
                    "icon": "font-awesome/fa-arrows-h",
                    "label": {
                        "en-US": "Chunk Size*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-chunck-overlap",
                "type": "str",
                "value": "0",
                "ui": {
                    "icon": "font-awesome/fa-clone",
                    "label": {
                        "en-US": "Chunk Overlap*"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "env-dim",
                "type": "num",
                "value": "320",
                "ui": {
                    "icon": "font-awesome/fa-arrows-h",
                    "label": {
                        "en-US": "Dimensions"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-moonshots-llm",
            "type": "moonshots-llm-extractor",
            "version": "1.0.0",
            "author": "Jean-Philippe Encausse <jp@encausse.net>",
            "desc": "Extract Embeddings from Documents",
            "keywords": "Moonshots, NodeRED, LLM, OpenAI",
            "license": "MIT"
        },
        "color": "#9ff6fd",
        "icon": "font-awesome/fa-share"
    },
    {
        "id": "1daec4fa45613530",
        "type": "function",
        "z": "071ffca41809de80",
        "name": "Variables",
        "func": "let MOONSHOTS = global.get('__MOONSHOTS__') || {}\n\nmsg.extractor = { debug : {} }\nmsg.extractor.source          = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-source\"))         // Source Name for caching\nmsg.extractor.override        = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-override\"))       // Override cache if exists\nmsg.extractor.buffer          = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-buffer\"))         // Buffer to work on\nmsg.extractor.text            = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-text\"))           // Text to work on\nmsg.extractor.url             = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-url\"))            // Remote content to retrieve\nmsg.extractor.metadata        = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-meta\")) || {}     // Metadata to link\nmsg.extractor.chunks          = {}\nmsg.extractor.chunks.size     = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-chunck-size\"))    // Size of chunks\nmsg.extractor.chunks.overlap  = MOONSHOTS.UTIL.getMessageProperty(msg, env.get(\"env-chunck-overlap\")) // Size of chunks overlap\nmsg.extractor.chunks.data     = []\n\n// Build a hash from source\nif (msg.extractor.source){\n    let shaObj   = new jsSHA(\"SHA-1\", \"TEXT\");\n        shaObj.update(msg.extractor.source);\n\n    msg.extractor.filename = 'node-red-static/db/rag_'+shaObj.getHash(\"HEX\")+'.json';\n\n    if (fs.existsSync(msg.extractor.filename) && !msg.extractor.override){\n        msg.extractor = JSON.parse(fs.readFileSync(msg.extractor.filename));\n        msg.extractor.debug.cache = true;\n        return node.send([msg, undefined, undefined, undefined],false);\n    }\n\n} else { node.warn('Missing source to cache the extractor'); }\n\nif (msg.extractor.buffer){ return node.send([undefined, msg, undefined, undefined],false); }\nif (msg.extractor.text)  { return node.send([undefined, undefined, msg, undefined],false); }\nreturn node.send([undefined, undefined, undefined, msg],false);",
        "outputs": 4,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsSHA",
                "module": "jssha"
            },
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 160,
        "y": 100,
        "wires": [
            [],
            [
                "9aa7a5fcc32c742f"
            ],
            [
                "42a6819ca65816d7"
            ],
            [
                "06100e19d6a018af"
            ]
        ],
        "outputLabels": [
            "Already cached",
            "Use the Buffer",
            "Use the Text",
            "Other"
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "9aa7a5fcc32c742f",
        "type": "function",
        "z": "071ffca41809de80",
        "name": "Buffer Extractor",
        "func": "const { getTextExtractor } = OfficeTextExtractor\nconst extractor = getTextExtractor()\nmsg.extractor.text = await extractor.extractText({ input: msg.extractor.buffer, type: 'buffer' })\n\nreturn node.send(msg,false);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "OfficeTextExtractor",
                "module": "office-text-extractor"
            }
        ],
        "x": 380,
        "y": 120,
        "wires": [
            [
                "42a6819ca65816d7"
            ]
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "13da18883dba02a9",
        "type": "comment",
        "z": "071ffca41809de80",
        "name": "See EmbedJs Documentation",
        "info": "// https://github.com/llm-tools/embedJs/blob/23f4fd0203f166362789adfbe3f89350b4e0b0ee/src/loaders/ppt-loader.ts",
        "x": 140,
        "y": 40,
        "wires": []
    },
    {
        "id": "42a6819ca65816d7",
        "type": "function",
        "z": "071ffca41809de80",
        "name": "TextSplitter",
        "func": "const chunkSize    = msg.extractor.chunks.size;\nconst chunkOverlap = msg.extractor.chunks.overlap;\nconst chunker = new TextSplitter.RecursiveCharacterTextSplitter({ chunkSize, chunkOverlap });\n\nconst cleanString = (text) => {\n    text = text.replace(/\\\\/g, '');\n    text = text.replace(/#/g, ' ');\n    text = text.replace(/\\. \\./g, '.');\n    text = text.replace(/\\s\\s+/g, ' ');\n    text = text.replace(/(\\r\\n|\\n|\\r)/gm, ' ');\n    return text.trim();\n}\n\nlet chunks = await chunker.splitText(cleanString(msg.extractor.text));\nmsg.extractor.chunks.data = chunks.map((data, index) => {\n    const startIndex = index * (chunkSize - chunkOverlap);\n    const endIndex = startIndex + data.length;\n    return { data, chunkIndex: index, startIndex, endIndex };\n});\n\nreturn node.send(msg, false);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "TextSplitter",
                "module": "@langchain/textsplitters"
            }
        ],
        "x": 390,
        "y": 160,
        "wires": [
            [
                "764ea68c982a91fd"
            ]
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "764ea68c982a91fd",
        "type": "array-loop",
        "z": "071ffca41809de80",
        "name": "Chunks",
        "key": "al417ae5a9e06a3859",
        "keyType": "msg",
        "reset": false,
        "resetValue": "value-null",
        "array": "extractor.chunks.data",
        "arrayType": "msg",
        "x": 540,
        "y": 200,
        "wires": [
            [
                "f4776003e798e875"
            ],
            [
                "0d9aa84471867204"
            ]
        ]
    },
    {
        "id": "0d9aa84471867204",
        "type": "subflow:5704ae21aaa902c8",
        "z": "071ffca41809de80",
        "name": "",
        "env": [
            {
                "name": "env-llm-model",
                "value": "env-llm-model",
                "type": "env"
            },
            {
                "name": "env-llm-key",
                "value": "env-llm-key",
                "type": "env"
            },
            {
                "name": "env-llm-endpoint",
                "value": "env-llm-endpoint",
                "type": "env"
            },
            {
                "name": "env-dim",
                "value": "env-dim",
                "type": "env"
            },
            {
                "name": "env-data",
                "value": "payload.data",
                "type": "str"
            },
            {
                "name": "env-chunk",
                "value": "payload.chunk",
                "type": "str"
            }
        ],
        "x": 710,
        "y": 200,
        "wires": [
            [],
            [
                "8ff439df04d18f3f"
            ]
        ]
    },
    {
        "id": "8ff439df04d18f3f",
        "type": "change",
        "z": "071ffca41809de80",
        "name": "setEmbedding",
        "rules": [
            {
                "t": "set",
                "p": "payload.embedding",
                "pt": "msg",
                "to": "llm.embedding",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 200,
        "wires": [
            [
                "764ea68c982a91fd"
            ]
        ]
    },
    {
        "id": "f4776003e798e875",
        "type": "function",
        "z": "071ffca41809de80",
        "name": "Build Document",
        "func": "\n// Build the Document\nmsg.filename = msg.extractor.filename\nmsg.payload  = msg.extractor\n\n// Remove Heavy\ndelete msg.extractor.buffer\ndelete msg.extractor.text\ndelete msg.extractor.override\n\nreturn node.send(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 120,
        "wires": [
            [
                "340bf9890b1849d2"
            ]
        ],
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "340bf9890b1849d2",
        "type": "file",
        "z": "071ffca41809de80",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 900,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "06100e19d6a018af",
        "type": "debug",
        "z": "071ffca41809de80",
        "name": "FIXME",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 170,
        "y": 160,
        "wires": []
    }
]
